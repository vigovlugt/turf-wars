(()=>{class on{constructor(e=[0,0,0,0,0,0,0,0,0]){this.elements=e}identity(){const e=this.elements;e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1}setZero(){const e=this.elements;e[0]=0,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=0,e[6]=0,e[7]=0,e[8]=0}setTrace(e){const t=this.elements;t[0]=e.x,t[4]=e.y,t[8]=e.z}getTrace(e=new x){const t=this.elements;e.x=t[0],e.y=t[4],e.z=t[8]}vmult(e,t=new x){const n=this.elements,i=e.x,o=e.y,r=e.z;return t.x=n[0]*i+n[1]*o+n[2]*r,t.y=n[3]*i+n[4]*o+n[5]*r,t.z=n[6]*i+n[7]*o+n[8]*r,t}smult(e){for(let t=0;t<this.elements.length;t++)this.elements[t]*=e}mmult(e,t=new on){const{elements:n}=e;for(let i=0;i<3;i++)for(let o=0;o<3;o++){let r=0;for(let s=0;s<3;s++)r+=n[i+s*3]*this.elements[s+o*3];t.elements[i+o*3]=r}return t}scale(e,t=new on){const n=this.elements,i=t.elements;for(let o=0;o!==3;o++)i[3*o+0]=e.x*n[3*o+0],i[3*o+1]=e.y*n[3*o+1],i[3*o+2]=e.z*n[3*o+2];return t}solve(e,t=new x){const n=3,i=4,o=[];let r,s;for(r=0;r<n*i;r++)o.push(0);for(r=0;r<3;r++)for(s=0;s<3;s++)o[r+i*s]=this.elements[r+3*s];o[3+4*0]=e.x,o[3+4*1]=e.y,o[3+4*2]=e.z;let a=3;const c=a;let l;const u=4;let h;do{if(r=c-a,o[r+i*r]===0){for(s=r+1;s<c;s++)if(o[r+i*s]!==0){l=u;do h=u-l,o[h+i*r]+=o[h+i*s];while(--l);break}}if(o[r+i*r]!==0)for(s=r+1;s<c;s++){const p=o[r+i*s]/o[r+i*r];l=u;do h=u-l,o[h+i*s]=h<=r?0:o[h+i*s]-o[h+i*r]*p;while(--l)}}while(--a);if(t.z=o[2*i+3]/o[2*i+2],t.y=(o[1*i+3]-o[1*i+2]*t.z)/o[1*i+1],t.x=(o[0*i+3]-o[0*i+2]*t.z-o[0*i+1]*t.y)/o[0*i+0],isNaN(t.x)||isNaN(t.y)||isNaN(t.z)||t.x===Infinity||t.y===Infinity||t.z===Infinity)throw"Could not solve equation! Got x=["+t.toString()+"], b=["+e.toString()+"], A=["+this.toString()+"]";return t}e(e,t,n){if(n===void 0)return this.elements[t+3*e];this.elements[t+3*e]=n}copy(e){for(let t=0;t<e.elements.length;t++)this.elements[t]=e.elements[t];return this}toString(){let e="";const t=",";for(let n=0;n<9;n++)e+=this.elements[n]+t;return e}reverse(e=new on){const t=3,n=6,i=[];let o,r;for(o=0;o<t*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+6*0]=1,i[3+6*1]=0,i[3+6*2]=0,i[4+6*0]=0,i[4+6*1]=1,i[4+6*2]=0,i[5+6*0]=0,i[5+6*1]=0,i[5+6*2]=1;let s=3;const a=s;let c;const l=n;let u;do{if(o=a-s,i[o+n*o]===0){for(r=o+1;r<a;r++)if(i[o+n*r]!==0){c=l;do u=l-c,i[u+n*o]+=i[u+n*r];while(--c);break}}if(i[o+n*o]!==0)for(r=o+1;r<a;r++){const h=i[o+n*r]/i[o+n*o];c=l;do u=l-c,i[u+n*r]=u<=o?0:i[u+n*r]-i[u+n*o]*h;while(--c)}}while(--s);o=2;do{r=o-1;do{const h=i[o+n*r]/i[o+n*o];c=n;do u=n-c,i[u+n*r]=i[u+n*r]-i[u+n*o]*h;while(--c)}while(r--)}while(--o);o=2;do{const h=1/i[o+n*o];c=n;do u=n-c,i[u+n*o]=i[u+n*o]*h;while(--c)}while(o--);o=2;do{r=2;do{if(u=i[t+r+n*o],isNaN(u)||u===Infinity)throw"Could not reverse! A=["+this.toString()+"]";e.e(o,r,u)}while(r--)}while(o--);return e}setRotationFromQuaternion(e){const t=e.x,n=e.y,i=e.z,o=e.w,r=t+t,s=n+n,a=i+i,c=t*r,l=t*s,u=t*a,h=n*s,p=n*a,d=i*a,m=o*r,y=o*s,v=o*a,g=this.elements;return g[3*0+0]=1-(h+d),g[3*0+1]=l-v,g[3*0+2]=u+y,g[3*1+0]=l+v,g[3*1+1]=1-(c+d),g[3*1+2]=p-m,g[3*2+0]=u-y,g[3*2+1]=p+m,g[3*2+2]=1-(c+h),this}transpose(e=new on){const t=e.elements,n=this.elements;for(let i=0;i!==3;i++)for(let o=0;o!==3;o++)t[3*i+o]=n[3*o+i];return e}}class x{constructor(e=0,t=0,n=0){this.x=e,this.y=t,this.z=n}cross(e,t=new x){const n=e.x,i=e.y,o=e.z,r=this.x,s=this.y,a=this.z;return t.x=s*o-a*i,t.y=a*n-r*o,t.z=r*i-s*n,t}set(e,t,n){return this.x=e,this.y=t,this.z=n,this}setZero(){this.x=this.y=this.z=0}vadd(e,t){if(t)t.x=e.x+this.x,t.y=e.y+this.y,t.z=e.z+this.z;else return new x(this.x+e.x,this.y+e.y,this.z+e.z)}vsub(e,t){if(t)t.x=this.x-e.x,t.y=this.y-e.y,t.z=this.z-e.z;else return new x(this.x-e.x,this.y-e.y,this.z-e.z)}crossmat(){return new on([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const e=this.x,t=this.y,n=this.z,i=Math.sqrt(e*e+t*t+n*n);if(i>0){const o=1/i;this.x*=o,this.y*=o,this.z*=o}else this.x=0,this.y=0,this.z=0;return i}unit(e=new x){const t=this.x,n=this.y,i=this.z;let o=Math.sqrt(t*t+n*n+i*i);return o>0?(o=1/o,e.x=t*o,e.y=n*o,e.z=i*o):(e.x=1,e.y=0,e.z=0),e}length(){const e=this.x,t=this.y,n=this.z;return Math.sqrt(e*e+t*t+n*n)}lengthSquared(){return this.dot(this)}distanceTo(e){const t=this.x,n=this.y,i=this.z,o=e.x,r=e.y,s=e.z;return Math.sqrt((o-t)*(o-t)+(r-n)*(r-n)+(s-i)*(s-i))}distanceSquared(e){const t=this.x,n=this.y,i=this.z,o=e.x,r=e.y,s=e.z;return(o-t)*(o-t)+(r-n)*(r-n)+(s-i)*(s-i)}scale(e,t=new x){const n=this.x,i=this.y,o=this.z;return t.x=e*n,t.y=e*i,t.z=e*o,t}vmul(e,t=new x){return t.x=e.x*this.x,t.y=e.y*this.y,t.z=e.z*this.z,t}addScaledVector(e,t,n=new x){return n.x=this.x+e*t.x,n.y=this.y+e*t.y,n.z=this.z+e*t.z,n}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(e=new x){return e.x=-this.x,e.y=-this.y,e.z=-this.z,e}tangents(e,t){const n=this.length();if(n>0){const i=su,o=1/n;i.set(this.x*o,this.y*o,this.z*o);const r=au;Math.abs(i.x)<.9?(r.set(1,0,0),i.cross(r,e)):(r.set(0,1,0),i.cross(r,e)),i.cross(e,t)}else e.set(1,0,0),t.set(0,1,0)}toString(){return this.x+","+this.y+","+this.z}toArray(){return[this.x,this.y,this.z]}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}lerp(e,t,n){const i=this.x,o=this.y,r=this.z;n.x=i+(e.x-i)*t,n.y=o+(e.y-o)*t,n.z=r+(e.z-r)*t}almostEquals(e,t=1e-6){return!(Math.abs(this.x-e.x)>t||Math.abs(this.y-e.y)>t||Math.abs(this.z-e.z)>t)}almostZero(e=1e-6){return!(Math.abs(this.x)>e||Math.abs(this.y)>e||Math.abs(this.z)>e)}isAntiparallelTo(e,t){return this.negate(Ka),Ka.almostEquals(e,t)}clone(){return new x(this.x,this.y,this.z)}}x.ZERO=new x(0,0,0);x.UNIT_X=new x(1,0,0);x.UNIT_Y=new x(0,1,0);x.UNIT_Z=new x(0,0,1);const su=new x,au=new x,Ka=new x;class Je{constructor(e={}){this.lowerBound=new x,this.upperBound=new x,e.lowerBound&&this.lowerBound.copy(e.lowerBound),e.upperBound&&this.upperBound.copy(e.upperBound)}setFromPoints(e,t,n,i){const o=this.lowerBound,r=this.upperBound,s=n;o.copy(e[0]),s&&s.vmult(o,o),r.copy(o);for(let a=1;a<e.length;a++){let c=e[a];s&&(s.vmult(c,$a),c=$a),c.x>r.x&&(r.x=c.x),c.x<o.x&&(o.x=c.x),c.y>r.y&&(r.y=c.y),c.y<o.y&&(o.y=c.y),c.z>r.z&&(r.z=c.z),c.z<o.z&&(o.z=c.z)}return t&&(t.vadd(o,o),t.vadd(r,r)),i&&(o.x-=i,o.y-=i,o.z-=i,r.x+=i,r.y+=i,r.z+=i),this}copy(e){return this.lowerBound.copy(e.lowerBound),this.upperBound.copy(e.upperBound),this}clone(){return new Je().copy(this)}extend(e){this.lowerBound.x=Math.min(this.lowerBound.x,e.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,e.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,e.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,e.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,e.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,e.upperBound.z)}overlaps(e){const t=this.lowerBound,n=this.upperBound,i=e.lowerBound,o=e.upperBound,r=i.x<=n.x&&n.x<=o.x||t.x<=o.x&&o.x<=n.x,s=i.y<=n.y&&n.y<=o.y||t.y<=o.y&&o.y<=n.y,a=i.z<=n.z&&n.z<=o.z||t.z<=o.z&&o.z<=n.z;return r&&s&&a}volume(){const e=this.lowerBound,t=this.upperBound;return(t.x-e.x)*(t.y-e.y)*(t.z-e.z)}contains(e){const t=this.lowerBound,n=this.upperBound,i=e.lowerBound,o=e.upperBound;return t.x<=i.x&&n.x>=o.x&&t.y<=i.y&&n.y>=o.y&&t.z<=i.z&&n.z>=o.z}getCorners(e,t,n,i,o,r,s,a){const c=this.lowerBound,l=this.upperBound;e.copy(c),t.set(l.x,c.y,c.z),n.set(l.x,l.y,c.z),i.set(c.x,l.y,l.z),o.set(l.x,c.y,l.z),r.set(c.x,l.y,c.z),s.set(c.x,c.y,l.z),a.copy(l)}toLocalFrame(e,t){const n=ec,i=n[0],o=n[1],r=n[2],s=n[3],a=n[4],c=n[5],l=n[6],u=n[7];this.getCorners(i,o,r,s,a,c,l,u);for(let h=0;h!==8;h++){const p=n[h];e.pointToLocal(p,p)}return t.setFromPoints(n)}toWorldFrame(e,t){const n=ec,i=n[0],o=n[1],r=n[2],s=n[3],a=n[4],c=n[5],l=n[6],u=n[7];this.getCorners(i,o,r,s,a,c,l,u);for(let h=0;h!==8;h++){const p=n[h];e.pointToWorld(p,p)}return t.setFromPoints(n)}overlapsRay(e){const{direction:t,from:n}=e,i=1/t.x,o=1/t.y,r=1/t.z,s=(this.lowerBound.x-n.x)*i,a=(this.upperBound.x-n.x)*i,c=(this.lowerBound.y-n.y)*o,l=(this.upperBound.y-n.y)*o,u=(this.lowerBound.z-n.z)*r,h=(this.upperBound.z-n.z)*r,p=Math.max(Math.max(Math.min(s,a),Math.min(c,l)),Math.min(u,h)),d=Math.min(Math.min(Math.max(s,a),Math.max(c,l)),Math.max(u,h));return d<0?!1:!(p>d)}}const $a=new x,ec=[new x,new x,new x,new x,new x,new x,new x,new x];class tc{constructor(){this.matrix=[]}get(e,t){let{index:n}=e,{index:i}=t;if(i>n){const o=i;i=n,n=o}return this.matrix[(n*(n+1)>>1)+i-1]}set(e,t,n){let{index:i}=e,{index:o}=t;if(o>i){const r=o;o=i,i=r}this.matrix[(i*(i+1)>>1)+o-1]=n?1:0}reset(){for(let e=0,t=this.matrix.length;e!==t;e++)this.matrix[e]=0}setNumObjects(e){this.matrix.length=e*(e-1)>>1}}class nc{constructor(){}addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;return n[e]===void 0&&(n[e]=[]),n[e].includes(t)||n[e].push(t),this}hasEventListener(e,t){if(this._listeners===void 0)return!1;const n=this._listeners;return!!(n[e]!==void 0&&n[e].includes(t))}hasAnyEventListener(e){if(this._listeners===void 0)return!1;const t=this._listeners;return t[e]!==void 0}removeEventListener(e,t){if(this._listeners===void 0)return this;const n=this._listeners;if(n[e]===void 0)return this;const i=n[e].indexOf(t);return i!==-1&&n[e].splice(i,1),this}dispatchEvent(e){if(this._listeners===void 0)return this;const t=this._listeners,n=t[e.type];if(n!==void 0){e.target=this;for(let i=0,o=n.length;i<o;i++)n[i].call(this,e)}return this}}class it{constructor(e=0,t=0,n=0,i=1){this.x=e,this.y=t,this.z=n,this.w=i}set(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this}toString(){return this.x+","+this.y+","+this.z+","+this.w}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(e,t){const n=Math.sin(t*.5);return this.x=e.x*n,this.y=e.y*n,this.z=e.z*n,this.w=Math.cos(t*.5),this}toAxisAngle(e=new x){this.normalize();const t=2*Math.acos(this.w),n=Math.sqrt(1-this.w*this.w);return n<.001?(e.x=this.x,e.y=this.y,e.z=this.z):(e.x=this.x/n,e.y=this.y/n,e.z=this.z/n),[e,t]}setFromVectors(e,t){if(e.isAntiparallelTo(t)){const n=cu,i=lu;e.tangents(n,i),this.setFromAxisAngle(n,Math.PI)}else{const n=e.cross(t);this.x=n.x,this.y=n.y,this.z=n.z,this.w=Math.sqrt(e.length()**2*t.length()**2)+e.dot(t),this.normalize()}return this}mult(e,t=new it){const n=this.x,i=this.y,o=this.z,r=this.w,s=e.x,a=e.y,c=e.z,l=e.w;return t.x=n*l+r*s+i*c-o*a,t.y=i*l+r*a+o*s-n*c,t.z=o*l+r*c+n*a-i*s,t.w=r*l-n*s-i*a-o*c,t}inverse(e=new it){const t=this.x,n=this.y,i=this.z,o=this.w;this.conjugate(e);const r=1/(t*t+n*n+i*i+o*o);return e.x*=r,e.y*=r,e.z*=r,e.w*=r,e}conjugate(e=new it){return e.x=-this.x,e.y=-this.y,e.z=-this.z,e.w=this.w,e}normalize(){let e=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return e===0?(this.x=0,this.y=0,this.z=0,this.w=0):(e=1/e,this.x*=e,this.y*=e,this.z*=e,this.w*=e),this}normalizeFast(){const e=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return e===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=e,this.y*=e,this.z*=e,this.w*=e),this}vmult(e,t=new x){const n=e.x,i=e.y,o=e.z,r=this.x,s=this.y,a=this.z,c=this.w,l=c*n+s*o-a*i,u=c*i+a*n-r*o,h=c*o+r*i-s*n,p=-r*n-s*i-a*o;return t.x=l*c+p*-r+u*-a-h*-s,t.y=u*c+p*-s+h*-r-l*-a,t.z=h*c+p*-a+l*-s-u*-r,t}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w,this}toEuler(e,t="YZX"){let n,i,o;const r=this.x,s=this.y,a=this.z,c=this.w;switch(t){case"YZX":const l=r*s+a*c;if(l>.499&&(n=2*Math.atan2(r,c),i=Math.PI/2,o=0),l<-.499&&(n=-2*Math.atan2(r,c),i=-Math.PI/2,o=0),n===void 0){const u=r*r,h=s*s,p=a*a;n=Math.atan2(2*s*c-2*r*a,1-2*h-2*p),i=Math.asin(2*l),o=Math.atan2(2*r*c-2*s*a,1-2*u-2*p)}break;default:throw new Error("Euler order "+t+" not supported yet.")}e.y=n,e.z=i,e.x=o}setFromEuler(e,t,n,i="XYZ"){const o=Math.cos(e/2),r=Math.cos(t/2),s=Math.cos(n/2),a=Math.sin(e/2),c=Math.sin(t/2),l=Math.sin(n/2);return i==="XYZ"?(this.x=a*r*s+o*c*l,this.y=o*c*s-a*r*l,this.z=o*r*l+a*c*s,this.w=o*r*s-a*c*l):i==="YXZ"?(this.x=a*r*s+o*c*l,this.y=o*c*s-a*r*l,this.z=o*r*l-a*c*s,this.w=o*r*s+a*c*l):i==="ZXY"?(this.x=a*r*s-o*c*l,this.y=o*c*s+a*r*l,this.z=o*r*l+a*c*s,this.w=o*r*s-a*c*l):i==="ZYX"?(this.x=a*r*s-o*c*l,this.y=o*c*s+a*r*l,this.z=o*r*l-a*c*s,this.w=o*r*s+a*c*l):i==="YZX"?(this.x=a*r*s+o*c*l,this.y=o*c*s+a*r*l,this.z=o*r*l-a*c*s,this.w=o*r*s-a*c*l):i==="XZY"&&(this.x=a*r*s-o*c*l,this.y=o*c*s-a*r*l,this.z=o*r*l+a*c*s,this.w=o*r*s+a*c*l),this}clone(){return new it(this.x,this.y,this.z,this.w)}slerp(e,t,n=new it){const i=this.x,o=this.y,r=this.z,s=this.w;let a=e.x,c=e.y,l=e.z,u=e.w,h,p,d,m,y;return p=i*a+o*c+r*l+s*u,p<0&&(p=-p,a=-a,c=-c,l=-l,u=-u),1-p>1e-6?(h=Math.acos(p),d=Math.sin(h),m=Math.sin((1-t)*h)/d,y=Math.sin(t*h)/d):(m=1-t,y=t),n.x=m*i+y*a,n.y=m*o+y*c,n.z=m*r+y*l,n.w=m*s+y*u,n}integrate(e,t,n,i=new it){const o=e.x*n.x,r=e.y*n.y,s=e.z*n.z,a=this.x,c=this.y,l=this.z,u=this.w,h=t*.5;return i.x+=h*(o*u+r*l-s*c),i.y+=h*(r*u+s*a-o*l),i.z+=h*(s*u+o*c-r*a),i.w+=h*(-o*a-r*c-s*l),i}}const cu=new x,lu=new x,hu={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class pe{constructor(e={}){this.id=pe.idCounter++,this.type=e.type||0,this.boundingSphereRadius=0,this.collisionResponse=e.collisionResponse?e.collisionResponse:!0,this.collisionFilterGroup=e.collisionFilterGroup!==void 0?e.collisionFilterGroup:1,this.collisionFilterMask=e.collisionFilterMask!==void 0?e.collisionFilterMask:-1,this.material=e.material?e.material:null,this.body=null}updateBoundingSphereRadius(){throw"computeBoundingSphereRadius() not implemented for shape type "+this.type}volume(){throw"volume() not implemented for shape type "+this.type}calculateLocalInertia(e,t){throw"calculateLocalInertia() not implemented for shape type "+this.type}calculateWorldAABB(e,t,n,i){throw"calculateWorldAABB() not implemented for shape type "+this.type}}pe.idCounter=0;pe.types=hu;class ze{constructor(e={}){this.position=new x,this.quaternion=new it,e.position&&this.position.copy(e.position),e.quaternion&&this.quaternion.copy(e.quaternion)}pointToLocal(e,t){return ze.pointToLocalFrame(this.position,this.quaternion,e,t)}pointToWorld(e,t){return ze.pointToWorldFrame(this.position,this.quaternion,e,t)}vectorToWorldFrame(e,t=new x){return this.quaternion.vmult(e,t),t}static pointToLocalFrame(e,t,n,i=new x){return n.vsub(e,i),t.conjugate(ic),ic.vmult(i,i),i}static pointToWorldFrame(e,t,n,i=new x){return t.vmult(n,i),i.vadd(e,i),i}static vectorToWorldFrame(e,t,n=new x){return e.vmult(t,n),n}static vectorToLocalFrame(e,t,n,i=new x){return t.w*=-1,t.vmult(n,i),t.w*=-1,i}}const ic=new it;class Gn extends pe{constructor(e={}){const{vertices:t=[],faces:n=[],normals:i=[],axes:o,boundingSphereRadius:r}=e;super({type:pe.types.CONVEXPOLYHEDRON});this.vertices=t,this.faces=n,this.faceNormals=i,this.faceNormals.length===0&&this.computeNormals(),r?this.boundingSphereRadius=r:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=o?o.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const e=this.faces,t=this.vertices,n=this.uniqueEdges;n.length=0;const i=new x;for(let o=0;o!==e.length;o++){const r=e[o],s=r.length;for(let a=0;a!==s;a++){const c=(a+1)%s;t[r[a]].vsub(t[r[c]],i),i.normalize();let l=!1;for(let u=0;u!==n.length;u++)if(n[u].almostEquals(i)||n[u].almostEquals(i)){l=!0;break}l||n.push(i.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let e=0;e<this.faces.length;e++){for(let i=0;i<this.faces[e].length;i++)if(!this.vertices[this.faces[e][i]])throw new Error("Vertex "+this.faces[e][i]+" not found!");const t=this.faceNormals[e]||new x;this.getFaceNormal(e,t),t.negate(t),this.faceNormals[e]=t;const n=this.vertices[this.faces[e][0]];if(t.dot(n)<0){console.error(".faceNormals["+e+"] = Vec3("+t.toString()+") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.");for(let i=0;i<this.faces[e].length;i++)console.warn(".vertices["+this.faces[e][i]+"] = Vec3("+this.vertices[this.faces[e][i]].toString()+")")}}}getFaceNormal(e,t){const n=this.faces[e],i=this.vertices[n[0]],o=this.vertices[n[1]],r=this.vertices[n[2]];Gn.computeNormal(i,o,r,t)}clipAgainstHull(e,t,n,i,o,r,s,a,c){const l=new x;let u=-1,h=-Number.MAX_VALUE;for(let d=0;d<n.faces.length;d++){l.copy(n.faceNormals[d]),o.vmult(l,l);const m=l.dot(r);m>h&&(h=m,u=d)}const p=[];for(let d=0;d<n.faces[u].length;d++){const m=n.vertices[n.faces[u][d]],y=new x;y.copy(m),o.vmult(y,y),i.vadd(y,y),p.push(y)}u>=0&&this.clipFaceAgainstHull(r,e,t,p,s,a,c)}findSeparatingAxis(e,t,n,i,o,r,s,a){const c=new x,l=new x,u=new x,h=new x,p=new x,d=new x;let m=Number.MAX_VALUE;const y=this;if(y.uniqueAxes)for(let v=0;v!==y.uniqueAxes.length;v++){n.vmult(y.uniqueAxes[v],c);const g=y.testSepAxis(c,e,t,n,i,o);if(g===!1)return!1;g<m&&(m=g,r.copy(c))}else{const v=s?s.length:y.faces.length;for(let g=0;g<v;g++){const f=s?s[g]:g;c.copy(y.faceNormals[f]),n.vmult(c,c);const w=y.testSepAxis(c,e,t,n,i,o);if(w===!1)return!1;w<m&&(m=w,r.copy(c))}}if(e.uniqueAxes)for(let v=0;v!==e.uniqueAxes.length;v++){o.vmult(e.uniqueAxes[v],l);const g=y.testSepAxis(l,e,t,n,i,o);if(g===!1)return!1;g<m&&(m=g,r.copy(l))}else{const v=a?a.length:e.faces.length;for(let g=0;g<v;g++){const f=a?a[g]:g;l.copy(e.faceNormals[f]),o.vmult(l,l);const w=y.testSepAxis(l,e,t,n,i,o);if(w===!1)return!1;w<m&&(m=w,r.copy(l))}}for(let v=0;v!==y.uniqueEdges.length;v++){n.vmult(y.uniqueEdges[v],h);for(let g=0;g!==e.uniqueEdges.length;g++)if(o.vmult(e.uniqueEdges[g],p),h.cross(p,d),!d.almostZero()){d.normalize();const f=y.testSepAxis(d,e,t,n,i,o);if(f===!1)return!1;f<m&&(m=f,r.copy(d))}}return i.vsub(t,u),u.dot(r)>0&&r.negate(r),!0}testSepAxis(e,t,n,i,o,r){const s=this;Gn.project(s,e,n,i,ss),Gn.project(t,e,o,r,as);const a=ss[0],c=ss[1],l=as[0],u=as[1];if(a<u||l<c)return!1;const h=a-u,p=l-c,d=h<p?h:p;return d}calculateLocalInertia(e,t){const n=new x,i=new x;this.computeLocalAABB(i,n);const o=n.x-i.x,r=n.y-i.y,s=n.z-i.z;t.x=1/12*e*(2*r*2*r+2*s*2*s),t.y=1/12*e*(2*o*2*o+2*s*2*s),t.z=1/12*e*(2*r*2*r+2*o*2*o)}getPlaneConstantOfFace(e){const t=this.faces[e],n=this.faceNormals[e],i=this.vertices[t[0]],o=-n.dot(i);return o}clipFaceAgainstHull(e,t,n,i,o,r,s){const a=new x,c=new x,l=new x,u=new x,h=new x,p=new x,d=new x,m=new x,y=this,v=[],g=i,f=v;let w=-1,_=Number.MAX_VALUE;for(let B=0;B<y.faces.length;B++){a.copy(y.faceNormals[B]),n.vmult(a,a);const V=a.dot(e);V<_&&(_=V,w=B)}if(w<0)return;const M=y.faces[w];M.connectedFaces=[];for(let B=0;B<y.faces.length;B++)for(let V=0;V<y.faces[B].length;V++)M.indexOf(y.faces[B][V])!==-1&&B!==w&&M.connectedFaces.indexOf(B)===-1&&M.connectedFaces.push(B);const b=M.length;for(let B=0;B<b;B++){const V=y.vertices[M[B]],N=y.vertices[M[(B+1)%b]];V.vsub(N,c),l.copy(c),n.vmult(l,l),t.vadd(l,l),u.copy(this.faceNormals[w]),n.vmult(u,u),t.vadd(u,u),l.cross(u,h),h.negate(h),p.copy(V),n.vmult(p,p),t.vadd(p,p);const I=M.connectedFaces[B];d.copy(this.faceNormals[I]);const L=this.getPlaneConstantOfFace(I);m.copy(d),n.vmult(m,m);const C=L-m.dot(t);for(this.clipFaceAgainstPlane(g,f,m,C);g.length;)g.shift();for(;f.length;)g.push(f.shift())}d.copy(this.faceNormals[w]);const P=this.getPlaneConstantOfFace(w);m.copy(d),n.vmult(m,m);const D=P-m.dot(t);for(let B=0;B<g.length;B++){let V=m.dot(g[B])+D;if(V<=o&&(console.log("clamped: depth="+V+" to minDist="+o),V=o),V<=r){const N=g[B];if(V<=1e-6){const I={point:N,normal:m,depth:V};s.push(I)}}}}clipFaceAgainstPlane(e,t,n,i){let o,r;const s=e.length;if(s<2)return t;let a=e[e.length-1],c=e[0];o=n.dot(a)+i;for(let l=0;l<s;l++){if(c=e[l],r=n.dot(c)+i,o<0)if(r<0){const u=new x;u.copy(c),t.push(u)}else{const u=new x;a.lerp(c,o/(o-r),u),t.push(u)}else if(r<0){const u=new x;a.lerp(c,o/(o-r),u),t.push(u),t.push(c)}a=c,o=r}return t}computeWorldVertices(e,t){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new x);const n=this.vertices,i=this.worldVertices;for(let o=0;o!==this.vertices.length;o++)t.vmult(n[o],i[o]),e.vadd(i[o],i[o]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(e,t){const n=this.vertices;e.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),t.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let i=0;i<this.vertices.length;i++){const o=n[i];o.x<e.x?e.x=o.x:o.x>t.x&&(t.x=o.x),o.y<e.y?e.y=o.y:o.y>t.y&&(t.y=o.y),o.z<e.z?e.z=o.z:o.z>t.z&&(t.z=o.z)}}computeWorldFaceNormals(e){const t=this.faceNormals.length;for(;this.worldFaceNormals.length<t;)this.worldFaceNormals.push(new x);const n=this.faceNormals,i=this.worldFaceNormals;for(let o=0;o!==t;o++)e.vmult(n[o],i[o]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let e=0;const t=this.vertices;for(let n=0;n!==t.length;n++){const i=t[n].lengthSquared();i>e&&(e=i)}this.boundingSphereRadius=Math.sqrt(e)}calculateWorldAABB(e,t,n,i){const o=this.vertices;let r,s,a,c,l,u,h=new x;for(let p=0;p<o.length;p++){h.copy(o[p]),t.vmult(h,h),e.vadd(h,h);const d=h;(r===void 0||d.x<r)&&(r=d.x),(c===void 0||d.x>c)&&(c=d.x),(s===void 0||d.y<s)&&(s=d.y),(l===void 0||d.y>l)&&(l=d.y),(a===void 0||d.z<a)&&(a=d.z),(u===void 0||d.z>u)&&(u=d.z)}n.set(r,s,a),i.set(c,l,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(e=new x){const t=this.vertices;for(let n=0;n<t.length;n++)e.vadd(t[n],e);return e.scale(1/t.length,e),e}transformAllPoints(e,t){const n=this.vertices.length,i=this.vertices;if(t){for(let o=0;o<n;o++){const r=i[o];t.vmult(r,r)}for(let o=0;o<this.faceNormals.length;o++){const r=this.faceNormals[o];t.vmult(r,r)}}if(e)for(let o=0;o<n;o++){const r=i[o];r.vadd(e,r)}}pointIsInside(e){const t=this.vertices,n=this.faces,i=this.faceNormals,o=new x;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let s=i[r];const a=t[n[r][0]],c=new x;e.vsub(a,c);const l=s.dot(c),u=new x;o.vsub(a,u);const h=s.dot(u);if(l<0&&h>0||l>0&&h<0)return!1}return-1}}Gn.computeNormal=(e,t,n,i)=>{const o=new x,r=new x;t.vsub(e,r),n.vsub(t,o),o.cross(r,i),i.isZero()||i.normalize()};const ss=[],as=[];Gn.project=(e,t,n,i,o)=>{const r=e.vertices.length,s=new x;let a=0,c=0;const l=new x,u=e.vertices;l.setZero(),ze.vectorToLocalFrame(n,i,t,s),ze.pointToLocalFrame(n,i,l,l);const h=l.dot(s);c=a=u[0].dot(s);for(let p=1;p<r;p++){const d=u[p].dot(s);d>a&&(a=d),d<c&&(c=d)}if(c-=h,a-=h,c>a){const p=c;c=a,a=p}o[0]=a,o[1]=c};class to extends pe{constructor(e){super({type:pe.types.BOX});this.halfExtents=e,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const e=this.halfExtents.x,t=this.halfExtents.y,n=this.halfExtents.z,i=x,o=[new i(-e,-t,-n),new i(e,-t,-n),new i(e,t,-n),new i(-e,t,-n),new i(-e,-t,n),new i(e,-t,n),new i(e,t,n),new i(-e,t,n)],r=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],s=[new i(0,0,1),new i(0,1,0),new i(1,0,0)],a=new Gn({vertices:o,faces:r,axes:s});this.convexPolyhedronRepresentation=a,a.material=this.material}calculateLocalInertia(e,t=new x){return to.calculateInertia(this.halfExtents,e,t),t}getSideNormals(e,t){const n=e,i=this.halfExtents;if(n[0].set(i.x,0,0),n[1].set(0,i.y,0),n[2].set(0,0,i.z),n[3].set(-i.x,0,0),n[4].set(0,-i.y,0),n[5].set(0,0,-i.z),t!==void 0)for(let o=0;o!==n.length;o++)t.vmult(n[o],n[o]);return n}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(e,t,n){const i=this.halfExtents,o=[[i.x,i.y,i.z],[-i.x,i.y,i.z],[-i.x,-i.y,i.z],[-i.x,-i.y,-i.z],[i.x,-i.y,-i.z],[i.x,i.y,-i.z],[-i.x,i.y,-i.z],[i.x,-i.y,i.z]];for(let r=0;r<o.length;r++)bn.set(o[r][0],o[r][1],o[r][2]),t.vmult(bn,bn),e.vadd(bn,bn),n(bn.x,bn.y,bn.z)}calculateWorldAABB(e,t,n,i){const o=this.halfExtents;Ut[0].set(o.x,o.y,o.z),Ut[1].set(-o.x,o.y,o.z),Ut[2].set(-o.x,-o.y,o.z),Ut[3].set(-o.x,-o.y,-o.z),Ut[4].set(o.x,-o.y,-o.z),Ut[5].set(o.x,o.y,-o.z),Ut[6].set(-o.x,o.y,-o.z),Ut[7].set(o.x,-o.y,o.z);const r=Ut[0];t.vmult(r,r),e.vadd(r,r),i.copy(r),n.copy(r);for(let s=1;s<8;s++){const a=Ut[s];t.vmult(a,a),e.vadd(a,a);const c=a.x,l=a.y,u=a.z;c>i.x&&(i.x=c),l>i.y&&(i.y=l),u>i.z&&(i.z=u),c<n.x&&(n.x=c),l<n.y&&(n.y=l),u<n.z&&(n.z=u)}}}to.calculateInertia=(e,t,n)=>{const i=e;n.x=1/12*t*(2*i.y*2*i.y+2*i.z*2*i.z),n.y=1/12*t*(2*i.x*2*i.x+2*i.z*2*i.z),n.z=1/12*t*(2*i.y*2*i.y+2*i.x*2*i.x)};const bn=new x,Ut=[new x,new x,new x,new x,new x,new x,new x,new x],oc={DYNAMIC:1,STATIC:2,KINEMATIC:4},cs={AWAKE:0,SLEEPY:1,SLEEPING:2};class ce extends nc{constructor(e={}){super();this.id=ce.idCounter++,this.index=-1,this.world=null,this.preStep=null,this.postStep=null,this.vlambda=new x,this.collisionFilterGroup=typeof e.collisionFilterGroup=="number"?e.collisionFilterGroup:1,this.collisionFilterMask=typeof e.collisionFilterMask=="number"?e.collisionFilterMask:-1,this.collisionResponse=typeof e.collisionResponse=="boolean"?e.collisionResponse:!0,this.position=new x,this.previousPosition=new x,this.interpolatedPosition=new x,this.initPosition=new x,e.position&&(this.position.copy(e.position),this.previousPosition.copy(e.position),this.interpolatedPosition.copy(e.position),this.initPosition.copy(e.position)),this.velocity=new x,e.velocity&&this.velocity.copy(e.velocity),this.initVelocity=new x,this.force=new x;const t=typeof e.mass=="number"?e.mass:0;this.mass=t,this.invMass=t>0?1/t:0,this.material=e.material||null,this.linearDamping=typeof e.linearDamping=="number"?e.linearDamping:.01,this.type=t<=0?ce.STATIC:ce.DYNAMIC,typeof e.type===typeof ce.STATIC&&(this.type=e.type),this.allowSleep=typeof e.allowSleep!="undefined"?e.allowSleep:!0,this.sleepState=0,this.sleepSpeedLimit=typeof e.sleepSpeedLimit!="undefined"?e.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof e.sleepTimeLimit!="undefined"?e.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new x,this.quaternion=new it,this.initQuaternion=new it,this.previousQuaternion=new it,this.interpolatedQuaternion=new it,e.quaternion&&(this.quaternion.copy(e.quaternion),this.initQuaternion.copy(e.quaternion),this.previousQuaternion.copy(e.quaternion),this.interpolatedQuaternion.copy(e.quaternion)),this.angularVelocity=new x,e.angularVelocity&&this.angularVelocity.copy(e.angularVelocity),this.initAngularVelocity=new x,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new x,this.invInertia=new x,this.invInertiaWorld=new on,this.invMassSolve=0,this.invInertiaSolve=new x,this.invInertiaWorldSolve=new on,this.fixedRotation=typeof e.fixedRotation!="undefined"?e.fixedRotation:!1,this.angularDamping=typeof e.angularDamping!="undefined"?e.angularDamping:.01,this.linearFactor=new x(1,1,1),e.linearFactor&&this.linearFactor.copy(e.linearFactor),this.angularFactor=new x(1,1,1),e.angularFactor&&this.angularFactor.copy(e.angularFactor),this.aabb=new Je,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new x,e.shape&&this.addShape(e.shape),this.updateMassProperties()}wakeUp(){const e=this.sleepState;this.sleepState=0,this.wakeUpAfterNarrowphase=!1,e===ce.SLEEPING&&this.dispatchEvent(ce.wakeupEvent)}sleep(){this.sleepState=ce.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(e){if(this.allowSleep){const t=this.sleepState,n=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),i=this.sleepSpeedLimit**2;t===ce.AWAKE&&n<i?(this.sleepState=ce.SLEEPY,this.timeLastSleepy=e,this.dispatchEvent(ce.sleepyEvent)):t===ce.SLEEPY&&n>i?this.wakeUp():t===ce.SLEEPY&&e-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(ce.sleepEvent))}}updateSolveMassProperties(){this.sleepState===ce.SLEEPING||this.type===ce.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(e,t=new x){return e.vsub(this.position,t),this.quaternion.conjugate().vmult(t,t),t}vectorToLocalFrame(e,t=new x){return this.quaternion.conjugate().vmult(e,t),t}pointToWorldFrame(e,t=new x){return this.quaternion.vmult(e,t),t.vadd(this.position,t),t}vectorToWorldFrame(e,t=new x){return this.quaternion.vmult(e,t),t}addShape(e,t,n){const i=new x,o=new it;return t&&i.copy(t),n&&o.copy(n),this.shapes.push(e),this.shapeOffsets.push(i),this.shapeOrientations.push(o),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,e.body=this,this}updateBoundingRadius(){const e=this.shapes,t=this.shapeOffsets,n=e.length;let i=0;for(let o=0;o!==n;o++){const r=e[o];r.updateBoundingSphereRadius();const s=t[o].length(),a=r.boundingSphereRadius;s+a>i&&(i=s+a)}this.boundingRadius=i}computeAABB(){const e=this.shapes,t=this.shapeOffsets,n=this.shapeOrientations,i=e.length,o=uu,r=du,s=this.quaternion,a=this.aabb,c=pu;for(let l=0;l!==i;l++){const u=e[l];s.vmult(t[l],o),o.vadd(this.position,o),s.mult(n[l],r),u.calculateWorldAABB(o,r,c.lowerBound,c.upperBound),l===0?a.copy(c):a.extend(c)}this.aabbNeedsUpdate=!1}updateInertiaWorld(e){const t=this.invInertia;if(!(t.x===t.y&&t.y===t.z&&!e)){const n=fu,i=mu;n.setRotationFromQuaternion(this.quaternion),n.transpose(i),n.scale(t,n),n.mmult(i,this.invInertiaWorld)}}applyForce(e,t){if(this.type!==ce.DYNAMIC)return;const n=gu;t.cross(e,n),this.force.vadd(e,this.force),this.torque.vadd(n,this.torque)}applyLocalForce(e,t){if(this.type!==ce.DYNAMIC)return;const n=yu,i=vu;this.vectorToWorldFrame(e,n),this.vectorToWorldFrame(t,i),this.applyForce(n,i)}applyImpulse(e,t){if(this.type!==ce.DYNAMIC)return;const n=t,i=xu;i.copy(e),i.scale(this.invMass,i),this.velocity.vadd(i,this.velocity);const o=bu;n.cross(e,o),this.invInertiaWorld.vmult(o,o),this.angularVelocity.vadd(o,this.angularVelocity)}applyLocalImpulse(e,t){if(this.type!==ce.DYNAMIC)return;const n=wu,i=_u;this.vectorToWorldFrame(e,n),this.vectorToWorldFrame(t,i),this.applyImpulse(n,i)}updateMassProperties(){const e=Mu;this.invMass=this.mass>0?1/this.mass:0;const t=this.inertia,n=this.fixedRotation;this.computeAABB(),e.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),to.calculateInertia(e,this.mass,t),this.invInertia.set(t.x>0&&!n?1/t.x:0,t.y>0&&!n?1/t.y:0,t.z>0&&!n?1/t.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(e,t){const n=new x;return e.vsub(this.position,n),this.angularVelocity.cross(n,t),this.velocity.vadd(t,t),t}integrate(e,t,n){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===ce.DYNAMIC||this.type===ce.KINEMATIC)||this.sleepState===ce.SLEEPING)return;const i=this.velocity,o=this.angularVelocity,r=this.position,s=this.force,a=this.torque,c=this.quaternion,l=this.invMass,u=this.invInertiaWorld,h=this.linearFactor,p=l*e;i.x+=s.x*p*h.x,i.y+=s.y*p*h.y,i.z+=s.z*p*h.z;const d=u.elements,m=this.angularFactor,y=a.x*m.x,v=a.y*m.y,g=a.z*m.z;o.x+=e*(d[0]*y+d[1]*v+d[2]*g),o.y+=e*(d[3]*y+d[4]*v+d[5]*g),o.z+=e*(d[6]*y+d[7]*v+d[8]*g),r.x+=i.x*e,r.y+=i.y*e,r.z+=i.z*e,c.integrate(this.angularVelocity,e,this.angularFactor,c),t&&(n?c.normalizeFast():c.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}ce.COLLIDE_EVENT_NAME="collide";ce.DYNAMIC=1;ce.STATIC=2;ce.KINEMATIC=4;ce.AWAKE=cs.AWAKE;ce.SLEEPY=cs.SLEEPY;ce.SLEEPING=cs.SLEEPING;ce.idCounter=0;ce.wakeupEvent={type:"wakeup"};ce.sleepyEvent={type:"sleepy"};ce.sleepEvent={type:"sleep"};const uu=new x,du=new it,pu=new Je,fu=new on,mu=new on,gu=new x,yu=new x,vu=new x,xu=new x,bu=new x,wu=new x,_u=new x,Mu=new x;class ls{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(e,t,n){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(e,t){return(e.collisionFilterGroup&t.collisionFilterMask)===0||(t.collisionFilterGroup&e.collisionFilterMask)===0?!1:!(((e.type&ce.STATIC)!==0||e.sleepState===ce.SLEEPING)&&((t.type&ce.STATIC)!==0||t.sleepState===ce.SLEEPING))}intersectionTest(e,t,n,i){this.useBoundingBoxes?this.doBoundingBoxBroadphase(e,t,n,i):this.doBoundingSphereBroadphase(e,t,n,i)}doBoundingSphereBroadphase(e,t,n,i){const o=Su;t.position.vsub(e.position,o);const r=(e.boundingRadius+t.boundingRadius)**2,s=o.lengthSquared();s<r&&(n.push(e),i.push(t))}doBoundingBoxBroadphase(e,t,n,i){e.aabbNeedsUpdate&&e.computeAABB(),t.aabbNeedsUpdate&&t.computeAABB(),e.aabb.overlaps(t.aabb)&&(n.push(e),i.push(t))}makePairsUnique(e,t){const n=Eu,i=Tu,o=Au,r=e.length;for(let s=0;s!==r;s++)i[s]=e[s],o[s]=t[s];e.length=0,t.length=0;for(let s=0;s!==r;s++){const a=i[s].id,c=o[s].id,l=a<c?a+","+c:c+","+a;n[l]=s,n.keys.push(l)}for(let s=0;s!==n.keys.length;s++){const a=n.keys.pop(),c=n[a];e.push(i[c]),t.push(o[c]),delete n[a]}}setWorld(e){}aabbQuery(e,t,n){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const Su=new x,Eu={keys:[]},Tu=[],Au=[];ls.boundingSphereCheck=(e,t)=>{const n=new x;e.position.vsub(t.position,n);const i=e.shapes[0],o=t.shapes[0];return Math.pow(i.boundingSphereRadius+o.boundingSphereRadius,2)>n.lengthSquared()};const Hb=new x;class hs extends ls{constructor(){super()}collisionPairs(e,t,n){const i=e.bodies,o=i.length;let r,s;for(let a=0;a!==o;a++)for(let c=0;c!==a;c++){if(r=i[a],s=i[c],!this.needBroadphaseCollision(r,s))continue;this.intersectionTest(r,s,t,n)}}aabbQuery(e,t,n=[]){for(let i=0;i<e.bodies.length;i++){const o=e.bodies[i];o.aabbNeedsUpdate&&o.computeAABB(),o.aabb.overlaps(t)&&n.push(o)}return n}}class us{constructor(){this.rayFromWorld=new x,this.rayToWorld=new x,this.hitNormalWorld=new x,this.hitPointWorld=new x,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(e,t,n,i,o,r,s){this.rayFromWorld.copy(e),this.rayToWorld.copy(t),this.hitNormalWorld.copy(n),this.hitPointWorld.copy(i),this.shape=o,this.body=r,this.distance=s}}class Ge{constructor(e=new x,t=new x){this.from=e.clone(),this.to=t.clone(),this.direction=new x,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=Ge.ANY,this.result=new us,this.hasHit=!1,this.callback=n=>{}}intersectWorld(e,t){return this.mode=t.mode||Ge.ANY,this.result=t.result||new us,this.skipBackfaces=!!t.skipBackfaces,this.collisionFilterMask=typeof t.collisionFilterMask!="undefined"?t.collisionFilterMask:-1,this.collisionFilterGroup=typeof t.collisionFilterGroup!="undefined"?t.collisionFilterGroup:-1,this.checkCollisionResponse=typeof t.checkCollisionResponse!="undefined"?t.checkCollisionResponse:!0,t.from&&this.from.copy(t.from),t.to&&this.to.copy(t.to),this.callback=t.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(rc),ds.length=0,e.broadphase.aabbQuery(e,rc,ds),this.intersectBodies(ds),this.hasHit}intersectBody(e,t){t&&(this.result=t,this.updateDirection());const n=this.checkCollisionResponse;if(n&&!e.collisionResponse)return;if((this.collisionFilterGroup&e.collisionFilterMask)===0||(e.collisionFilterGroup&this.collisionFilterMask)===0)return;const i=Cu,o=Ru;for(let r=0,s=e.shapes.length;r<s;r++){const a=e.shapes[r];if(n&&!a.collisionResponse)continue;if(e.quaternion.mult(e.shapeOrientations[r],o),e.quaternion.vmult(e.shapeOffsets[r],i),i.vadd(e.position,i),this.intersectShape(a,o,i,e),this.result.shouldStop)break}}intersectBodies(e,t){t&&(this.result=t,this.updateDirection());for(let n=0,i=e.length;!this.result.shouldStop&&n<i;n++)this.intersectBody(e[n])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(e,t,n,i){const o=this.from,r=Hu(o,this.direction,n);if(r>e.boundingSphereRadius)return;const s=this[e.type];s&&s.call(this,e,t,n,i,e)}_intersectBox(e,t,n,i,o){return this._intersectConvex(e.convexPolyhedronRepresentation,t,n,i,o)}_intersectPlane(e,t,n,i,o){const r=this.from,s=this.to,a=this.direction,c=new x(0,0,1);t.vmult(c,c);const l=new x;r.vsub(n,l);const u=l.dot(c);s.vsub(n,l);const h=l.dot(c);if(u*h>0)return;if(r.distanceTo(s)<u)return;const p=c.dot(a);if(Math.abs(p)<this.precision)return;const d=new x,m=new x,y=new x;r.vsub(n,d);const v=-c.dot(d)/p;a.scale(v,m),r.vadd(m,y),this.reportIntersection(c,y,o,i,-1)}getAABB(e){const{lowerBound:t,upperBound:n}=e,i=this.to,o=this.from;t.x=Math.min(i.x,o.x),t.y=Math.min(i.y,o.y),t.z=Math.min(i.z,o.z),n.x=Math.max(i.x,o.x),n.y=Math.max(i.y,o.y),n.z=Math.max(i.z,o.z)}_intersectHeightfield(e,t,n,i,o){const r=e.data,s=e.elementSize,a=Pu;a.from.copy(this.from),a.to.copy(this.to),ze.pointToLocalFrame(n,t,a.from,a.from),ze.pointToLocalFrame(n,t,a.to,a.to),a.updateDirection();const c=Lu;let l,u,h,p;l=u=0,h=p=e.data.length-1;const d=new Je;a.getAABB(d),e.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,c,!0),l=Math.max(l,c[0]),u=Math.max(u,c[1]),e.getIndexOfPosition(d.upperBound.x,d.upperBound.y,c,!0),h=Math.min(h,c[0]+1),p=Math.min(p,c[1]+1);for(let m=l;m<h;m++)for(let y=u;y<p;y++){if(this.result.shouldStop)return;if(e.getAabbAtIndex(m,y,d),!d.overlapsRay(a))continue;if(e.getConvexTrianglePillar(m,y,!1),ze.pointToWorldFrame(n,t,e.pillarOffset,Ho),this._intersectConvex(e.pillarConvex,t,Ho,i,o,sc),this.result.shouldStop)return;e.getConvexTrianglePillar(m,y,!0),ze.pointToWorldFrame(n,t,e.pillarOffset,Ho),this._intersectConvex(e.pillarConvex,t,Ho,i,o,sc)}}_intersectSphere(e,t,n,i,o){const r=this.from,s=this.to,a=e.radius,c=(s.x-r.x)**2+(s.y-r.y)**2+(s.z-r.z)**2,l=2*((s.x-r.x)*(r.x-n.x)+(s.y-r.y)*(r.y-n.y)+(s.z-r.z)*(r.z-n.z)),u=(r.x-n.x)**2+(r.y-n.y)**2+(r.z-n.z)**2-a**2,h=l**2-4*c*u,p=Bu,d=Iu;if(h<0)return;if(h===0)r.lerp(s,h,p),p.vsub(n,d),d.normalize(),this.reportIntersection(d,p,o,i,-1);else{const m=(-l-Math.sqrt(h))/(2*c),y=(-l+Math.sqrt(h))/(2*c);if(m>=0&&m<=1&&(r.lerp(s,m,p),p.vsub(n,d),d.normalize(),this.reportIntersection(d,p,o,i,-1)),this.result.shouldStop)return;y>=0&&y<=1&&(r.lerp(s,y,p),p.vsub(n,d),d.normalize(),this.reportIntersection(d,p,o,i,-1))}}_intersectConvex(e,t,n,i,o,r){const s=Nu,a=ac,c=r&&r.faceList||null,l=e.faces,u=e.vertices,h=e.faceNormals,p=this.direction,d=this.from,m=this.to,y=d.distanceTo(m),v=c?c.length:l.length,g=this.result;for(let f=0;!g.shouldStop&&f<v;f++){const w=c?c[f]:f,_=l[w],M=h[w],b=t,P=n;a.copy(u[_[0]]),b.vmult(a,a),a.vadd(P,a),a.vsub(d,a),b.vmult(M,s);const D=p.dot(s);if(Math.abs(D)<this.precision)continue;const B=s.dot(a)/D;if(B<0)continue;p.scale(B,_t),_t.vadd(d,_t),zt.copy(u[_[0]]),b.vmult(zt,zt),P.vadd(zt,zt);for(let V=1;!g.shouldStop&&V<_.length-1;V++){Ht.copy(u[_[V]]),Wt.copy(u[_[V+1]]),b.vmult(Ht,Ht),b.vmult(Wt,Wt),P.vadd(Ht,Ht),P.vadd(Wt,Wt);const N=_t.distanceTo(d);if(!(no(_t,zt,Ht,Wt)||no(_t,Ht,zt,Wt))||N>y)continue;this.reportIntersection(s,_t,o,i,w)}}}_intersectTrimesh(e,t,n,i,o,r){const s=zu,a=Vu,c=Uu,l=ac,u=Fu,h=Du,p=Ou,d=Gu,m=ku,y=r&&r.faceList||null,v=e.indices,g=e.vertices,f=this.from,w=this.to,_=this.direction;c.position.copy(n),c.quaternion.copy(t),ze.vectorToLocalFrame(n,t,_,u),ze.pointToLocalFrame(n,t,f,h),ze.pointToLocalFrame(n,t,w,p),p.x*=e.scale.x,p.y*=e.scale.y,p.z*=e.scale.z,h.x*=e.scale.x,h.y*=e.scale.y,h.z*=e.scale.z,p.vsub(h,u),u.normalize();const M=h.distanceSquared(p);e.tree.rayQuery(this,c,a);for(let b=0,P=a.length;!this.result.shouldStop&&b!==P;b++){const D=a[b];e.getNormal(D,s),e.getVertex(v[D*3],zt),zt.vsub(h,l);const B=u.dot(s),V=s.dot(l)/B;if(V<0)continue;u.scale(V,_t),_t.vadd(h,_t),e.getVertex(v[D*3+1],Ht),e.getVertex(v[D*3+2],Wt);const N=_t.distanceSquared(h);if(!(no(_t,Ht,zt,Wt)||no(_t,zt,Ht,Wt))||N>M)continue;ze.vectorToWorldFrame(t,s,m),ze.pointToWorldFrame(n,t,_t,d),this.reportIntersection(m,d,o,i,D)}a.length=0}reportIntersection(e,t,n,i,o){const r=this.from,s=this.to,a=r.distanceTo(t),c=this.result;if(this.skipBackfaces&&e.dot(this.direction)>0)return;c.hitFaceIndex=typeof o!="undefined"?o:-1;switch(this.mode){case Ge.ALL:this.hasHit=!0,c.set(r,s,e,t,n,i,a),c.hasHit=!0,this.callback(c);break;case Ge.CLOSEST:(a<c.distance||!c.hasHit)&&(this.hasHit=!0,c.hasHit=!0,c.set(r,s,e,t,n,i,a));break;case Ge.ANY:this.hasHit=!0,c.hasHit=!0,c.set(r,s,e,t,n,i,a),c.shouldStop=!0;break}}}Ge.CLOSEST=1;Ge.ANY=2;Ge.ALL=4;const rc=new Je,ds=[],io=new x,ps=new x;Ge.pointInTriangle=no;function no(e,t,n,i){i.vsub(t,Vn),n.vsub(t,io),e.vsub(t,ps);const o=Vn.dot(Vn),r=Vn.dot(io),s=Vn.dot(ps),a=io.dot(io),c=io.dot(ps);let l,u;return(l=a*s-r*c)>=0&&(u=o*c-r*s)>=0&&l+u<o*a-r*r}const Cu=new x,Ru=new it,_t=new x,zt=new x,Ht=new x,Wt=new x;Ge.prototype[pe.types.BOX]=Ge.prototype._intersectBox;Ge.prototype[pe.types.PLANE]=Ge.prototype._intersectPlane;const sc={faceList:[0]},Ho=new x,Pu=new Ge,Lu=[];Ge.prototype[pe.types.HEIGHTFIELD]=Ge.prototype._intersectHeightfield;const Bu=new x,Iu=new x;Ge.prototype[pe.types.SPHERE]=Ge.prototype._intersectSphere;const Nu=new x,ac=new x;Ge.prototype[pe.types.CONVEXPOLYHEDRON]=Ge.prototype._intersectConvex;const zu=new x,Fu=new x,Du=new x,Ou=new x,ku=new x,Gu=new x,Wb=new Je,Vu=[],Uu=new ze;Ge.prototype[pe.types.TRIMESH]=Ge.prototype._intersectTrimesh;const Vn=new x,Wo=new x;function Hu(e,t,n){n.vsub(e,Vn);const i=Vn.dot(t);t.scale(i,Wo),Wo.vadd(e,Wo);const o=n.distanceTo(Wo);return o}class wn extends ls{constructor(e){super();this.axisList=[],this.world=null,this.axisIndex=0;const t=this.axisList;this._addBodyHandler=n=>{t.push(n.body)},this._removeBodyHandler=n=>{const i=t.indexOf(n.body);i!==-1&&t.splice(i,1)},e&&this.setWorld(e)}setWorld(e){this.axisList.length=0;for(let t=0;t<e.bodies.length;t++)this.axisList.push(e.bodies[t]);e.removeEventListener("addBody",this._addBodyHandler),e.removeEventListener("removeBody",this._removeBodyHandler),e.addEventListener("addBody",this._addBodyHandler),e.addEventListener("removeBody",this._removeBodyHandler),this.world=e,this.dirty=!0}collisionPairs(e,t,n){const i=this.axisList,o=i.length,r=this.axisIndex;let s,a;for(this.dirty&&(this.sortList(),this.dirty=!1),s=0;s!==o;s++){const c=i[s];for(a=s+1;a<o;a++){const l=i[a];if(!this.needBroadphaseCollision(c,l))continue;if(!wn.checkBounds(c,l,r))break;this.intersectionTest(c,l,t,n)}}}sortList(){const e=this.axisList,t=this.axisIndex,n=e.length;for(let i=0;i!==n;i++){const o=e[i];o.aabbNeedsUpdate&&o.computeAABB()}t===0?wn.insertionSortX(e):t===1?wn.insertionSortY(e):t===2&&wn.insertionSortZ(e)}autoDetectAxis(){let e=0,t=0,n=0,i=0,o=0,r=0;const s=this.axisList,a=s.length,c=1/a;for(let p=0;p!==a;p++){const d=s[p],m=d.position.x;e+=m,t+=m*m;const y=d.position.y;n+=y,i+=y*y;const v=d.position.z;o+=v,r+=v*v}const l=t-e*e*c,u=i-n*n*c,h=r-o*o*c;l>u?l>h?this.axisIndex=0:this.axisIndex=2:u>h?this.axisIndex=1:this.axisIndex=2}aabbQuery(e,t,n=[]){this.dirty&&(this.sortList(),this.dirty=!1);const i=this.axisIndex;let o="x";i===1&&(o="y"),i===2&&(o="z");const r=this.axisList,s=t.lowerBound[o],a=t.upperBound[o];for(let c=0;c<r.length;c++){const l=r[c];l.aabbNeedsUpdate&&l.computeAABB(),l.aabb.overlaps(t)&&n.push(l)}return n}}wn.insertionSortX=e=>{for(let t=1,n=e.length;t<n;t++){const i=e[t];let o;for(o=t-1;o>=0&&!(e[o].aabb.lowerBound.x<=i.aabb.lowerBound.x);o--)e[o+1]=e[o];e[o+1]=i}return e};wn.insertionSortY=e=>{for(let t=1,n=e.length;t<n;t++){const i=e[t];let o;for(o=t-1;o>=0&&!(e[o].aabb.lowerBound.y<=i.aabb.lowerBound.y);o--)e[o+1]=e[o];e[o+1]=i}return e};wn.insertionSortZ=e=>{for(let t=1,n=e.length;t<n;t++){const i=e[t];let o;for(o=t-1;o>=0&&!(e[o].aabb.lowerBound.z<=i.aabb.lowerBound.z);o--)e[o+1]=e[o];e[o+1]=i}return e};wn.checkBounds=(e,t,n)=>{let i,o;n===0?(i=e.position.x,o=t.position.x):n===1?(i=e.position.y,o=t.position.y):n===2&&(i=e.position.z,o=t.position.z);const r=e.boundingRadius,s=t.boundingRadius,a=i+r,c=o-s;return c<a};function fs(){}fs.defaults=(e={},t)=>{for(let n in t)n in e||(e[n]=t[n]);return e};class cc{constructor(e,t,n={}){n=fs.defaults(n,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=e,this.bodyB=t,this.id=cc.idCounter++,this.collideConnected=n.collideConnected,n.wakeUpBodies&&(e&&e.wakeUp(),t&&t.wakeUp())}update(){throw new Error("method update() not implmemented in this Constraint subclass!")}enable(){const e=this.equations;for(let t=0;t<e.length;t++)e[t].enabled=!0}disable(){const e=this.equations;for(let t=0;t<e.length;t++)e[t].enabled=!1}}cc.idCounter=0;class lc{constructor(){this.spatial=new x,this.rotational=new x}multiplyElement(e){return e.spatial.dot(this.spatial)+e.rotational.dot(this.rotational)}multiplyVectors(e,t){return e.dot(this.spatial)+t.dot(this.rotational)}}class jo{constructor(e,t,n=-1e6,i=1e6){this.id=jo.id++,this.minForce=n,this.maxForce=i,this.bi=e,this.bj=t,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new lc,this.jacobianElementB=new lc,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(e,t,n){const i=t,o=e,r=n;this.a=4/(r*(1+4*i)),this.b=4*i/(1+4*i),this.eps=4/(r*r*o*(1+4*i))}computeB(e,t,n){const i=this.computeGW(),o=this.computeGq(),r=this.computeGiMf();return-o*e-i*t-r*n}computeGq(){const e=this.jacobianElementA,t=this.jacobianElementB,n=this.bi,i=this.bj,o=n.position,r=i.position;return e.spatial.dot(o)+t.spatial.dot(r)}computeGW(){const e=this.jacobianElementA,t=this.jacobianElementB,n=this.bi,i=this.bj,o=n.velocity,r=i.velocity,s=n.angularVelocity,a=i.angularVelocity;return e.multiplyVectors(o,s)+t.multiplyVectors(r,a)}computeGWlambda(){const e=this.jacobianElementA,t=this.jacobianElementB,n=this.bi,i=this.bj,o=n.vlambda,r=i.vlambda,s=n.wlambda,a=i.wlambda;return e.multiplyVectors(o,s)+t.multiplyVectors(r,a)}computeGiMf(){const e=this.jacobianElementA,t=this.jacobianElementB,n=this.bi,i=this.bj,o=n.force,r=n.torque,s=i.force,a=i.torque,c=n.invMassSolve,l=i.invMassSolve;return o.scale(c,hc),s.scale(l,uc),n.invInertiaWorldSolve.vmult(r,dc),i.invInertiaWorldSolve.vmult(a,pc),e.multiplyVectors(hc,dc)+t.multiplyVectors(uc,pc)}computeGiMGt(){const e=this.jacobianElementA,t=this.jacobianElementB,n=this.bi,i=this.bj,o=n.invMassSolve,r=i.invMassSolve,s=n.invInertiaWorldSolve,a=i.invInertiaWorldSolve;let c=o+r;return s.vmult(e.rotational,qo),c+=qo.dot(e.rotational),a.vmult(t.rotational,qo),c+=qo.dot(t.rotational),c}addToWlambda(e){const t=this.jacobianElementA,n=this.jacobianElementB,i=this.bi,o=this.bj,r=Wu;i.vlambda.addScaledVector(i.invMassSolve*e,t.spatial,i.vlambda),o.vlambda.addScaledVector(o.invMassSolve*e,n.spatial,o.vlambda),i.invInertiaWorldSolve.vmult(t.rotational,r),i.wlambda.addScaledVector(e,r,i.wlambda),o.invInertiaWorldSolve.vmult(n.rotational,r),o.wlambda.addScaledVector(e,r,o.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}jo.id=0;const hc=new x,uc=new x,dc=new x,pc=new x,qo=new x,Wu=new x;class $u extends jo{constructor(e,t,n=1e6){super(e,t,0,n);this.restitution=0,this.ri=new x,this.rj=new x,this.ni=new x}computeB(e){const t=this.a,n=this.b,i=this.bi,o=this.bj,r=this.ri,s=this.rj,a=ju,c=qu,l=i.velocity,u=i.angularVelocity,h=i.force,p=i.torque,d=o.velocity,m=o.angularVelocity,y=o.force,v=o.torque,g=Xu,f=this.jacobianElementA,w=this.jacobianElementB,_=this.ni;r.cross(_,a),s.cross(_,c),_.negate(f.spatial),a.negate(f.rotational),w.spatial.copy(_),w.rotational.copy(c),g.copy(o.position),g.vadd(s,g),g.vsub(i.position,g),g.vsub(r,g);const M=_.dot(g),b=this.restitution+1,P=b*d.dot(_)-b*l.dot(_)+m.dot(c)-u.dot(a),D=this.computeGiMf(),B=-M*t-P*n-e*D;return B}getImpactVelocityAlongNormal(){const e=Yu,t=Zu,n=Ju,i=Qu,o=Ku;return this.bi.position.vadd(this.ri,n),this.bj.position.vadd(this.rj,i),this.bi.getVelocityAtWorldPoint(n,e),this.bj.getVelocityAtWorldPoint(i,t),e.vsub(t,o),this.ni.dot(o)}}const ju=new x,qu=new x,Xu=new x,Yu=new x,Zu=new x,Ju=new x,Qu=new x,Ku=new x;const jb=new x,qb=new x;const Xb=new x,Yb=new x;const Zb=new x,Jb=new x;class fc extends jo{constructor(e,t,n){super(e,t,-n,n);this.ri=new x,this.rj=new x,this.t=new x}computeB(e){const t=this.a,n=this.b,i=this.bi,o=this.bj,r=this.ri,s=this.rj,a=ed,c=td,l=this.t;r.cross(l,a),s.cross(l,c);const u=this.jacobianElementA,h=this.jacobianElementB;l.negate(u.spatial),a.negate(u.rotational),h.spatial.copy(l),h.rotational.copy(c);const p=this.computeGW(),d=this.computeGiMf(),m=-p*n-e*d;return m}}const ed=new x,td=new x;class ms{constructor(e,t,n){n=fs.defaults(n,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=ms.idCounter++,this.materials=[e,t],this.friction=n.friction,this.restitution=n.restitution,this.contactEquationStiffness=n.contactEquationStiffness,this.contactEquationRelaxation=n.contactEquationRelaxation,this.frictionEquationStiffness=n.frictionEquationStiffness,this.frictionEquationRelaxation=n.frictionEquationRelaxation}}ms.idCounter=0;class Un{constructor(e={}){let t="";typeof e=="string"&&(t=e,e={}),this.name=t,this.id=Un.idCounter++,this.friction=typeof e.friction!="undefined"?e.friction:-1,this.restitution=typeof e.restitution!="undefined"?e.restitution:-1}}Un.idCounter=0;const Qb=new x,Kb=new x,$b=new x,e0=new x,t0=new x,n0=new x,i0=new x,o0=new x,r0=new x,s0=new x,a0=new x;const c0=new x,l0=new x;const h0=new x,u0=new x,d0=new x,p0=new Ge,f0=new x,m0=new x,g0=[new x(1,0,0),new x(0,1,0),new x(0,0,1)],y0=new x;const v0=new x,x0=new x,b0=new x;const w0=new x,_0=new x,M0=new x,S0=new x;const E0=new x,T0=new x,A0=new x;class mc extends pe{constructor(e){super({type:pe.types.SPHERE});if(this.radius=e!==void 0?e:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(e,t=new x){const n=2*e*this.radius*this.radius/5;return t.x=n,t.y=n,t.z=n,t}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(e,t,n,i){const o=this.radius,r=["x","y","z"];for(let s=0;s<r.length;s++){const a=r[s];n[a]=e[a]-o,i[a]=e[a]+o}}}const C0=new x,R0=new x;const P0=new x,L0=new x,B0=new x,I0=new x,N0=new x,z0=new x,F0=new x;class gc extends Gn{constructor(e,t,n,i){const o=i,r=[],s=[],a=[],c=[],l=[],u=Math.cos,h=Math.sin;r.push(new x(-t*h(0),-n*.5,t*u(0))),c.push(0),r.push(new x(-e*h(0),n*.5,e*u(0))),l.push(1);for(let d=0;d<o;d++){const m=2*Math.PI/o*(d+1),y=2*Math.PI/o*(d+.5);d<o-1?(r.push(new x(-t*h(m),-n*.5,t*u(m))),c.push(2*d+2),r.push(new x(-e*h(m),n*.5,e*u(m))),l.push(2*d+3),a.push([2*d,2*d+1,2*d+3,2*d+2])):a.push([2*d,2*d+1,1,0]),(o%2===1||d<o/2)&&s.push(new x(-h(y),0,u(y)))}a.push(c),s.push(new x(0,1,0));const p=[];for(let d=0;d<l.length;d++)p.push(l[l.length-d-1]);a.push(p),super({vertices:r,faces:a,axes:s})}}class yc extends pe{constructor(){super({type:pe.types.PLANE});this.worldNormal=new x,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(e){const t=this.worldNormal;t.set(0,0,1),e.vmult(t,t),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(e,t=new x){return t}volume(){return Number.MAX_VALUE}calculateWorldAABB(e,t,n,i){rn.set(0,0,1),t.vmult(rn,rn);const o=Number.MAX_VALUE;n.set(-o,-o,-o),i.set(o,o,o),rn.x===1?i.x=e.x:rn.x===-1&&(n.x=e.x),rn.y===1?i.y=e.y:rn.y===-1&&(n.y=e.y),rn.z===1?i.z=e.z:rn.z===-1&&(n.z=e.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const rn=new x;const D0=new x,O0=new x,k0=new x,G0=new x,V0=new x,U0=new x,H0=new x,W0=new x,j0=new x;class sn{constructor(e={}){this.root=e.root||null,this.aabb=e.aabb?e.aabb.clone():new Je,this.data=[],this.children=[]}reset(){this.children.length=this.data.length=0}insert(e,t,n=0){const i=this.data;if(!this.aabb.contains(e))return!1;const o=this.children,r=this.maxDepth||this.root.maxDepth;if(n<r){let s=!1;o.length||(this.subdivide(),s=!0);for(let a=0;a!==8;a++)if(o[a].insert(e,t,n+1))return!0;s&&(o.length=0)}return i.push(t),!0}subdivide(){const e=this.aabb,t=e.lowerBound,n=e.upperBound,i=this.children;i.push(new sn({aabb:new Je({lowerBound:new x(0,0,0)})}),new sn({aabb:new Je({lowerBound:new x(1,0,0)})}),new sn({aabb:new Je({lowerBound:new x(1,1,0)})}),new sn({aabb:new Je({lowerBound:new x(1,1,1)})}),new sn({aabb:new Je({lowerBound:new x(0,1,1)})}),new sn({aabb:new Je({lowerBound:new x(0,0,1)})}),new sn({aabb:new Je({lowerBound:new x(1,0,1)})}),new sn({aabb:new Je({lowerBound:new x(0,1,0)})})),n.vsub(t,Hn),Hn.scale(.5,Hn);const o=this.root||this;for(let r=0;r!==8;r++){const s=i[r];s.root=o;const a=s.aabb.lowerBound;a.x*=Hn.x,a.y*=Hn.y,a.z*=Hn.z,a.vadd(t,a),a.vadd(Hn,s.aabb.upperBound)}}aabbQuery(e,t){const n=this.data,i=this.children,o=[this];for(;o.length;){const r=o.pop();r.aabb.overlaps(e)&&Array.prototype.push.apply(t,r.data),Array.prototype.push.apply(o,r.children)}return t}rayQuery(e,t,n){return e.getAABB(Xo),Xo.toLocalFrame(t,Xo),this.aabbQuery(Xo,n),n}removeEmptyNodes(){for(let e=this.children.length-1;e>=0;e--)this.children[e].removeEmptyNodes(),!this.children[e].children.length&&!this.children[e].data.length&&this.children.splice(e,1)}}class nd extends sn{constructor(e,t={}){super({root:null,aabb:e});this.maxDepth=typeof t.maxDepth!="undefined"?t.maxDepth:8}}const Hn=new x,Xo=new Je;class Yo extends pe{constructor(e,t){super({type:pe.types.TRIMESH});this.vertices=new Float32Array(e),this.indices=new Int16Array(t),this.normals=new Float32Array(t.length),this.aabb=new Je,this.edges=null,this.scale=new x(1,1,1),this.tree=new nd,this.updateEdges(),this.updateNormals(),this.updateAABB(),this.updateBoundingSphereRadius(),this.updateTree()}updateTree(){const e=this.tree;e.reset(),e.aabb.copy(this.aabb);const t=this.scale;e.aabb.lowerBound.x*=1/t.x,e.aabb.lowerBound.y*=1/t.y,e.aabb.lowerBound.z*=1/t.z,e.aabb.upperBound.x*=1/t.x,e.aabb.upperBound.y*=1/t.y,e.aabb.upperBound.z*=1/t.z;const n=new Je,i=new x,o=new x,r=new x,s=[i,o,r];for(let a=0;a<this.indices.length/3;a++){const c=a*3;this._getUnscaledVertex(this.indices[c],i),this._getUnscaledVertex(this.indices[c+1],o),this._getUnscaledVertex(this.indices[c+2],r),n.setFromPoints(s),e.insert(n,a)}e.removeEmptyNodes()}getTrianglesInAABB(e,t){Zo.copy(e);const n=this.scale,i=n.x,o=n.y,r=n.z,s=Zo.lowerBound,a=Zo.upperBound;return s.x/=i,s.y/=o,s.z/=r,a.x/=i,a.y/=o,a.z/=r,this.tree.aabbQuery(Zo,t)}setScale(e){const t=this.scale.x===this.scale.y&&this.scale.y===this.scale.z,n=e.x===e.y&&e.y===e.z;t&&n||this.updateNormals(),this.scale.copy(e),this.updateAABB(),this.updateBoundingSphereRadius()}updateNormals(){const e=id,t=this.normals;for(let n=0;n<this.indices.length/3;n++){const i=n*3,o=this.indices[i],r=this.indices[i+1],s=this.indices[i+2];this.getVertex(o,vc),this.getVertex(r,xc),this.getVertex(s,bc),Yo.computeNormal(xc,vc,bc,e),t[i]=e.x,t[i+1]=e.y,t[i+2]=e.z}}updateEdges(){const e={},t=(i,o)=>{const r=i<o?i+"_"+o:o+"_"+i;e[r]=!0};for(let i=0;i<this.indices.length/3;i++){const o=i*3,r=this.indices[o],s=this.indices[o+1],a=this.indices[o+2];t(r,s),t(s,a),t(a,r)}const n=Object.keys(e);this.edges=new Int16Array(n.length*2);for(let i=0;i<n.length;i++){const o=n[i].split("_");this.edges[2*i]=parseInt(o[0],10),this.edges[2*i+1]=parseInt(o[1],10)}}getEdgeVertex(e,t,n){const i=this.edges[e*2+(t?1:0)];this.getVertex(i,n)}getEdgeVector(e,t){const n=od,i=rd;this.getEdgeVertex(e,0,n),this.getEdgeVertex(e,1,i),i.vsub(n,t)}getVertex(e,t){const n=this.scale;return this._getUnscaledVertex(e,t),t.x*=n.x,t.y*=n.y,t.z*=n.z,t}_getUnscaledVertex(e,t){const n=e*3,i=this.vertices;return t.set(i[n],i[n+1],i[n+2])}getWorldVertex(e,t,n,i){return this.getVertex(e,i),ze.pointToWorldFrame(t,n,i,i),i}getTriangleVertices(e,t,n,i){const o=e*3;this.getVertex(this.indices[o],t),this.getVertex(this.indices[o+1],n),this.getVertex(this.indices[o+2],i)}getNormal(e,t){const n=e*3;return t.set(this.normals[n],this.normals[n+1],this.normals[n+2])}calculateLocalInertia(e,t){this.computeLocalAABB(Wn);const n=Wn.upperBound.x-Wn.lowerBound.x,i=Wn.upperBound.y-Wn.lowerBound.y,o=Wn.upperBound.z-Wn.lowerBound.z;return t.set(1/12*e*(2*i*2*i+2*o*2*o),1/12*e*(2*n*2*n+2*o*2*o),1/12*e*(2*i*2*i+2*n*2*n))}computeLocalAABB(e){const t=e.lowerBound,n=e.upperBound,i=this.vertices.length,o=this.vertices,r=sd;this.getVertex(0,r),t.copy(r),n.copy(r);for(let s=0;s!==i;s++)this.getVertex(s,r),r.x<t.x?t.x=r.x:r.x>n.x&&(n.x=r.x),r.y<t.y?t.y=r.y:r.y>n.y&&(n.y=r.y),r.z<t.z?t.z=r.z:r.z>n.z&&(n.z=r.z)}updateAABB(){this.computeLocalAABB(this.aabb)}updateBoundingSphereRadius(){let e=0;const t=this.vertices,n=new x;for(let i=0,o=t.length/3;i!==o;i++){this.getVertex(i,n);const r=n.lengthSquared();r>e&&(e=r)}this.boundingSphereRadius=Math.sqrt(e)}calculateWorldAABB(e,t,n,i){const o=ad,r=cd;o.position=e,o.quaternion=t,this.aabb.toWorldFrame(o,r),n.copy(r.lowerBound),i.copy(r.upperBound)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}}const id=new x,Zo=new Je,od=new x,rd=new x,wc=new x,_c=new x;Yo.computeNormal=(e,t,n,i)=>{t.vsub(e,_c),n.vsub(t,wc),wc.cross(_c,i),i.isZero()||i.normalize()};const vc=new x,xc=new x,bc=new x,Wn=new Je,sd=new x,ad=new ze,cd=new Je;Yo.createTorus=(e=1,t=.5,n=8,i=6,o=Math.PI*2)=>{const r=[],s=[];for(let a=0;a<=n;a++)for(let c=0;c<=i;c++){const l=c/i*o,u=a/n*Math.PI*2,h=(e+t*Math.cos(u))*Math.cos(l),p=(e+t*Math.cos(u))*Math.sin(l),d=t*Math.sin(u);r.push(h,p,d)}for(let a=1;a<=n;a++)for(let c=1;c<=i;c++){const l=(i+1)*a+c-1,u=(i+1)*(a-1)+c-1,h=(i+1)*(a-1)+c,p=(i+1)*a+c;s.push(l,u,p),s.push(u,h,p)}return new Yo(r,s)};class ld{constructor(){this.equations=[]}solve(e,t){return 0}addEquation(e){e.enabled&&this.equations.push(e)}removeEquation(e){const t=this.equations,n=t.indexOf(e);n!==-1&&t.splice(n,1)}removeAllEquations(){this.equations.length=0}}class pd extends ld{constructor(){super();this.iterations=10,this.tolerance=1e-7}solve(e,t){let n=0;const i=this.iterations,o=this.tolerance*this.tolerance,r=this.equations,s=r.length,a=t.bodies,c=a.length,l=e;let u,h,p,d,m,y;if(s!==0)for(let w=0;w!==c;w++)a[w].updateSolveMassProperties();const v=ud,g=dd,f=hd;v.length=s,g.length=s,f.length=s;for(let w=0;w!==s;w++){const _=r[w];f[w]=0,g[w]=_.computeB(l),v[w]=1/_.computeC()}if(s!==0){for(let M=0;M!==c;M++){const b=a[M],P=b.vlambda,D=b.wlambda;P.set(0,0,0),D.set(0,0,0)}for(n=0;n!==i;n++){d=0;for(let M=0;M!==s;M++){const b=r[M];u=g[M],h=v[M],y=f[M],m=b.computeGWlambda(),p=h*(u-m-b.eps*y),y+p<b.minForce?p=b.minForce-y:y+p>b.maxForce&&(p=b.maxForce-y),f[M]+=p,d+=p>0?p:-p,b.addToWlambda(p)}if(d*d<o)break}for(let M=0;M!==c;M++){const b=a[M],P=b.velocity,D=b.angularVelocity;b.vlambda.vmul(b.linearFactor,b.vlambda),P.vadd(b.vlambda,P),b.wlambda.vmul(b.angularFactor,b.wlambda),D.vadd(b.wlambda,D)}let w=r.length;const _=1/l;for(;w--;)r[w].multiplier=f[w]*_}return n}}const hd=[],ud=[],dd=[];const q0=ce.STATIC;class fd{constructor(){this.objects=[],this.type=Object}release(...e){const t=e.length;for(let n=0;n!==t;n++)this.objects.push(e[n]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(e){const t=this.objects;for(;t.length>e;)t.pop();for(;t.length<e;)t.push(this.constructObject());return this}}class md extends fd{constructor(){super();this.type=x}constructObject(){return new x}}const ot={sphereSphere:pe.types.SPHERE,spherePlane:pe.types.SPHERE|pe.types.PLANE,boxBox:pe.types.BOX|pe.types.BOX,sphereBox:pe.types.SPHERE|pe.types.BOX,planeBox:pe.types.PLANE|pe.types.BOX,convexConvex:pe.types.CONVEXPOLYHEDRON,sphereConvex:pe.types.SPHERE|pe.types.CONVEXPOLYHEDRON,planeConvex:pe.types.PLANE|pe.types.CONVEXPOLYHEDRON,boxConvex:pe.types.BOX|pe.types.CONVEXPOLYHEDRON,sphereHeightfield:pe.types.SPHERE|pe.types.HEIGHTFIELD,boxHeightfield:pe.types.BOX|pe.types.HEIGHTFIELD,convexHeightfield:pe.types.CONVEXPOLYHEDRON|pe.types.HEIGHTFIELD,sphereParticle:pe.types.PARTICLE|pe.types.SPHERE,planeParticle:pe.types.PLANE|pe.types.PARTICLE,boxParticle:pe.types.BOX|pe.types.PARTICLE,convexParticle:pe.types.PARTICLE|pe.types.CONVEXPOLYHEDRON,sphereTrimesh:pe.types.SPHERE|pe.types.TRIMESH,planeTrimesh:pe.types.PLANE|pe.types.TRIMESH};class Le{constructor(e){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new md,this.world=e,this.currentContactMaterial=e.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(e,t,n,i,o,r){let s;this.contactPointPool.length?(s=this.contactPointPool.pop(),s.bi=e,s.bj=t):s=new $u(e,t),s.enabled=e.collisionResponse&&t.collisionResponse&&n.collisionResponse&&i.collisionResponse;const a=this.currentContactMaterial;s.restitution=a.restitution,s.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const c=n.material||e.material,l=i.material||t.material;return c&&l&&c.restitution>=0&&l.restitution>=0&&(s.restitution=c.restitution*l.restitution),s.si=o||n,s.sj=r||i,s}createFrictionEquationsFromContact(e,t){const n=e.bi,i=e.bj,o=e.si,r=e.sj,s=this.world,a=this.currentContactMaterial;let c=a.friction;const l=o.material||n.material,u=r.material||i.material;if(l&&u&&l.friction>=0&&u.friction>=0&&(c=l.friction*u.friction),c>0){const h=c*s.gravity.length();let p=n.invMass+i.invMass;p>0&&(p=1/p);const d=this.frictionEquationPool,m=d.length?d.pop():new fc(n,i,h*p),y=d.length?d.pop():new fc(n,i,h*p);return m.bi=y.bi=n,m.bj=y.bj=i,m.minForce=y.minForce=-h*p,m.maxForce=y.maxForce=h*p,m.ri.copy(e.ri),m.rj.copy(e.rj),y.ri.copy(e.ri),y.rj.copy(e.rj),e.ni.tangents(m.t,y.t),m.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,s.dt),y.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,s.dt),m.enabled=y.enabled=e.enabled,t.push(m,y),!0}return!1}createFrictionFromAverage(e){let t=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(t,this.frictionResult)||e===1)return;const n=this.frictionResult[this.frictionResult.length-2],i=this.frictionResult[this.frictionResult.length-1];jn.setZero(),ai.setZero(),ci.setZero();const o=t.bi,r=t.bj;for(let a=0;a!==e;a++)t=this.result[this.result.length-1-a],t.bi!==o?(jn.vadd(t.ni,jn),ai.vadd(t.ri,ai),ci.vadd(t.rj,ci)):(jn.vsub(t.ni,jn),ai.vadd(t.rj,ai),ci.vadd(t.ri,ci));const s=1/e;ai.scale(s,n.ri),ci.scale(s,n.rj),i.ri.copy(n.ri),i.rj.copy(n.rj),jn.normalize(),jn.tangents(n.t,i.t)}getContacts(e,t,n,i,o,r,s){this.contactPointPool=o,this.frictionEquationPool=s,this.result=i,this.frictionResult=r;const a=vd,c=xd,l=gd,u=yd;for(let h=0,p=e.length;h!==p;h++){const d=e[h],m=t[h];let y=null;d.material&&m.material&&(y=n.getContactMaterial(d.material,m.material)||null);const v=d.type&ce.KINEMATIC&&m.type&ce.STATIC||d.type&ce.STATIC&&m.type&ce.KINEMATIC||d.type&ce.KINEMATIC&&m.type&ce.KINEMATIC;for(let g=0;g<d.shapes.length;g++){d.quaternion.mult(d.shapeOrientations[g],a),d.quaternion.vmult(d.shapeOffsets[g],l),l.vadd(d.position,l);const f=d.shapes[g];for(let w=0;w<m.shapes.length;w++){m.quaternion.mult(m.shapeOrientations[w],c),m.quaternion.vmult(m.shapeOffsets[w],u),u.vadd(m.position,u);const _=m.shapes[w];if(!(f.collisionFilterMask&_.collisionFilterGroup&&_.collisionFilterMask&f.collisionFilterGroup))continue;if(l.distanceTo(u)>f.boundingSphereRadius+_.boundingSphereRadius)continue;let M=null;f.material&&_.material&&(M=n.getContactMaterial(f.material,_.material)||null),this.currentContactMaterial=M||y||n.defaultContactMaterial;const b=f.type|_.type,P=this[b];if(P){let D=!1;f.type<_.type?D=P.call(this,f,_,l,u,a,c,d,m,f,_,v):D=P.call(this,_,f,u,l,c,a,m,d,f,_,v),D&&v&&(n.shapeOverlapKeeper.set(f.id,_.id),n.bodyOverlapKeeper.set(d.id,m.id))}}}}}sphereSphere(e,t,n,i,o,r,s,a,c,l,u){if(u)return n.distanceSquared(i)<(e.radius+t.radius)**2;const h=this.createContactEquation(s,a,e,t,c,l);i.vsub(n,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(e.radius,h.ri),h.rj.scale(-t.radius,h.rj),h.ri.vadd(n,h.ri),h.ri.vsub(s.position,h.ri),h.rj.vadd(i,h.rj),h.rj.vsub(a.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(e,t,n,i,o,r,s,a,c,l,u){const h=this.createContactEquation(s,a,e,t,c,l);if(h.ni.set(0,0,1),r.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(e.radius,h.ri),n.vsub(i,Jo),h.ni.scale(h.ni.dot(Jo),Mc),Jo.vsub(Mc,h.rj),-Jo.dot(h.ni)<=e.radius){if(u)return!0;const p=h.ri,d=h.rj;p.vadd(n,p),p.vsub(s.position,p),d.vadd(i,d),d.vsub(a.position,d),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(e,t,n,i,o,r,s,a,c,l,u){return e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(e.convexPolyhedronRepresentation,t.convexPolyhedronRepresentation,n,i,o,r,s,a,e,t,u)}sphereBox(e,t,n,i,o,r,s,a,c,l,u){const h=this.v3pool,p=Ud;n.vsub(i,Qo),t.getSideNormals(p,r);const d=e.radius;let m=!1;const y=Wd,v=jd,g=qd;let f=null,w=0,_=0,M=0,b=null;for(let S=0,F=p.length;S!==F&&m===!1;S++){const k=kd;k.copy(p[S]);const U=k.length();k.normalize();const Z=Qo.dot(k);if(Z<U+d&&Z>0){const ne=Gd,j=Vd;ne.copy(p[(S+1)%3]),j.copy(p[(S+2)%3]);const ge=ne.length(),we=j.length();ne.normalize(),j.normalize();const ke=Qo.dot(ne),W=Qo.dot(j);if(ke<ge&&ke>-ge&&W<we&&W>-we){const He=Math.abs(Z-U-d);if((b===null||He<b)&&(b=He,_=ke,M=W,f=U,y.copy(k),v.copy(ne),g.copy(j),w++,u))return!0}}}if(w){m=!0;const S=this.createContactEquation(s,a,e,t,c,l);y.scale(-d,S.ri),S.ni.copy(y),S.ni.negate(S.ni),y.scale(f,y),v.scale(_,v),y.vadd(v,y),g.scale(M,g),y.vadd(g,S.rj),S.ri.vadd(n,S.ri),S.ri.vsub(s.position,S.ri),S.rj.vadd(i,S.rj),S.rj.vsub(a.position,S.rj),this.result.push(S),this.createFrictionEquationsFromContact(S,this.frictionResult)}let P=h.get();const D=Hd;for(let S=0;S!==2&&!m;S++)for(let F=0;F!==2&&!m;F++)for(let k=0;k!==2&&!m;k++)if(P.set(0,0,0),S?P.vadd(p[0],P):P.vsub(p[0],P),F?P.vadd(p[1],P):P.vsub(p[1],P),k?P.vadd(p[2],P):P.vsub(p[2],P),i.vadd(P,D),D.vsub(n,D),D.lengthSquared()<d*d){if(u)return!0;m=!0;const U=this.createContactEquation(s,a,e,t,c,l);U.ri.copy(D),U.ri.normalize(),U.ni.copy(U.ri),U.ri.scale(d,U.ri),U.rj.copy(P),U.ri.vadd(n,U.ri),U.ri.vsub(s.position,U.ri),U.rj.vadd(i,U.rj),U.rj.vsub(a.position,U.rj),this.result.push(U),this.createFrictionEquationsFromContact(U,this.frictionResult)}h.release(P),P=null;const B=h.get(),V=h.get(),N=h.get(),I=h.get(),L=h.get(),C=p.length;for(let S=0;S!==C&&!m;S++)for(let F=0;F!==C&&!m;F++)if(S%3!==F%3){p[F].cross(p[S],B),B.normalize(),p[S].vadd(p[F],V),N.copy(n),N.vsub(V,N),N.vsub(i,N);const k=N.dot(B);B.scale(k,I);let U=0;for(;U===S%3||U===F%3;)U++;L.copy(n),L.vsub(I,L),L.vsub(V,L),L.vsub(i,L);const Z=Math.abs(k),ne=L.length();if(Z<p[U].length()&&ne<d){if(u)return!0;m=!0;const j=this.createContactEquation(s,a,e,t,c,l);V.vadd(I,j.rj),j.rj.copy(j.rj),L.negate(j.ni),j.ni.normalize(),j.ri.copy(j.rj),j.ri.vadd(i,j.ri),j.ri.vsub(n,j.ri),j.ri.normalize(),j.ri.scale(d,j.ri),j.ri.vadd(n,j.ri),j.ri.vsub(s.position,j.ri),j.rj.vadd(i,j.rj),j.rj.vsub(a.position,j.rj),this.result.push(j),this.createFrictionEquationsFromContact(j,this.frictionResult)}}h.release(B,V,N,I,L)}planeBox(e,t,n,i,o,r,s,a,c,l,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,t.convexPolyhedronRepresentation.id=t.id,this.planeConvex(e,t.convexPolyhedronRepresentation,n,i,o,r,s,a,e,t,u)}convexConvex(e,t,n,i,o,r,s,a,c,l,u,h,p){const d=ap;if(n.distanceTo(i)>e.boundingSphereRadius+t.boundingSphereRadius)return;if(e.findSeparatingAxis(t,n,o,i,r,d,h,p)){const m=[],y=cp;e.clipAgainstHull(n,o,t,i,r,d,-100,100,m);let v=0;for(let g=0;g!==m.length;g++){if(u)return!0;const f=this.createContactEquation(s,a,e,t,c,l),w=f.ri,_=f.rj;d.negate(f.ni),m[g].normal.negate(y),y.scale(m[g].depth,y),m[g].point.vadd(y,w),_.copy(m[g].point),w.vsub(n,w),_.vsub(i,_),w.vadd(n,w),w.vsub(s.position,w),_.vadd(i,_),_.vsub(a.position,_),this.result.push(f),v++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(f,this.frictionResult)}this.enableFrictionReduction&&v&&this.createFrictionFromAverage(v)}}sphereConvex(e,t,n,i,o,r,s,a,c,l,u){const h=this.v3pool;n.vsub(i,Xd);const p=t.faceNormals,d=t.faces,m=t.vertices,y=e.radius;let v=!1;for(let g=0;g!==m.length;g++){const f=m[g],w=Qd;r.vmult(f,w),i.vadd(w,w);const _=Jd;if(w.vsub(n,_),_.lengthSquared()<y*y){if(u)return!0;v=!0;const M=this.createContactEquation(s,a,e,t,c,l);M.ri.copy(_),M.ri.normalize(),M.ni.copy(M.ri),M.ri.scale(y,M.ri),w.vsub(i,M.rj),M.ri.vadd(n,M.ri),M.ri.vsub(s.position,M.ri),M.rj.vadd(i,M.rj),M.rj.vsub(a.position,M.rj),this.result.push(M),this.createFrictionEquationsFromContact(M,this.frictionResult);return}}for(let g=0,f=d.length;g!==f&&v===!1;g++){const w=p[g],_=d[g],M=Kd;r.vmult(w,M);const b=$d;r.vmult(m[_[0]],b),b.vadd(i,b);const P=ep;M.scale(-y,P),n.vadd(P,P);const D=tp;P.vsub(b,D);const B=D.dot(M),V=np;if(n.vsub(b,V),B<0&&V.dot(M)>0){const N=[];for(let I=0,L=_.length;I!==L;I++){const C=h.get();r.vmult(m[_[I]],C),i.vadd(C,C),N.push(C)}if(Od(N,M,n)){if(u)return!0;v=!0;const I=this.createContactEquation(s,a,e,t,c,l);M.scale(-y,I.ri),M.negate(I.ni);const L=h.get();M.scale(-B,L);const C=h.get();M.scale(-y,C),n.vsub(i,I.rj),I.rj.vadd(C,I.rj),I.rj.vadd(L,I.rj),I.rj.vadd(i,I.rj),I.rj.vsub(a.position,I.rj),I.ri.vadd(n,I.ri),I.ri.vsub(s.position,I.ri),h.release(L),h.release(C),this.result.push(I),this.createFrictionEquationsFromContact(I,this.frictionResult);for(let S=0,F=N.length;S!==F;S++)h.release(N[S]);return}else for(let I=0;I!==_.length;I++){const L=h.get(),C=h.get();r.vmult(m[_[(I+1)%_.length]],L),r.vmult(m[_[(I+2)%_.length]],C),i.vadd(L,L),i.vadd(C,C);const S=Yd;C.vsub(L,S);const F=Zd;S.unit(F);const k=h.get(),U=h.get();n.vsub(L,U);const Z=U.dot(F);F.scale(Z,k),k.vadd(L,k);const ne=h.get();if(k.vsub(n,ne),Z>0&&Z*Z<S.lengthSquared()&&ne.lengthSquared()<y*y){if(u)return!0;const j=this.createContactEquation(s,a,e,t,c,l);k.vsub(i,j.rj),k.vsub(n,j.ni),j.ni.normalize(),j.ni.scale(y,j.ri),j.rj.vadd(i,j.rj),j.rj.vsub(a.position,j.rj),j.ri.vadd(n,j.ri),j.ri.vsub(s.position,j.ri),this.result.push(j),this.createFrictionEquationsFromContact(j,this.frictionResult);for(let ge=0,we=N.length;ge!==we;ge++)h.release(N[ge]);h.release(L),h.release(C),h.release(k),h.release(ne),h.release(U);return}h.release(L),h.release(C),h.release(k),h.release(ne),h.release(U)}for(let I=0,L=N.length;I!==L;I++)h.release(N[I])}}}planeConvex(e,t,n,i,o,r,s,a,c,l,u){const h=ip,p=op;p.set(0,0,1),o.vmult(p,p);let d=0;const m=rp;for(let y=0;y!==t.vertices.length;y++){h.copy(t.vertices[y]),r.vmult(h,h),i.vadd(h,h),h.vsub(n,m);const v=p.dot(m);if(v<=0){if(u)return!0;const g=this.createContactEquation(s,a,e,t,c,l),f=sp;p.scale(p.dot(m),f),h.vsub(f,f),f.vsub(n,g.ri),g.ni.copy(p),h.vsub(i,g.rj),g.ri.vadd(n,g.ri),g.ri.vsub(s.position,g.ri),g.rj.vadd(i,g.rj),g.rj.vsub(a.position,g.rj),this.result.push(g),d++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(g,this.frictionResult)}}this.enableFrictionReduction&&d&&this.createFrictionFromAverage(d)}boxConvex(e,t,n,i,o,r,s,a,c,l,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(e.convexPolyhedronRepresentation,t,n,i,o,r,s,a,e,t,u)}sphereHeightfield(e,t,n,i,o,r,s,a,c,l,u){const h=t.data,p=e.radius,d=t.elementSize,m=bp,y=xp;ze.pointToLocalFrame(i,r,n,y);let v=Math.floor((y.x-p)/d)-1,g=Math.ceil((y.x+p)/d)+1,f=Math.floor((y.y-p)/d)-1,w=Math.ceil((y.y+p)/d)+1;if(g<0||w<0||v>h.length||f>h[0].length)return;v<0&&(v=0),g<0&&(g=0),f<0&&(f=0),w<0&&(w=0),v>=h.length&&(v=h.length-1),g>=h.length&&(g=h.length-1),w>=h[0].length&&(w=h[0].length-1),f>=h[0].length&&(f=h[0].length-1);const _=[];t.getRectMinMax(v,f,g,w,_);const M=_[0],b=_[1];if(y.z-p>b||y.z+p<M)return;const P=this.result;for(let D=v;D<g;D++)for(let B=f;B<w;B++){const V=P.length;let N=!1;if(t.getConvexTrianglePillar(D,B,!1),ze.pointToWorldFrame(i,r,t.pillarOffset,m),n.distanceTo(m)<t.pillarConvex.boundingSphereRadius+e.boundingSphereRadius&&(N=this.sphereConvex(e,t.pillarConvex,n,m,o,r,s,a,e,t,u)),u&&N)return!0;if(t.getConvexTrianglePillar(D,B,!0),ze.pointToWorldFrame(i,r,t.pillarOffset,m),n.distanceTo(m)<t.pillarConvex.boundingSphereRadius+e.boundingSphereRadius&&(N=this.sphereConvex(e,t.pillarConvex,n,m,o,r,s,a,e,t,u)),u&&N)return!0;const I=P.length-V;if(I>2)return}}boxHeightfield(e,t,n,i,o,r,s,a,c,l,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexHeightfield(e.convexPolyhedronRepresentation,t,n,i,o,r,s,a,e,t,u)}convexHeightfield(e,t,n,i,o,r,s,a,c,l,u){const h=t.data,p=t.elementSize,d=e.boundingSphereRadius,m=yp,y=vp,v=gp;ze.pointToLocalFrame(i,r,n,v);let g=Math.floor((v.x-d)/p)-1,f=Math.ceil((v.x+d)/p)+1,w=Math.floor((v.y-d)/p)-1,_=Math.ceil((v.y+d)/p)+1;if(f<0||_<0||g>h.length||w>h[0].length)return;g<0&&(g=0),f<0&&(f=0),w<0&&(w=0),_<0&&(_=0),g>=h.length&&(g=h.length-1),f>=h.length&&(f=h.length-1),_>=h[0].length&&(_=h[0].length-1),w>=h[0].length&&(w=h[0].length-1);const M=[];t.getRectMinMax(g,w,f,_,M);const b=M[0],P=M[1];if(v.z-d>P||v.z+d<b)return;for(let D=g;D<f;D++)for(let B=w;B<_;B++){let V=!1;if(t.getConvexTrianglePillar(D,B,!1),ze.pointToWorldFrame(i,r,t.pillarOffset,m),n.distanceTo(m)<t.pillarConvex.boundingSphereRadius+e.boundingSphereRadius&&(V=this.convexConvex(e,t.pillarConvex,n,m,o,r,s,a,null,null,u,y,null)),u&&V)return!0;if(t.getConvexTrianglePillar(D,B,!0),ze.pointToWorldFrame(i,r,t.pillarOffset,m),n.distanceTo(m)<t.pillarConvex.boundingSphereRadius+e.boundingSphereRadius&&(V=this.convexConvex(e,t.pillarConvex,n,m,o,r,s,a,null,null,u,y,null)),u&&V)return!0}}sphereParticle(e,t,n,i,o,r,s,a,c,l,u){const h=dp;h.set(0,0,1),i.vsub(n,h);const p=h.lengthSquared();if(p<=e.radius*e.radius){if(u)return!0;const d=this.createContactEquation(a,s,t,e,c,l);h.normalize(),d.rj.copy(h),d.rj.scale(e.radius,d.rj),d.ni.copy(h),d.ni.negate(d.ni),d.ri.set(0,0,0),this.result.push(d),this.createFrictionEquationsFromContact(d,this.frictionResult)}}planeParticle(e,t,n,i,o,r,s,a,c,l,u){const h=lp;h.set(0,0,1),s.quaternion.vmult(h,h);const p=hp;i.vsub(s.position,p);const d=h.dot(p);if(d<=0){if(u)return!0;const m=this.createContactEquation(a,s,t,e,c,l);m.ni.copy(h),m.ni.negate(m.ni),m.ri.set(0,0,0);const y=up;h.scale(h.dot(i),y),i.vsub(y,y),m.rj.copy(y),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}boxParticle(e,t,n,i,o,r,s,a,c,l,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexParticle(e.convexPolyhedronRepresentation,t,n,i,o,r,s,a,e,t,u)}convexParticle(e,t,n,i,o,r,s,a,c,l,u){let h=-1;const p=fp,d=mp;let m=null;const y=pp;if(y.copy(i),y.vsub(n,y),o.conjugate(Sc),Sc.vmult(y,y),e.pointIsInside(y)){e.worldVerticesNeedsUpdate&&e.computeWorldVertices(n,o),e.worldFaceNormalsNeedsUpdate&&e.computeWorldFaceNormals(o);for(let v=0,g=e.faces.length;v!==g;v++){const f=[e.worldVertices[e.faces[v][0]]],w=e.worldFaceNormals[v];i.vsub(f[0],Ec);const _=-w.dot(Ec);if(m===null||Math.abs(_)<Math.abs(m)){if(u)return!0;m=_,h=v,p.copy(w)}}if(h!==-1){const v=this.createContactEquation(a,s,t,e,c,l);p.scale(m,d),d.vadd(i,d),d.vsub(n,d),v.rj.copy(d),p.negate(v.ni),v.ri.set(0,0,0);const g=v.ri,f=v.rj;g.vadd(i,g),g.vsub(a.position,g),f.vadd(n,f),f.vsub(s.position,f),this.result.push(v),this.createFrictionEquationsFromContact(v,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}sphereTrimesh(e,t,n,i,o,r,s,a,c,l,u){const h=Ad,p=Cd,d=Rd,m=Pd,y=Ld,v=Bd,g=Fd,f=Td,w=Sd,_=Dd;ze.pointToLocalFrame(i,r,n,y);const M=e.radius;g.lowerBound.set(y.x-M,y.y-M,y.z-M),g.upperBound.set(y.x+M,y.y+M,y.z+M),t.getTrianglesInAABB(g,_);const b=Ed,P=e.radius*e.radius;for(let I=0;I<_.length;I++)for(let L=0;L<3;L++)if(t.getVertex(t.indices[_[I]*3+L],b),b.vsub(y,w),w.lengthSquared()<=P){if(f.copy(b),ze.pointToWorldFrame(i,r,f,b),b.vsub(n,w),u)return!0;let C=this.createContactEquation(s,a,e,t,c,l);C.ni.copy(w),C.ni.normalize(),C.ri.copy(C.ni),C.ri.scale(e.radius,C.ri),C.ri.vadd(n,C.ri),C.ri.vsub(s.position,C.ri),C.rj.copy(b),C.rj.vsub(a.position,C.rj),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult)}for(let I=0;I<_.length;I++)for(let L=0;L<3;L++){t.getVertex(t.indices[_[I]*3+L],h),t.getVertex(t.indices[_[I]*3+(L+1)%3],p),p.vsub(h,d),y.vsub(p,v);const C=v.dot(d);y.vsub(h,v);let S=v.dot(d);if(S>0&&C<0){y.vsub(h,v),m.copy(d),m.normalize(),S=v.dot(m),m.scale(S,v),v.vadd(h,v);const F=v.distanceTo(y);if(F<e.radius){if(u)return!0;const k=this.createContactEquation(s,a,e,t,c,l);v.vsub(y,k.ni),k.ni.normalize(),k.ni.scale(e.radius,k.ri),k.ri.vadd(n,k.ri),k.ri.vsub(s.position,k.ri),ze.pointToWorldFrame(i,r,v,v),v.vsub(a.position,k.rj),ze.vectorToWorldFrame(r,k.ni,k.ni),ze.vectorToWorldFrame(r,k.ri,k.ri),this.result.push(k),this.createFrictionEquationsFromContact(k,this.frictionResult)}}}const D=Id,B=Nd,V=zd,N=Md;for(let I=0,L=_.length;I!==L;I++){t.getTriangleVertices(_[I],D,B,V),t.getNormal(_[I],N),y.vsub(D,v);let C=v.dot(N);if(N.scale(C,v),y.vsub(v,v),C=v.distanceTo(y),Ge.pointInTriangle(v,D,B,V)&&C<e.radius){if(u)return!0;let S=this.createContactEquation(s,a,e,t,c,l);v.vsub(y,S.ni),S.ni.normalize(),S.ni.scale(e.radius,S.ri),S.ri.vadd(n,S.ri),S.ri.vsub(s.position,S.ri),ze.pointToWorldFrame(i,r,v,v),v.vsub(a.position,S.rj),ze.vectorToWorldFrame(r,S.ni,S.ni),ze.vectorToWorldFrame(r,S.ri,S.ri),this.result.push(S),this.createFrictionEquationsFromContact(S,this.frictionResult)}}_.length=0}planeTrimesh(e,t,n,i,o,r,s,a,c,l,u){const h=new x,p=bd;p.set(0,0,1),o.vmult(p,p);for(let d=0;d<t.vertices.length/3;d++){t.getVertex(d,h);const m=new x;m.copy(h),ze.pointToWorldFrame(i,r,m,h);const y=wd;h.vsub(n,y);const v=p.dot(y);if(v<=0){if(u)return!0;const g=this.createContactEquation(s,a,e,t,c,l);g.ni.copy(p);const f=_d;p.scale(y.dot(p),f),h.vsub(f,f),g.ri.copy(f),g.ri.vsub(s.position,g.ri),g.rj.copy(h),g.rj.vsub(a.position,g.rj),this.result.push(g),this.createFrictionEquationsFromContact(g,this.frictionResult)}}}}const jn=new x,ai=new x,ci=new x,gd=new x,yd=new x,vd=new it,xd=new it;Le.prototype[ot.boxBox]=Le.prototype.boxBox;Le.prototype[ot.boxConvex]=Le.prototype.boxConvex;Le.prototype[ot.boxParticle]=Le.prototype.boxParticle;Le.prototype[ot.sphereSphere]=Le.prototype.sphereSphere;const bd=new x,wd=new x,_d=new x;Le.prototype[ot.planeTrimesh]=Le.prototype.planeTrimesh;const Md=new x,Sd=new x,Ed=new x,Td=new x,Ad=new x,Cd=new x,Rd=new x,Pd=new x,Ld=new x,Bd=new x,Id=new x,Nd=new x,zd=new x,Fd=new Je,Dd=[];Le.prototype[ot.sphereTrimesh]=Le.prototype.sphereTrimesh;const Jo=new x,Mc=new x;Le.prototype[ot.spherePlane]=Le.prototype.spherePlane;const wp=new x,_p=new x,Mp=new x;function Od(e,t,n){let i=null;const o=e.length;for(let r=0;r!==o;r++){const s=e[r],a=wp;e[(r+1)%o].vsub(s,a);const c=_p;a.cross(t,c);const l=Mp;n.vsub(s,l);const u=c.dot(l);if(i===null||u>0&&i===!0||u<=0&&i===!1){i===null&&(i=u>0);continue}else return!1}return!0}const Qo=new x,kd=new x,Gd=new x,Vd=new x,Ud=[new x,new x,new x,new x,new x,new x],Hd=new x,Wd=new x,jd=new x,qd=new x;Le.prototype[ot.sphereBox]=Le.prototype.sphereBox;const Xd=new x,Yd=new x,Zd=new x,Jd=new x,Qd=new x,Kd=new x,$d=new x,ep=new x,tp=new x,np=new x;Le.prototype[ot.sphereConvex]=Le.prototype.sphereConvex;Le.prototype[ot.planeBox]=Le.prototype.planeBox;const ip=new x,op=new x,rp=new x,sp=new x;Le.prototype[ot.planeConvex]=Le.prototype.planeConvex;const ap=new x,cp=new x;Le.prototype[ot.convexConvex]=Le.prototype.convexConvex;const lp=new x,hp=new x,up=new x;Le.prototype[ot.planeParticle]=Le.prototype.planeParticle;const dp=new x;Le.prototype[ot.sphereParticle]=Le.prototype.sphereParticle;const Sc=new it,pp=new x,fp=new x,Ec=new x,mp=new x;Le.prototype[ot.convexParticle]=Le.prototype.convexParticle;Le.prototype[ot.boxHeightfield]=Le.prototype.boxHeightfield;const gp=new x,yp=new x,vp=[0];Le.prototype[ot.convexHeightfield]=Le.prototype.convexHeightfield;const xp=new x,bp=new x;Le.prototype[ot.sphereHeightfield]=Le.prototype.sphereHeightfield;class Ac{constructor(){this.current=[],this.previous=[]}getKey(e,t){if(t<e){const n=t;t=e,e=n}return e<<16|t}set(e,t){const n=this.getKey(e,t),i=this.current;let o=0;for(;n>i[o];)o++;if(n===i[o])return;for(let r=i.length-1;r>=o;r--)i[r+1]=i[r];i[o]=n}tick(){const e=this.current;this.current=this.previous,this.previous=e,this.current.length=0}getDiff(e,t){const n=this.current,i=this.previous,o=n.length,r=i.length;let s=0;for(let a=0;a<o;a++){let c=!1;const l=n[a];for(;l>i[s];)s++;c=l===i[s],c||Tc(e,l)}s=0;for(let a=0;a<r;a++){let c=!1;const l=i[a];for(;l>n[s];)s++;c=n[s]===l,c||Tc(t,l)}}}function Tc(e,t){e.push((t&4294901760)>>16,t&65535)}class Sp{constructor(){this.data={keys:[]}}get(e,t){if(e>t){const n=t;t=e,e=n}return this.data[e+"-"+t]}set(e,t,n){if(e>t){const o=t;t=e,e=o}const i=e+"-"+t;this.get(e,t)||this.data.keys.push(i),this.data[i]=n}reset(){const e=this.data,t=e.keys;for(;t.length>0;){const n=t.pop();delete e[n]}}}class ys extends nc{constructor(e={}){super();this.dt=-1,this.allowSleep=!!e.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=e.quatNormalizeSkip!==void 0?e.quatNormalizeSkip:0,this.quatNormalizeFast=e.quatNormalizeFast!==void 0?e.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new x,e.gravity&&this.gravity.copy(e.gravity),this.broadphase=e.broadphase!==void 0?e.broadphase:new hs,this.bodies=[],this.hasActiveBodies=!1,this.solver=e.solver!==void 0?e.solver:new pd,this.constraints=[],this.narrowphase=new Le(this),this.collisionMatrix=new tc,this.collisionMatrixPrevious=new tc,this.bodyOverlapKeeper=new Ac,this.shapeOverlapKeeper=new Ac,this.materials=[],this.contactmaterials=[],this.contactMaterialTable=new Sp,this.defaultMaterial=new Un("default"),this.defaultContactMaterial=new ms(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(e,t){return this.contactMaterialTable.get(e.id,t.id)}numObjects(){return this.bodies.length}collisionMatrixTick(){const e=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=e,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(e){this.constraints.push(e)}removeConstraint(e){const t=this.constraints.indexOf(e);t!==-1&&this.constraints.splice(t,1)}rayTest(e,t,n){n instanceof us?this.raycastClosest(e,t,{skipBackfaces:!0},n):this.raycastAll(e,t,{skipBackfaces:!0},n)}raycastAll(e,t,n={},i){return n.mode=Ge.ALL,n.from=e,n.to=t,n.callback=i,gs.intersectWorld(this,n)}raycastAny(e,t,n={},i){return n.mode=Ge.ANY,n.from=e,n.to=t,n.result=i,gs.intersectWorld(this,n)}raycastClosest(e,t,n={},i){return n.mode=Ge.CLOSEST,n.from=e,n.to=t,n.result=i,gs.intersectWorld(this,n)}addBody(e){if(this.bodies.includes(e))return;e.index=this.bodies.length,this.bodies.push(e),e.world=this,e.initPosition.copy(e.position),e.initVelocity.copy(e.velocity),e.timeLastSleepy=this.time,e instanceof ce&&(e.initAngularVelocity.copy(e.angularVelocity),e.initQuaternion.copy(e.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=e,this.idToBodyMap[e.id]=e,this.dispatchEvent(this.addBodyEvent)}removeBody(e){e.world=null;const t=this.bodies.length-1,n=this.bodies,i=n.indexOf(e);if(i!==-1){n.splice(i,1);for(let o=0;o!==n.length;o++)n[o].index=o;this.collisionMatrix.setNumObjects(t),this.removeBodyEvent.body=e,delete this.idToBodyMap[e.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(e){return this.idToBodyMap[e]}getShapeById(e){const t=this.bodies;for(let n=0,i=t.length;n<i;n++){const o=t[n].shapes;for(let r=0,s=o.length;r<s;r++){const a=o[r];if(a.id===e)return a}}}addMaterial(e){this.materials.push(e)}addContactMaterial(e){this.contactmaterials.push(e),this.contactMaterialTable.set(e.materials[0].id,e.materials[1].id,e)}step(e,t,n=10){if(t===void 0)this.internalStep(e),this.time+=e;else{this.accumulator+=t;const i=rt.now();let o=0;for(;this.accumulator>=e&&o<n&&!(this.internalStep(e),this.accumulator-=e,o++,rt.now()-i>e*2*1e3););this.accumulator=this.accumulator%e;const r=this.accumulator/e;for(let s=0;s!==this.bodies.length;s++){const a=this.bodies[s];a.previousPosition.lerp(a.position,r,a.interpolatedPosition),a.previousQuaternion.slerp(a.quaternion,r,a.interpolatedQuaternion),a.previousQuaternion.normalize()}this.time+=t}}internalStep(e){this.dt=e;const t=this.contacts,n=Rp,i=Pp,o=this.numObjects(),r=this.bodies,s=this.solver,a=this.gravity,c=this.doProfiling,l=this.profile,u=ce.DYNAMIC;let h=-Infinity;const p=this.constraints,d=Cp,m=a.length(),y=a.x,v=a.y,g=a.z;let f=0;for(c&&(h=rt.now()),f=0;f!==o;f++){const L=r[f];if(L.type===u){const C=L.force,S=L.mass;C.x+=S*y,C.y+=S*v,C.z+=S*g}}for(let L=0,C=this.subsystems.length;L!==C;L++)this.subsystems[L].update();c&&(h=rt.now()),n.length=0,i.length=0,this.broadphase.collisionPairs(this,n,i),c&&(l.broadphase=rt.now()-h);let w=p.length;for(f=0;f!==w;f++){const L=p[f];if(!L.collideConnected)for(let C=n.length-1;C>=0;C-=1)(L.bodyA===n[C]&&L.bodyB===i[C]||L.bodyB===n[C]&&L.bodyA===i[C])&&(n.splice(C,1),i.splice(C,1))}this.collisionMatrixTick(),c&&(h=rt.now());const _=Ap,M=t.length;for(f=0;f!==M;f++)_.push(t[f]);t.length=0;const b=this.frictionEquations.length;for(f=0;f!==b;f++)d.push(this.frictionEquations[f]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(n,i,this,t,_,this.frictionEquations,d),c&&(l.narrowphase=rt.now()-h),c&&(h=rt.now()),f=0;f<this.frictionEquations.length;f++)s.addEquation(this.frictionEquations[f]);const P=t.length;for(let L=0;L!==P;L++){const C=t[L],S=C.bi,F=C.bj,k=C.si,U=C.sj;let Z;S.material&&F.material?Z=this.getContactMaterial(S.material,F.material)||this.defaultContactMaterial:Z=this.defaultContactMaterial;let ne=Z.friction;if(S.material&&F.material&&(S.material.friction>=0&&F.material.friction>=0&&(ne=S.material.friction*F.material.friction),S.material.restitution>=0&&F.material.restitution>=0&&(C.restitution=S.material.restitution*F.material.restitution)),s.addEquation(C),S.allowSleep&&S.type===ce.DYNAMIC&&S.sleepState===ce.SLEEPING&&F.sleepState===ce.AWAKE&&F.type!==ce.STATIC){const j=F.velocity.lengthSquared()+F.angularVelocity.lengthSquared(),ge=F.sleepSpeedLimit**2;j>=ge*2&&(S.wakeUpAfterNarrowphase=!0)}if(F.allowSleep&&F.type===ce.DYNAMIC&&F.sleepState===ce.SLEEPING&&S.sleepState===ce.AWAKE&&S.type!==ce.STATIC){const j=S.velocity.lengthSquared()+S.angularVelocity.lengthSquared(),ge=S.sleepSpeedLimit**2;j>=ge*2&&(F.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(S,F,!0),this.collisionMatrixPrevious.get(S,F)||(oo.body=F,oo.contact=C,S.dispatchEvent(oo),oo.body=S,F.dispatchEvent(oo)),this.bodyOverlapKeeper.set(S.id,F.id),this.shapeOverlapKeeper.set(k.id,U.id)}for(this.emitContactEvents(),c&&(l.makeContactConstraints=rt.now()-h,h=rt.now()),f=0;f!==o;f++){const L=r[f];L.wakeUpAfterNarrowphase&&(L.wakeUp(),L.wakeUpAfterNarrowphase=!1)}for(w=p.length,f=0;f!==w;f++){const L=p[f];L.update();for(let C=0,S=L.equations.length;C!==S;C++){const F=L.equations[C];s.addEquation(F)}}s.solve(e,this),c&&(l.solve=rt.now()-h),s.removeAllEquations();const D=Math.pow;for(f=0;f!==o;f++){const L=r[f];if(L.type&u){const C=D(1-L.linearDamping,e),S=L.velocity;S.scale(C,S);const F=L.angularVelocity;if(F){const k=D(1-L.angularDamping,e);F.scale(k,F)}}}for(this.dispatchEvent(Tp),f=0;f!==o;f++){const L=r[f];L.preStep&&L.preStep.call(L)}c&&(h=rt.now());const B=this.stepnumber,V=B%(this.quatNormalizeSkip+1)===0,N=this.quatNormalizeFast;for(f=0;f!==o;f++)r[f].integrate(e,V,N);for(this.clearForces(),this.broadphase.dirty=!0,c&&(l.integrate=rt.now()-h),this.time+=e,this.stepnumber+=1,this.dispatchEvent(Ep),f=0;f!==o;f++){const L=r[f],C=L.postStep;C&&C.call(L)}let I=!0;if(this.allowSleep)for(I=!1,f=0;f!==o;f++){const L=r[f];L.sleepTick(this.time),L.sleepState!==ce.SLEEPING&&(I=!0)}this.hasActiveBodies=I}clearForces(){const e=this.bodies,t=e.length;for(let n=0;n!==t;n++){const i=e[n],o=i.force,r=i.torque;i.force.set(0,0,0),i.torque.set(0,0,0)}}}const X0=new Je,gs=new Ge,rt=globalThis.performance||{};if(!rt.now){let e=Date.now();rt.timing&&rt.timing.navigationStart&&(e=rt.timing.navigationStart),rt.now=()=>Date.now()-e}const Ep={type:"postStep"},Tp={type:"preStep"},oo={type:ce.COLLIDE_EVENT_NAME,body:null,contact:null},Ap=[],Cp=[],Rp=[],Pp=[];ys.prototype.emitContactEvents=(()=>{const e=[],t=[],n={type:"beginContact",bodyA:null,bodyB:null},i={type:"endContact",bodyA:null,bodyB:null},o={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},r={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};return function(){const s=this.hasAnyEventListener("beginContact"),a=this.hasAnyEventListener("endContact");if((s||a)&&this.bodyOverlapKeeper.getDiff(e,t),s){for(let u=0,h=e.length;u<h;u+=2)n.bodyA=this.getBodyById(e[u]),n.bodyB=this.getBodyById(e[u+1]),this.dispatchEvent(n);n.bodyA=n.bodyB=null}if(a){for(let u=0,h=t.length;u<h;u+=2)i.bodyA=this.getBodyById(t[u]),i.bodyB=this.getBodyById(t[u+1]),this.dispatchEvent(i);i.bodyA=i.bodyB=null}e.length=t.length=0;const c=this.hasAnyEventListener("beginShapeContact"),l=this.hasAnyEventListener("endShapeContact");if((c||l)&&this.shapeOverlapKeeper.getDiff(e,t),c){for(let u=0,h=e.length;u<h;u+=2){const p=this.getShapeById(e[u]),d=this.getShapeById(e[u+1]);o.shapeA=p,o.shapeB=d,o.bodyA=p.body,o.bodyB=d.body,this.dispatchEvent(o)}o.bodyA=o.bodyB=o.shapeA=o.shapeB=null}if(l){for(let u=0,h=t.length;u<h;u+=2){const p=this.getShapeById(t[u]),d=this.getShapeById(t[u+1]);r.shapeA=p,r.shapeB=d,r.bodyA=p.body,r.bodyB=d.body,this.dispatchEvent(r)}r.bodyA=r.bodyB=r.shapeA=r.shapeB=null}}})();const Lp="121";const Bp=0,Cc=1,Ip=2;const Rc=1,vs=2,ro=3,Ko=0,ct=1,$o=2,Pc=1;const so=0,ao=1,Lc=2,Bc=3,Ic=4,Np=5,li=100,zp=101,Fp=102,Nc=103,zc=104,Dp=200,Op=201,kp=202,Gp=203,Fc=204,Dc=205,Vp=206,Up=207,Hp=208,Wp=209,jp=210,qp=0,Xp=1,Yp=2,xs=3,Zp=4,Jp=5,Qp=6,Kp=7,er=0,$p=1,ef=2,co=0,tf=1,nf=2,of=3,rf=4,sf=5,Oc=300,bs=301,ws=302,kc=303,Gc=304,_s=306,Ms=307,Ss=1e3,Et=1001,Es=1002,ft=1003,Vc=1004;const Uc=1005;const ut=1006,af=1007;const tr=1008;const Ts=1009,cf=1010,lf=1011,nr=1012,hf=1013,ir=1014,_n=1015,or=1016,uf=1017,df=1018,pf=1019,lo=1020,ff=1021,qn=1022,Ft=1023,mf=1024,gf=1025;const hi=1026,ho=1027,yf=1028,vf=1029,xf=1030,bf=1031,wf=1032,_f=1033,Hc=33776,Wc=33777,jc=33778,qc=33779,Xc=35840,Yc=35841,Zc=35842,Jc=35843,Mf=36196,Qc=37492,Kc=37496,Sf=37808,Ef=37809,Tf=37810,Af=37811,Cf=37812,Rf=37813,Pf=37814,Lf=37815,Bf=37816,If=37817,Nf=37818,zf=37819,Ff=37820,Df=37821,Of=36492,kf=37840,Gf=37841,Vf=37842,Uf=37843,Hf=37844,Wf=37845,jf=37846,qf=37847,Xf=37848,Yf=37849,Zf=37850,Jf=37851,Qf=37852,Kf=37853,$f=2200,em=2201,tm=2202,rr=2300,sr=2301,As=2302,ui=2400,di=2401,ar=2402,Cs=2500,$c=2501,nm=0;const pi=3e3,Rs=3001,el=3007,tl=3002,im=3003,nl=3004,il=3005,ol=3006,om=3200,rm=3201,fi=0,sm=1;const Ps=7680;const am=519,cr=35044,uo=35048;const rl="300 es";function an(){}Object.assign(an.prototype,{addEventListener:function(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[e]===void 0&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)},hasEventListener:function(e,t){if(this._listeners===void 0)return!1;const n=this._listeners;return n[e]!==void 0&&n[e].indexOf(t)!==-1},removeEventListener:function(e,t){if(this._listeners===void 0)return;const n=this._listeners,i=n[e];if(i!==void 0){const o=i.indexOf(t);o!==-1&&i.splice(o,1)}},dispatchEvent:function(e){if(this._listeners===void 0)return;const t=this._listeners,n=t[e.type];if(n!==void 0){e.target=this;const i=n.slice(0);for(let o=0,r=i.length;o<r;o++)i[o].call(this,e)}}});const lt=[];for(let e=0;e<256;e++)lt[e]=(e<16?"0":"")+e.toString(16);let lr=1234567;const Ee={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){const e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0,i=Math.random()*4294967295|0,o=lt[e&255]+lt[e>>8&255]+lt[e>>16&255]+lt[e>>24&255]+"-"+lt[t&255]+lt[t>>8&255]+"-"+lt[t>>16&15|64]+lt[t>>24&255]+"-"+lt[n&63|128]+lt[n>>8&255]+"-"+lt[n>>16&255]+lt[n>>24&255]+lt[i&255]+lt[i>>8&255]+lt[i>>16&255]+lt[i>>24&255];return o.toUpperCase()},clamp:function(e,t,n){return Math.max(t,Math.min(n,e))},euclideanModulo:function(e,t){return(e%t+t)%t},mapLinear:function(e,t,n,i,o){return i+(e-t)*(o-i)/(n-t)},lerp:function(e,t,n){return(1-n)*e+n*t},smoothstep:function(e,t,n){return e<=t?0:e>=n?1:(e=(e-t)/(n-t),e*e*(3-2*e))},smootherstep:function(e,t,n){return e<=t?0:e>=n?1:(e=(e-t)/(n-t),e*e*e*(e*(e*6-15)+10))},randInt:function(e,t){return e+Math.floor(Math.random()*(t-e+1))},randFloat:function(e,t){return e+Math.random()*(t-e)},randFloatSpread:function(e){return e*(.5-Math.random())},seededRandom:function(e){return e!==void 0&&(lr=e%2147483647),lr=lr*16807%2147483647,(lr-1)/2147483646},degToRad:function(e){return e*Ee.DEG2RAD},radToDeg:function(e){return e*Ee.RAD2DEG},isPowerOfTwo:function(e){return(e&e-1)===0&&e!==0},ceilPowerOfTwo:function(e){return Math.pow(2,Math.ceil(Math.log(e)/Math.LN2))},floorPowerOfTwo:function(e){return Math.pow(2,Math.floor(Math.log(e)/Math.LN2))},setQuaternionFromProperEuler:function(e,t,n,i,o){const r=Math.cos,s=Math.sin,a=r(n/2),c=s(n/2),l=r((t+i)/2),u=s((t+i)/2),h=r((t-i)/2),p=s((t-i)/2),d=r((i-t)/2),m=s((i-t)/2);switch(o){case"XYX":e.set(a*u,c*h,c*p,a*l);break;case"YZY":e.set(c*p,a*u,c*h,a*l);break;case"ZXZ":e.set(c*h,c*p,a*u,a*l);break;case"XZX":e.set(a*u,c*m,c*d,a*l);break;case"YXY":e.set(c*d,a*u,c*m,a*l);break;case"ZYZ":e.set(c*m,c*d,a*u,a*l);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+o)}}};class X{constructor(e=0,t=0){Object.defineProperty(this,"isVector2",{value:!0}),this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e,t){return t!==void 0?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this)}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e,t){return t!==void 0?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this)}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6],this.y=i[1]*t+i[4]*n+i[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){const e=Math.atan2(-this.y,-this.x)+Math.PI;return e}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t){return t===void 0&&(t=0),this.x=e[t],this.y=e[t+1],this}toArray(e,t){return e===void 0&&(e=[]),t===void 0&&(t=0),e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t,n){return n!==void 0&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),i=Math.sin(t),o=this.x-e.x,r=this.y-e.y;return this.x=o*n-r*i+e.x,this.y=o*i+r*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}}class Mt{constructor(){Object.defineProperty(this,"isMatrix3",{value:!0}),this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(e,t,n,i,o,r,s,a,c){const l=this.elements;return l[0]=e,l[1]=i,l[2]=s,l[3]=t,l[4]=o,l[5]=a,l[6]=n,l[7]=r,l[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}clone(){return new this.constructor().fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,o=this.elements,r=n[0],s=n[3],a=n[6],c=n[1],l=n[4],u=n[7],h=n[2],p=n[5],d=n[8],m=i[0],y=i[3],v=i[6],g=i[1],f=i[4],w=i[7],_=i[2],M=i[5],b=i[8];return o[0]=r*m+s*g+a*_,o[3]=r*y+s*f+a*M,o[6]=r*v+s*w+a*b,o[1]=c*m+l*g+u*_,o[4]=c*y+l*f+u*M,o[7]=c*v+l*w+u*b,o[2]=h*m+p*g+d*_,o[5]=h*y+p*f+d*M,o[8]=h*v+p*w+d*b,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],i=e[2],o=e[3],r=e[4],s=e[5],a=e[6],c=e[7],l=e[8];return t*r*l-t*s*c-n*o*l+n*s*a+i*o*c-i*r*a}getInverse(e,t){t!==void 0&&console.warn("THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.");const n=e.elements,i=this.elements,o=n[0],r=n[1],s=n[2],a=n[3],c=n[4],l=n[5],u=n[6],h=n[7],p=n[8],d=p*c-l*h,m=l*u-p*a,y=h*a-c*u,v=o*d+r*m+s*y;if(v===0)return this.set(0,0,0,0,0,0,0,0,0);const g=1/v;return i[0]=d*g,i[1]=(s*h-p*r)*g,i[2]=(l*r-s*c)*g,i[3]=m*g,i[4]=(p*o-s*u)*g,i[5]=(s*a-l*o)*g,i[6]=y*g,i[7]=(r*u-h*o)*g,i[8]=(c*o-r*a)*g,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).getInverse(this).transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,i,o,r,s){const a=Math.cos(o),c=Math.sin(o);this.set(n*a,n*c,-n*(a*r+c*s)+r+e,-i*c,i*a,-i*(-c*r+a*s)+s+t,0,0,1)}scale(e,t){const n=this.elements;return n[0]*=e,n[3]*=e,n[6]*=e,n[1]*=t,n[4]*=t,n[7]*=t,this}rotate(e){const t=Math.cos(e),n=Math.sin(e),i=this.elements,o=i[0],r=i[3],s=i[6],a=i[1],c=i[4],l=i[7];return i[0]=t*o+n*a,i[3]=t*r+n*c,i[6]=t*s+n*l,i[1]=-n*o+t*a,i[4]=-n*r+t*c,i[7]=-n*s+t*l,this}translate(e,t){const n=this.elements;return n[0]+=e*n[2],n[3]+=e*n[5],n[6]+=e*n[8],n[1]+=t*n[2],n[4]+=t*n[5],n[7]+=t*n[8],this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<9;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t){t===void 0&&(t=0);for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e,t){e===void 0&&(e=[]),t===void 0&&(t=0);const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}}let mi;const Xn={getDataURL:function(e){if(/^data:/i.test(e.src))return e.src;if(typeof HTMLCanvasElement=="undefined")return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{mi===void 0&&(mi=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),mi.width=e.width,mi.height=e.height;const n=mi.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=mi}return t.width>2048||t.height>2048?t.toDataURL("image/jpeg",.6):t.toDataURL("image/png")}};let cm=0;function qe(e,t,n,i,o,r,s,a,c,l){Object.defineProperty(this,"id",{value:cm++}),this.uuid=Ee.generateUUID(),this.name="",this.image=e!==void 0?e:qe.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=t!==void 0?t:qe.DEFAULT_MAPPING,this.wrapS=n!==void 0?n:Et,this.wrapT=i!==void 0?i:Et,this.magFilter=o!==void 0?o:ut,this.minFilter=r!==void 0?r:tr,this.anisotropy=c!==void 0?c:1,this.format=s!==void 0?s:Ft,this.internalFormat=null,this.type=a!==void 0?a:Ts,this.offset=new X(0,0),this.repeat=new X(1,1),this.center=new X(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Mt,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=l!==void 0?l:pi,this.version=0,this.onUpdate=null}qe.DEFAULT_IMAGE=void 0;qe.DEFAULT_MAPPING=Oc;qe.prototype=Object.assign(Object.create(an.prototype),{constructor:qe,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return new this.constructor().copy(this)},copy:function(e){return this.name=e.name,this.image=e.image,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this},toJSON:function(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(this.image!==void 0){const i=this.image;if(i.uuid===void 0&&(i.uuid=Ee.generateUUID()),!t&&e.images[i.uuid]===void 0){let o;if(Array.isArray(i)){o=[];for(let r=0,s=i.length;r<s;r++)o.push(Xn.getDataURL(i[r]))}else o=Xn.getDataURL(i);e.images[i.uuid]={uuid:i.uuid,url:o}}n.image=i.uuid}return t||(e.textures[this.uuid]=n),n},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(e){if(this.mapping!==Oc)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case Ss:e.x=e.x-Math.floor(e.x);break;case Et:e.x=e.x<0?0:1;break;case Es:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case Ss:e.y=e.y-Math.floor(e.y);break;case Et:e.y=e.y<0?0:1;break;case Es:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}});Object.defineProperty(qe.prototype,"needsUpdate",{set:function(e){e===!0&&this.version++}});class Ve{constructor(e=0,t=0,n=0,i=1){Object.defineProperty(this,"isVector4",{value:!0}),this.x=e,this.y=t,this.z=n,this.w=i}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e,t){return t!==void 0?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this)}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e,t){return t!==void 0?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this)}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,o=this.w,r=e.elements;return this.x=r[0]*t+r[4]*n+r[8]*i+r[12]*o,this.y=r[1]*t+r[5]*n+r[9]*i+r[13]*o,this.z=r[2]*t+r[6]*n+r[10]*i+r[14]*o,this.w=r[3]*t+r[7]*n+r[11]*i+r[15]*o,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,i,o;const r=.01,s=.1,a=e.elements,c=a[0],l=a[4],u=a[8],h=a[1],p=a[5],d=a[9],m=a[2],y=a[6],v=a[10];if(Math.abs(l-h)<r&&Math.abs(u-m)<r&&Math.abs(d-y)<r){if(Math.abs(l+h)<s&&Math.abs(u+m)<s&&Math.abs(d+y)<s&&Math.abs(c+p+v-3)<s)return this.set(1,0,0,0),this;t=Math.PI;const f=(c+1)/2,w=(p+1)/2,_=(v+1)/2,M=(l+h)/4,b=(u+m)/4,P=(d+y)/4;return f>w&&f>_?f<r?(n=0,i=.707106781,o=.707106781):(n=Math.sqrt(f),i=M/n,o=b/n):w>_?w<r?(n=.707106781,i=0,o=.707106781):(i=Math.sqrt(w),n=M/i,o=P/i):_<r?(n=.707106781,i=.707106781,o=0):(o=Math.sqrt(_),n=b/o,i=P/o),this.set(n,i,o,t),this}let g=Math.sqrt((y-d)*(y-d)+(u-m)*(u-m)+(h-l)*(h-l));return Math.abs(g)<.001&&(g=1),this.x=(y-d)/g,this.y=(u-m)/g,this.z=(h-l)/g,this.w=Math.acos((c+p+v-1)/2),this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t){return t===void 0&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e,t){return e===void 0&&(e=[]),t===void 0&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t,n){return n!==void 0&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}}function Dt(e,t,n){this.width=e,this.height=t,this.scissor=new Ve(0,0,e,t),this.scissorTest=!1,this.viewport=new Ve(0,0,e,t),n=n||{},this.texture=new qe(void 0,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.image={},this.texture.image.width=e,this.texture.image.height=t,this.texture.generateMipmaps=n.generateMipmaps!==void 0?n.generateMipmaps:!1,this.texture.minFilter=n.minFilter!==void 0?n.minFilter:ut,this.depthBuffer=n.depthBuffer!==void 0?n.depthBuffer:!0,this.stencilBuffer=n.stencilBuffer!==void 0?n.stencilBuffer:!1,this.depthTexture=n.depthTexture!==void 0?n.depthTexture:null}Dt.prototype=Object.assign(Object.create(an.prototype),{constructor:Dt,isWebGLRenderTarget:!0,setSize:function(e,t){(this.width!==e||this.height!==t)&&(this.width=e,this.height=t,this.texture.image.width=e,this.texture.image.height=t,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)},clone:function(){return new this.constructor().copy(this)},copy:function(e){return this.width=e.width,this.height=e.height,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.depthTexture=e.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});function sl(e,t,n){Dt.call(this,e,t,n),this.samples=4}sl.prototype=Object.assign(Object.create(Dt.prototype),{constructor:sl,isWebGLMultisampleRenderTarget:!0,copy:function(e){return Dt.prototype.copy.call(this,e),this.samples=e.samples,this}});class ht{constructor(e=0,t=0,n=0,i=1){Object.defineProperty(this,"isQuaternion",{value:!0}),this._x=e,this._y=t,this._z=n,this._w=i}static slerp(e,t,n,i){return n.copy(e).slerp(t,i)}static slerpFlat(e,t,n,i,o,r,s){let a=n[i+0],c=n[i+1],l=n[i+2],u=n[i+3];const h=o[r+0],p=o[r+1],d=o[r+2],m=o[r+3];if(u!==m||a!==h||c!==p||l!==d){let y=1-s;const v=a*h+c*p+l*d+u*m,g=v>=0?1:-1,f=1-v*v;if(f>Number.EPSILON){const _=Math.sqrt(f),M=Math.atan2(_,v*g);y=Math.sin(y*M)/_,s=Math.sin(s*M)/_}const w=s*g;if(a=a*y+h*w,c=c*y+p*w,l=l*y+d*w,u=u*y+m*w,y===1-s){const _=1/Math.sqrt(a*a+c*c+l*l+u*u);a*=_,c*=_,l*=_,u*=_}}e[t]=a,e[t+1]=c,e[t+2]=l,e[t+3]=u}static multiplyQuaternionsFlat(e,t,n,i,o,r){const s=n[i],a=n[i+1],c=n[i+2],l=n[i+3],u=o[r],h=o[r+1],p=o[r+2],d=o[r+3];return e[t]=s*d+l*u+a*p-c*h,e[t+1]=a*d+l*h+c*u-s*p,e[t+2]=c*d+l*p+s*h-a*u,e[t+3]=l*d-s*u-a*h-c*p,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t){if(!(e&&e.isEuler))throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const n=e._x,i=e._y,o=e._z,r=e._order,s=Math.cos,a=Math.sin,c=s(n/2),l=s(i/2),u=s(o/2),h=a(n/2),p=a(i/2),d=a(o/2);switch(r){case"XYZ":this._x=h*l*u+c*p*d,this._y=c*p*u-h*l*d,this._z=c*l*d+h*p*u,this._w=c*l*u-h*p*d;break;case"YXZ":this._x=h*l*u+c*p*d,this._y=c*p*u-h*l*d,this._z=c*l*d-h*p*u,this._w=c*l*u+h*p*d;break;case"ZXY":this._x=h*l*u-c*p*d,this._y=c*p*u+h*l*d,this._z=c*l*d+h*p*u,this._w=c*l*u-h*p*d;break;case"ZYX":this._x=h*l*u-c*p*d,this._y=c*p*u+h*l*d,this._z=c*l*d-h*p*u,this._w=c*l*u+h*p*d;break;case"YZX":this._x=h*l*u+c*p*d,this._y=c*p*u+h*l*d,this._z=c*l*d-h*p*u,this._w=c*l*u-h*p*d;break;case"XZY":this._x=h*l*u-c*p*d,this._y=c*p*u-h*l*d,this._z=c*l*d+h*p*u,this._w=c*l*u+h*p*d;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+r)}return t!==!1&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,i=Math.sin(n);return this._x=e.x*i,this._y=e.y*i,this._z=e.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],o=t[8],r=t[1],s=t[5],a=t[9],c=t[2],l=t[6],u=t[10],h=n+s+u;if(h>0){const p=.5/Math.sqrt(h+1);this._w=.25/p,this._x=(l-a)*p,this._y=(o-c)*p,this._z=(r-i)*p}else if(n>s&&n>u){const p=2*Math.sqrt(1+n-s-u);this._w=(l-a)/p,this._x=.25*p,this._y=(i+r)/p,this._z=(o+c)/p}else if(s>u){const p=2*Math.sqrt(1+s-n-u);this._w=(o-c)/p,this._x=(i+r)/p,this._y=.25*p,this._z=(a+l)/p}else{const p=2*Math.sqrt(1+u-n-s);this._w=(r-i)/p,this._x=(o+c)/p,this._y=(a+l)/p,this._z=.25*p}return this._onChangeCallback(),this}setFromUnitVectors(e,t){const n=1e-6;let i=e.dot(t)+1;return i<n?(i=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=i):(this._x=0,this._y=-e.z,this._z=e.y,this._w=i)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=i),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(Ee.clamp(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const i=Math.min(1,t/n);return this.slerp(e,i),this}identity(){return this.set(0,0,0,1)}inverse(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e,t){return t!==void 0?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(e,t)):this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,i=e._y,o=e._z,r=e._w,s=t._x,a=t._y,c=t._z,l=t._w;return this._x=n*l+r*s+i*c-o*a,this._y=i*l+r*a+o*s-n*c,this._z=o*l+r*c+n*a-i*s,this._w=r*l-n*s-i*a-o*c,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,i=this._y,o=this._z,r=this._w;let s=r*e._w+n*e._x+i*e._y+o*e._z;if(s<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,s=-s):this.copy(e),s>=1)return this._w=r,this._x=n,this._y=i,this._z=o,this;const a=1-s*s;if(a<=Number.EPSILON){const p=1-t;return this._w=p*r+t*this._w,this._x=p*n+t*this._x,this._y=p*i+t*this._y,this._z=p*o+t*this._z,this.normalize(),this._onChangeCallback(),this}const c=Math.sqrt(a),l=Math.atan2(c,s),u=Math.sin((1-t)*l)/c,h=Math.sin(t*l)/c;return this._w=r*u+this._w*h,this._x=n*u+this._x*h,this._y=i*u+this._y*h,this._z=o*u+this._z*h,this._onChangeCallback(),this}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t){return t===void 0&&(t=0),this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e,t){return e===void 0&&(e=[]),t===void 0&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}}class A{constructor(e=0,t=0,n=0){Object.defineProperty(this,"isVector3",{value:!0}),this.x=e,this.y=t,this.z=n}set(e,t,n){return n===void 0&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e,t){return t!==void 0?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e,t){return t!==void 0?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e,t){return t!==void 0?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(e,t)):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this)}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return e&&e.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(al.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(al.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,i=this.z,o=e.elements;return this.x=o[0]*t+o[3]*n+o[6]*i,this.y=o[1]*t+o[4]*n+o[7]*i,this.z=o[2]*t+o[5]*n+o[8]*i,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,o=e.elements,r=1/(o[3]*t+o[7]*n+o[11]*i+o[15]);return this.x=(o[0]*t+o[4]*n+o[8]*i+o[12])*r,this.y=(o[1]*t+o[5]*n+o[9]*i+o[13])*r,this.z=(o[2]*t+o[6]*n+o[10]*i+o[14])*r,this}applyQuaternion(e){const t=this.x,n=this.y,i=this.z,o=e.x,r=e.y,s=e.z,a=e.w,c=a*t+r*i-s*n,l=a*n+s*t-o*i,u=a*i+o*n-r*t,h=-o*t-r*n-s*i;return this.x=c*a+h*-o+l*-s-u*-r,this.y=l*a+h*-r+u*-o-c*-s,this.z=u*a+h*-s+c*-r-l*-o,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,i=this.z,o=e.elements;return this.x=o[0]*t+o[4]*n+o[8]*i,this.y=o[1]*t+o[5]*n+o[9]*i,this.z=o[2]*t+o[6]*n+o[10]*i,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e,t){return t!==void 0?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(e,t)):this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,i=e.y,o=e.z,r=t.x,s=t.y,a=t.z;return this.x=i*a-o*s,this.y=o*r-n*a,this.z=n*s-i*r,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return Ls.copy(this).projectOnVector(e),this.sub(Ls)}reflect(e){return this.sub(Ls.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(Ee.clamp(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const i=Math.sin(t)*e;return this.x=i*Math.sin(n),this.y=Math.cos(t)*e,this.z=i*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),i=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=i,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t){return t===void 0&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e,t){return e===void 0&&(e=[]),t===void 0&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t,n){return n!==void 0&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}}const Ls=new A,al=new ht;class En{constructor(e,t){Object.defineProperty(this,"isBox3",{value:!0}),this.min=e!==void 0?e:new A(Infinity,Infinity,Infinity),this.max=t!==void 0?t:new A(-Infinity,-Infinity,-Infinity)}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){let t=Infinity,n=Infinity,i=Infinity,o=-Infinity,r=-Infinity,s=-Infinity;for(let a=0,c=e.length;a<c;a+=3){const l=e[a],u=e[a+1],h=e[a+2];l<t&&(t=l),u<n&&(n=u),h<i&&(i=h),l>o&&(o=l),u>r&&(r=u),h>s&&(s=h)}return this.min.set(t,n,i),this.max.set(o,r,s),this}setFromBufferAttribute(e){let t=Infinity,n=Infinity,i=Infinity,o=-Infinity,r=-Infinity,s=-Infinity;for(let a=0,c=e.count;a<c;a++){const l=e.getX(a),u=e.getY(a),h=e.getZ(a);l<t&&(t=l),u<n&&(n=u),h<i&&(i=h),l>o&&(o=l),u>r&&(r=u),h>s&&(s=h)}return this.min.set(t,n,i),this.max.set(o,r,s),this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=po.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e){return this.makeEmpty(),this.expandByObject(e)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=Infinity,this.max.x=this.max.y=this.max.z=-Infinity,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return e===void 0&&(console.warn("THREE.Box3: .getCenter() target is now required"),e=new A),this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return e===void 0&&(console.warn("THREE.Box3: .getSize() target is now required"),e=new A),this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e){e.updateWorldMatrix(!1,!1);const t=e.geometry;t!==void 0&&(t.boundingBox===null&&t.computeBoundingBox(),Is.copy(t.boundingBox),Is.applyMatrix4(e.matrixWorld),this.union(Is));const n=e.children;for(let i=0,o=n.length;i<o;i++)this.expandByObject(n[i]);return this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t===void 0&&(console.warn("THREE.Box3: .getParameter() target is now required"),t=new A),t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)}intersectsSphere(e){return this.clampPoint(e.center,po),po.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(fo),hr.subVectors(this.max,fo),gi.subVectors(e.a,fo),yi.subVectors(e.b,fo),vi.subVectors(e.c,fo),Mn.subVectors(yi,gi),Sn.subVectors(vi,yi),Yn.subVectors(gi,vi);let t=[0,-Mn.z,Mn.y,0,-Sn.z,Sn.y,0,-Yn.z,Yn.y,Mn.z,0,-Mn.x,Sn.z,0,-Sn.x,Yn.z,0,-Yn.x,-Mn.y,Mn.x,0,-Sn.y,Sn.x,0,-Yn.y,Yn.x,0];return Bs(t,gi,yi,vi,hr)?(t=[1,0,0,0,1,0,0,0,1],Bs(t,gi,yi,vi,hr)?(ur.crossVectors(Mn,Sn),t=[ur.x,ur.y,ur.z],Bs(t,gi,yi,vi,hr)):!1):!1}clampPoint(e,t){return t===void 0&&(console.warn("THREE.Box3: .clampPoint() target is now required"),t=new A),t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){const t=po.copy(e).clamp(this.min,this.max);return t.sub(e).length()}getBoundingSphere(e){return e===void 0&&console.error("THREE.Box3: .getBoundingSphere() target is now required"),this.getCenter(e.center),e.radius=this.getSize(po).length()*.5,e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(cn[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),cn[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),cn[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),cn[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),cn[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),cn[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),cn[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),cn[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(cn),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}function Bs(e,t,n,i,o){for(let r=0,s=e.length-3;r<=s;r+=3){Zn.fromArray(e,r);const a=o.x*Math.abs(Zn.x)+o.y*Math.abs(Zn.y)+o.z*Math.abs(Zn.z),c=t.dot(Zn),l=n.dot(Zn),u=i.dot(Zn);if(Math.max(-Math.max(c,l,u),Math.min(c,l,u))>a)return!1}return!0}const cn=[new A,new A,new A,new A,new A,new A,new A,new A],po=new A,Is=new En,gi=new A,yi=new A,vi=new A,Mn=new A,Sn=new A,Yn=new A,fo=new A,hr=new A,ur=new A,Zn=new A,lm=new En;class Tn{constructor(e,t){this.center=e!==void 0?e:new A,this.radius=t!==void 0?t:-1}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==void 0?n.copy(t):lm.setFromPoints(e).getCenter(n);let i=0;for(let o=0,r=e.length;o<r;o++)i=Math.max(i,n.distanceToSquared(e[o]));return this.radius=Math.sqrt(i),this}clone(){return new this.constructor().copy(this)}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t===void 0&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),t=new A),t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return e===void 0&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),e=new En),this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}}const ln=new A,Ns=new A,dr=new A,An=new A,zs=new A,pr=new A,Fs=new A;class mo{constructor(e,t){this.origin=e!==void 0?e:new A,this.direction=t!==void 0?t:new A(0,0,-1)}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}clone(){return new this.constructor().copy(this)}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t===void 0&&(console.warn("THREE.Ray: .at() target is now required"),t=new A),t.copy(this.direction).multiplyScalar(e).add(this.origin)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,ln)),this}closestPointToPoint(e,t){t===void 0&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),t=new A),t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=ln.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(ln.copy(this.direction).multiplyScalar(t).add(this.origin),ln.distanceToSquared(e))}distanceSqToSegment(e,t,n,i){Ns.copy(e).add(t).multiplyScalar(.5),dr.copy(t).sub(e).normalize(),An.copy(this.origin).sub(Ns);const o=e.distanceTo(t)*.5,r=-this.direction.dot(dr),s=An.dot(this.direction),a=-An.dot(dr),c=An.lengthSq(),l=Math.abs(1-r*r);let u,h,p,d;if(l>0)if(u=r*a-s,h=r*s-a,d=o*l,u>=0)if(h>=-d)if(h<=d){const m=1/l;u*=m,h*=m,p=u*(u+r*h+2*s)+h*(r*u+h+2*a)+c}else h=o,u=Math.max(0,-(r*h+s)),p=-u*u+h*(h+2*a)+c;else h=-o,u=Math.max(0,-(r*h+s)),p=-u*u+h*(h+2*a)+c;else h<=-d?(u=Math.max(0,-(-r*o+s)),h=u>0?-o:Math.min(Math.max(-o,-a),o),p=-u*u+h*(h+2*a)+c):h<=d?(u=0,h=Math.min(Math.max(-o,-a),o),p=h*(h+2*a)+c):(u=Math.max(0,-(r*o+s)),h=u>0?o:Math.min(Math.max(-o,-a),o),p=-u*u+h*(h+2*a)+c);else h=r>0?-o:o,u=Math.max(0,-(r*h+s)),p=-u*u+h*(h+2*a)+c;return n&&n.copy(this.direction).multiplyScalar(u).add(this.origin),i&&i.copy(dr).multiplyScalar(h).add(Ns),p}intersectSphere(e,t){ln.subVectors(e.center,this.origin);const n=ln.dot(this.direction),i=ln.dot(ln)-n*n,o=e.radius*e.radius;if(i>o)return null;const r=Math.sqrt(o-i),s=n-r,a=n+r;return s<0&&a<0?null:s<0?this.at(a,t):this.at(s,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);if(t===0)return!0;const n=e.normal.dot(this.direction);return n*t<0}intersectBox(e,t){let n,i,o,r,s,a;const c=1/this.direction.x,l=1/this.direction.y,u=1/this.direction.z,h=this.origin;return c>=0?(n=(e.min.x-h.x)*c,i=(e.max.x-h.x)*c):(n=(e.max.x-h.x)*c,i=(e.min.x-h.x)*c),l>=0?(o=(e.min.y-h.y)*l,r=(e.max.y-h.y)*l):(o=(e.max.y-h.y)*l,r=(e.min.y-h.y)*l),n>r||o>i?null:((o>n||n!==n)&&(n=o),(r<i||i!==i)&&(i=r),u>=0?(s=(e.min.z-h.z)*u,a=(e.max.z-h.z)*u):(s=(e.max.z-h.z)*u,a=(e.min.z-h.z)*u),n>a||s>i?null:((s>n||n!==n)&&(n=s),(a<i||i!==i)&&(i=a),i<0?null:this.at(n>=0?n:i,t)))}intersectsBox(e){return this.intersectBox(e,ln)!==null}intersectTriangle(e,t,n,i,o){zs.subVectors(t,e),pr.subVectors(n,e),Fs.crossVectors(zs,pr);let r=this.direction.dot(Fs),s;if(r>0){if(i)return null;s=1}else if(r<0)s=-1,r=-r;else return null;An.subVectors(this.origin,e);const a=s*this.direction.dot(pr.crossVectors(An,pr));if(a<0)return null;const c=s*this.direction.dot(zs.cross(An));if(c<0)return null;if(a+c>r)return null;const l=-s*An.dot(Fs);return l<0?null:this.at(l/r,o)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}}class Re{constructor(){Object.defineProperty(this,"isMatrix4",{value:!0}),this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(e,t,n,i,o,r,s,a,c,l,u,h,p,d,m,y){const v=this.elements;return v[0]=e,v[4]=t,v[8]=n,v[12]=i,v[1]=o,v[5]=r,v[9]=s,v[13]=a,v[2]=c,v[6]=l,v[10]=u,v[14]=h,v[3]=p,v[7]=d,v[11]=m,v[15]=y,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Re().fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,i=1/xi.setFromMatrixColumn(e,0).length(),o=1/xi.setFromMatrixColumn(e,1).length(),r=1/xi.setFromMatrixColumn(e,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[3]=0,t[4]=n[4]*o,t[5]=n[5]*o,t[6]=n[6]*o,t[7]=0,t[8]=n[8]*r,t[9]=n[9]*r,t[10]=n[10]*r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){e&&e.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const t=this.elements,n=e.x,i=e.y,o=e.z,r=Math.cos(n),s=Math.sin(n),a=Math.cos(i),c=Math.sin(i),l=Math.cos(o),u=Math.sin(o);if(e.order==="XYZ"){const h=r*l,p=r*u,d=s*l,m=s*u;t[0]=a*l,t[4]=-a*u,t[8]=c,t[1]=p+d*c,t[5]=h-m*c,t[9]=-s*a,t[2]=m-h*c,t[6]=d+p*c,t[10]=r*a}else if(e.order==="YXZ"){const h=a*l,p=a*u,d=c*l,m=c*u;t[0]=h+m*s,t[4]=d*s-p,t[8]=r*c,t[1]=r*u,t[5]=r*l,t[9]=-s,t[2]=p*s-d,t[6]=m+h*s,t[10]=r*a}else if(e.order==="ZXY"){const h=a*l,p=a*u,d=c*l,m=c*u;t[0]=h-m*s,t[4]=-r*u,t[8]=d+p*s,t[1]=p+d*s,t[5]=r*l,t[9]=m-h*s,t[2]=-r*c,t[6]=s,t[10]=r*a}else if(e.order==="ZYX"){const h=r*l,p=r*u,d=s*l,m=s*u;t[0]=a*l,t[4]=d*c-p,t[8]=h*c+m,t[1]=a*u,t[5]=m*c+h,t[9]=p*c-d,t[2]=-c,t[6]=s*a,t[10]=r*a}else if(e.order==="YZX"){const h=r*a,p=r*c,d=s*a,m=s*c;t[0]=a*l,t[4]=m-h*u,t[8]=d*u+p,t[1]=u,t[5]=r*l,t[9]=-s*l,t[2]=-c*l,t[6]=p*u+d,t[10]=h-m*u}else if(e.order==="XZY"){const h=r*a,p=r*c,d=s*a,m=s*c;t[0]=a*l,t[4]=-u,t[8]=c*l,t[1]=h*u+m,t[5]=r*l,t[9]=p*u-d,t[2]=d*u-p,t[6]=s*l,t[10]=m*u+h}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(hm,e,um)}lookAt(e,t,n){const i=this.elements;return Tt.subVectors(e,t),Tt.lengthSq()===0&&(Tt.z=1),Tt.normalize(),Cn.crossVectors(n,Tt),Cn.lengthSq()===0&&(Math.abs(n.z)===1?Tt.x+=1e-4:Tt.z+=1e-4,Tt.normalize(),Cn.crossVectors(n,Tt)),Cn.normalize(),fr.crossVectors(Tt,Cn),i[0]=Cn.x,i[4]=fr.x,i[8]=Tt.x,i[1]=Cn.y,i[5]=fr.y,i[9]=Tt.y,i[2]=Cn.z,i[6]=fr.z,i[10]=Tt.z,this}multiply(e,t){return t!==void 0?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(e,t)):this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,o=this.elements,r=n[0],s=n[4],a=n[8],c=n[12],l=n[1],u=n[5],h=n[9],p=n[13],d=n[2],m=n[6],y=n[10],v=n[14],g=n[3],f=n[7],w=n[11],_=n[15],M=i[0],b=i[4],P=i[8],D=i[12],B=i[1],V=i[5],N=i[9],I=i[13],L=i[2],C=i[6],S=i[10],F=i[14],k=i[3],U=i[7],Z=i[11],ne=i[15];return o[0]=r*M+s*B+a*L+c*k,o[4]=r*b+s*V+a*C+c*U,o[8]=r*P+s*N+a*S+c*Z,o[12]=r*D+s*I+a*F+c*ne,o[1]=l*M+u*B+h*L+p*k,o[5]=l*b+u*V+h*C+p*U,o[9]=l*P+u*N+h*S+p*Z,o[13]=l*D+u*I+h*F+p*ne,o[2]=d*M+m*B+y*L+v*k,o[6]=d*b+m*V+y*C+v*U,o[10]=d*P+m*N+y*S+v*Z,o[14]=d*D+m*I+y*F+v*ne,o[3]=g*M+f*B+w*L+_*k,o[7]=g*b+f*V+w*C+_*U,o[11]=g*P+f*N+w*S+_*Z,o[15]=g*D+f*I+w*F+_*ne,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],i=e[8],o=e[12],r=e[1],s=e[5],a=e[9],c=e[13],l=e[2],u=e[6],h=e[10],p=e[14],d=e[3],m=e[7],y=e[11],v=e[15];return d*(+o*a*u-i*c*u-o*s*h+n*c*h+i*s*p-n*a*p)+m*(+t*a*p-t*c*h+o*r*h-i*r*p+i*c*l-o*a*l)+y*(+t*c*u-t*s*p-o*r*u+n*r*p+o*s*l-n*c*l)+v*(-i*s*l-t*a*u+t*s*h+i*r*u-n*r*h+n*a*l)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const i=this.elements;return e.isVector3?(i[12]=e.x,i[13]=e.y,i[14]=e.z):(i[12]=e,i[13]=t,i[14]=n),this}getInverse(e,t){t!==void 0&&console.warn("THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.");const n=this.elements,i=e.elements,o=i[0],r=i[1],s=i[2],a=i[3],c=i[4],l=i[5],u=i[6],h=i[7],p=i[8],d=i[9],m=i[10],y=i[11],v=i[12],g=i[13],f=i[14],w=i[15],_=d*f*h-g*m*h+g*u*y-l*f*y-d*u*w+l*m*w,M=v*m*h-p*f*h-v*u*y+c*f*y+p*u*w-c*m*w,b=p*g*h-v*d*h+v*l*y-c*g*y-p*l*w+c*d*w,P=v*d*u-p*g*u-v*l*m+c*g*m+p*l*f-c*d*f,D=o*_+r*M+s*b+a*P;if(D===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const B=1/D;return n[0]=_*B,n[1]=(g*m*a-d*f*a-g*s*y+r*f*y+d*s*w-r*m*w)*B,n[2]=(l*f*a-g*u*a+g*s*h-r*f*h-l*s*w+r*u*w)*B,n[3]=(d*u*a-l*m*a-d*s*h+r*m*h+l*s*y-r*u*y)*B,n[4]=M*B,n[5]=(p*f*a-v*m*a+v*s*y-o*f*y-p*s*w+o*m*w)*B,n[6]=(v*u*a-c*f*a-v*s*h+o*f*h+c*s*w-o*u*w)*B,n[7]=(c*m*a-p*u*a+p*s*h-o*m*h-c*s*y+o*u*y)*B,n[8]=b*B,n[9]=(v*d*a-p*g*a-v*r*y+o*g*y+p*r*w-o*d*w)*B,n[10]=(c*g*a-v*l*a+v*r*h-o*g*h-c*r*w+o*l*w)*B,n[11]=(p*l*a-c*d*a-p*r*h+o*d*h+c*r*y-o*l*y)*B,n[12]=P*B,n[13]=(p*g*s-v*d*s+v*r*m-o*g*m-p*r*f+o*d*f)*B,n[14]=(v*l*s-c*g*s-v*r*u+o*g*u+c*r*f-o*l*f)*B,n[15]=(c*d*s-p*l*s+p*r*u-o*d*u-c*r*m+o*l*m)*B,this}scale(e){const t=this.elements,n=e.x,i=e.y,o=e.z;return t[0]*=n,t[4]*=i,t[8]*=o,t[1]*=n,t[5]*=i,t[9]*=o,t[2]*=n,t[6]*=i,t[10]*=o,t[3]*=n,t[7]*=i,t[11]*=o,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))}makeTranslation(e,t,n){return this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),i=Math.sin(t),o=1-n,r=e.x,s=e.y,a=e.z,c=o*r,l=o*s;return this.set(c*r+n,c*s-i*a,c*a+i*s,0,c*s+i*a,l*s+n,l*a-i*r,0,c*a-i*s,l*a+i*r,o*a*a+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n){return this.set(1,t,n,0,e,1,n,0,e,t,1,0,0,0,0,1),this}compose(e,t,n){const i=this.elements,o=t._x,r=t._y,s=t._z,a=t._w,c=o+o,l=r+r,u=s+s,h=o*c,p=o*l,d=o*u,m=r*l,y=r*u,v=s*u,g=a*c,f=a*l,w=a*u,_=n.x,M=n.y,b=n.z;return i[0]=(1-(m+v))*_,i[1]=(p+w)*_,i[2]=(d-f)*_,i[3]=0,i[4]=(p-w)*M,i[5]=(1-(h+v))*M,i[6]=(y+g)*M,i[7]=0,i[8]=(d+f)*b,i[9]=(y-g)*b,i[10]=(1-(h+m))*b,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this}decompose(e,t,n){const i=this.elements;let o=xi.set(i[0],i[1],i[2]).length();const r=xi.set(i[4],i[5],i[6]).length(),s=xi.set(i[8],i[9],i[10]).length(),a=this.determinant();a<0&&(o=-o),e.x=i[12],e.y=i[13],e.z=i[14],Ot.copy(this);const c=1/o,l=1/r,u=1/s;return Ot.elements[0]*=c,Ot.elements[1]*=c,Ot.elements[2]*=c,Ot.elements[4]*=l,Ot.elements[5]*=l,Ot.elements[6]*=l,Ot.elements[8]*=u,Ot.elements[9]*=u,Ot.elements[10]*=u,t.setFromRotationMatrix(Ot),n.x=o,n.y=r,n.z=s,this}makePerspective(e,t,n,i,o,r){r===void 0&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const s=this.elements,a=2*o/(t-e),c=2*o/(n-i),l=(t+e)/(t-e),u=(n+i)/(n-i),h=-(r+o)/(r-o),p=-2*r*o/(r-o);return s[0]=a,s[4]=0,s[8]=l,s[12]=0,s[1]=0,s[5]=c,s[9]=u,s[13]=0,s[2]=0,s[6]=0,s[10]=h,s[14]=p,s[3]=0,s[7]=0,s[11]=-1,s[15]=0,this}makeOrthographic(e,t,n,i,o,r){const s=this.elements,a=1/(t-e),c=1/(n-i),l=1/(r-o),u=(t+e)*a,h=(n+i)*c,p=(r+o)*l;return s[0]=2*a,s[4]=0,s[8]=0,s[12]=-u,s[1]=0,s[5]=2*c,s[9]=0,s[13]=-h,s[2]=0,s[6]=0,s[10]=-2*l,s[14]=-p,s[3]=0,s[7]=0,s[11]=0,s[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<16;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t){t===void 0&&(t=0);for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e,t){e===void 0&&(e=[]),t===void 0&&(t=0);const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}const xi=new A,Ot=new Re,hm=new A(0,0,0),um=new A(1,1,1),Cn=new A,fr=new A,Tt=new A;class bi{constructor(e=0,t=0,n=0,i=bi.DefaultOrder){Object.defineProperty(this,"isEuler",{value:!0}),this._x=e,this._y=t,this._z=n,this._order=i}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._order=i||this._order,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t,n){const i=Ee.clamp,o=e.elements,r=o[0],s=o[4],a=o[8],c=o[1],l=o[5],u=o[9],h=o[2],p=o[6],d=o[10];t=t||this._order;switch(t){case"XYZ":this._y=Math.asin(i(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-u,d),this._z=Math.atan2(-s,r)):(this._x=Math.atan2(p,l),this._z=0);break;case"YXZ":this._x=Math.asin(-i(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(a,d),this._z=Math.atan2(c,l)):(this._y=Math.atan2(-h,r),this._z=0);break;case"ZXY":this._x=Math.asin(i(p,-1,1)),Math.abs(p)<.9999999?(this._y=Math.atan2(-h,d),this._z=Math.atan2(-s,l)):(this._y=0,this._z=Math.atan2(c,r));break;case"ZYX":this._y=Math.asin(-i(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(p,d),this._z=Math.atan2(c,r)):(this._x=0,this._z=Math.atan2(-s,l));break;case"YZX":this._z=Math.asin(i(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(-u,l),this._y=Math.atan2(-h,r)):(this._x=0,this._y=Math.atan2(a,d));break;case"XZY":this._z=Math.asin(-i(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(p,l),this._y=Math.atan2(a,r)):(this._x=Math.atan2(-u,d),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n!==!1&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return cl.makeRotationFromQuaternion(e),this.setFromRotationMatrix(cl,t,n)}setFromVector3(e,t){return this.set(e.x,e.y,e.z,t||this._order)}reorder(e){return ll.setFromEuler(this),this.setFromQuaternion(ll,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e,t){return e===void 0&&(e=[]),t===void 0&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}toVector3(e){return e?e.set(this._x,this._y,this._z):new A(this._x,this._y,this._z)}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}}bi.DefaultOrder="XYZ";bi.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];const cl=new Re,ll=new ht;class hl{constructor(){this.mask=1|0}set(e){this.mask=1<<e|0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=4294967295|0}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}}let dm=0;const ul=new A,wi=new ht,hn=new Re,mr=new A,go=new A,pm=new A,fm=new ht,dl=new A(1,0,0),pl=new A(0,1,0),fl=new A(0,0,1),mm={type:"added"},gm={type:"removed"};function he(){Object.defineProperty(this,"id",{value:dm++}),this.uuid=Ee.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=he.DefaultUp.clone();const e=new A,t=new bi,n=new ht,i=new A(1,1,1);function o(){n.setFromEuler(t,!1)}function r(){t.setFromQuaternion(n,void 0,!1)}t._onChange(o),n._onChange(r),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new Re},normalMatrix:{value:new Mt}}),this.matrix=new Re,this.matrixWorld=new Re,this.matrixAutoUpdate=he.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new hl,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}he.DefaultUp=new A(0,1,0);he.DefaultMatrixAutoUpdate=!0;he.prototype=Object.assign(Object.create(an.prototype),{constructor:he,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix4:function(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(e){return this.quaternion.premultiply(e),this},setRotationFromAxisAngle:function(e,t){this.quaternion.setFromAxisAngle(e,t)},setRotationFromEuler:function(e){this.quaternion.setFromEuler(e,!0)},setRotationFromMatrix:function(e){this.quaternion.setFromRotationMatrix(e)},setRotationFromQuaternion:function(e){this.quaternion.copy(e)},rotateOnAxis:function(e,t){return wi.setFromAxisAngle(e,t),this.quaternion.multiply(wi),this},rotateOnWorldAxis:function(e,t){return wi.setFromAxisAngle(e,t),this.quaternion.premultiply(wi),this},rotateX:function(e){return this.rotateOnAxis(dl,e)},rotateY:function(e){return this.rotateOnAxis(pl,e)},rotateZ:function(e){return this.rotateOnAxis(fl,e)},translateOnAxis:function(e,t){return ul.copy(e).applyQuaternion(this.quaternion),this.position.add(ul.multiplyScalar(t)),this},translateX:function(e){return this.translateOnAxis(dl,e)},translateY:function(e){return this.translateOnAxis(pl,e)},translateZ:function(e){return this.translateOnAxis(fl,e)},localToWorld:function(e){return e.applyMatrix4(this.matrixWorld)},worldToLocal:function(e){return e.applyMatrix4(hn.getInverse(this.matrixWorld))},lookAt:function(e,t,n){e.isVector3?mr.copy(e):mr.set(e,t,n);const i=this.parent;this.updateWorldMatrix(!0,!1),go.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?hn.lookAt(go,mr,this.up):hn.lookAt(mr,go,this.up),this.quaternion.setFromRotationMatrix(hn),i&&(hn.extractRotation(i.matrixWorld),wi.setFromRotationMatrix(hn),this.quaternion.premultiply(wi.inverse()))},add:function(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.parent!==null&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(mm)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)},remove:function(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(gm)),this},attach:function(e){return this.updateWorldMatrix(!0,!1),hn.getInverse(this.matrixWorld),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),hn.multiply(e.parent.matrixWorld)),e.applyMatrix4(hn),e.updateWorldMatrix(!1,!1),this.add(e),this},getObjectById:function(e){return this.getObjectByProperty("id",e)},getObjectByName:function(e){return this.getObjectByProperty("name",e)},getObjectByProperty:function(e,t){if(this[e]===t)return this;for(let n=0,i=this.children.length;n<i;n++){const o=this.children[n],r=o.getObjectByProperty(e,t);if(r!==void 0)return r}return},getWorldPosition:function(e){return e===void 0&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),e=new A),this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(e){return e===void 0&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),e=new ht),this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(go,e,pm),e},getWorldScale:function(e){return e===void 0&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),e=new A),this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(go,fm,e),e},getWorldDirection:function(e){e===void 0&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),e=new A),this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()},raycast:function(){},traverse:function(e){e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverse(e)},traverseVisible:function(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverseVisible(e)},traverseAncestors:function(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].updateMatrixWorld(e)},updateWorldMatrix:function(e,t){const n=this.parent;if(e===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),t===!0){const i=this.children;for(let o=0,r=i.length;o<r;o++)i[o].updateWorldMatrix(!1,!0)}},toJSON:function(e){const t=e===void 0||typeof e=="string",n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),JSON.stringify(this.userData)!=="{}"&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON());function o(s,a){return s[a.uuid]===void 0&&(s[a.uuid]=a.toJSON(e)),a.uuid}if(this.isMesh||this.isLine||this.isPoints){i.geometry=o(e.geometries,this.geometry);const s=this.geometry.parameters;if(s!==void 0&&s.shapes!==void 0){const a=s.shapes;if(Array.isArray(a))for(let c=0,l=a.length;c<l;c++){const u=a[c];o(e.shapes,u)}else o(e.shapes,a)}}if(this.material!==void 0)if(Array.isArray(this.material)){const s=[];for(let a=0,c=this.material.length;a<c;a++)s.push(o(e.materials,this.material[a]));i.material=s}else i.material=o(e.materials,this.material);if(this.children.length>0){i.children=[];for(let s=0;s<this.children.length;s++)i.children.push(this.children[s].toJSON(e).object)}if(t){const s=r(e.geometries),a=r(e.materials),c=r(e.textures),l=r(e.images),u=r(e.shapes);s.length>0&&(n.geometries=s),a.length>0&&(n.materials=a),c.length>0&&(n.textures=c),l.length>0&&(n.images=l),u.length>0&&(n.shapes=u)}return n.object=i,n;function r(s){const a=[];for(const c in s){const l=s[c];delete l.metadata,a.push(l)}return a}},clone:function(e){return new this.constructor().copy(this,e)},copy:function(e,t){if(t===void 0&&(t=!0),this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let n=0;n<e.children.length;n++){const i=e.children[n];this.add(i.clone())}return this}});const Ds=new A,ym=new A,vm=new Mt;class un{constructor(e,t){Object.defineProperty(this,"isPlane",{value:!0}),this.normal=e!==void 0?e:new A(1,0,0),this.constant=t!==void 0?t:0}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,i){return this.normal.set(e,t,n),this.constant=i,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const i=Ds.subVectors(n,t).cross(ym.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(i,e),this}clone(){return new this.constructor().copy(this)}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t===void 0&&(console.warn("THREE.Plane: .projectPoint() target is now required"),t=new A),t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)}intersectLine(e,t){t===void 0&&(console.warn("THREE.Plane: .intersectLine() target is now required"),t=new A);const n=e.delta(Ds),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):void 0;const o=-(e.start.dot(this.normal)+this.constant)/i;return o<0||o>1?void 0:t.copy(n).multiplyScalar(o).add(e.start)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e===void 0&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),e=new A),e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||vm.getNormalMatrix(e),i=this.coplanarPoint(Ds).applyMatrix4(e),o=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(o),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}}const kt=new A,dn=new A,Os=new A,pn=new A,_i=new A,Mi=new A,ml=new A,ks=new A,Gs=new A,Vs=new A;class mt{constructor(e,t,n){this.a=e!==void 0?e:new A,this.b=t!==void 0?t:new A,this.c=n!==void 0?n:new A}static getNormal(e,t,n,i){i===void 0&&(console.warn("THREE.Triangle: .getNormal() target is now required"),i=new A),i.subVectors(n,t),kt.subVectors(e,t),i.cross(kt);const o=i.lengthSq();return o>0?i.multiplyScalar(1/Math.sqrt(o)):i.set(0,0,0)}static getBarycoord(e,t,n,i,o){kt.subVectors(i,t),dn.subVectors(n,t),Os.subVectors(e,t);const r=kt.dot(kt),s=kt.dot(dn),a=kt.dot(Os),c=dn.dot(dn),l=dn.dot(Os),u=r*c-s*s;if(o===void 0&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),o=new A),u===0)return o.set(-2,-1,-1);const h=1/u,p=(c*a-s*l)*h,d=(r*l-s*a)*h;return o.set(1-p-d,d,p)}static containsPoint(e,t,n,i){return this.getBarycoord(e,t,n,i,pn),pn.x>=0&&pn.y>=0&&pn.x+pn.y<=1}static getUV(e,t,n,i,o,r,s,a){return this.getBarycoord(e,t,n,i,pn),a.set(0,0),a.addScaledVector(o,pn.x),a.addScaledVector(r,pn.y),a.addScaledVector(s,pn.z),a}static isFrontFacing(e,t,n,i){return kt.subVectors(n,t),dn.subVectors(e,t),kt.cross(dn).dot(i)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,i){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[i]),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return kt.subVectors(this.c,this.b),dn.subVectors(this.a,this.b),kt.cross(dn).length()*.5}getMidpoint(e){return e===void 0&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),e=new A),e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return mt.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e===void 0&&(console.warn("THREE.Triangle: .getPlane() target is now required"),e=new un),e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return mt.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,n,i,o){return mt.getUV(e,this.a,this.b,this.c,t,n,i,o)}containsPoint(e){return mt.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return mt.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){t===void 0&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),t=new A);const n=this.a,i=this.b,o=this.c;let r,s;_i.subVectors(i,n),Mi.subVectors(o,n),ks.subVectors(e,n);const a=_i.dot(ks),c=Mi.dot(ks);if(a<=0&&c<=0)return t.copy(n);Gs.subVectors(e,i);const l=_i.dot(Gs),u=Mi.dot(Gs);if(l>=0&&u<=l)return t.copy(i);const h=a*u-l*c;if(h<=0&&a>=0&&l<=0)return r=a/(a-l),t.copy(n).addScaledVector(_i,r);Vs.subVectors(e,o);const p=_i.dot(Vs),d=Mi.dot(Vs);if(d>=0&&p<=d)return t.copy(o);const m=p*c-a*d;if(m<=0&&c>=0&&d<=0)return s=c/(c-d),t.copy(n).addScaledVector(Mi,s);const y=l*d-p*u;if(y<=0&&u-l>=0&&p-d>=0)return ml.subVectors(o,i),s=(u-l)/(u-l+(p-d)),t.copy(i).addScaledVector(ml,s);const v=1/(y+m+h);return r=m*v,s=h*v,t.copy(n).addScaledVector(_i,r).addScaledVector(Mi,s)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}const gl={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Gt={h:0,s:0,l:0},gr={h:0,s:0,l:0};function Us(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+(t-e)*6*n:n<1/2?t:n<2/3?e+(t-e)*6*(2/3-n):e}function Hs(e){return e<.04045?e*.0773993808:Math.pow(e*.9478672986+.0521327014,2.4)}function Ws(e){return e<.0031308?e*12.92:1.055*Math.pow(e,.41666)-.055}class ue{constructor(e,t,n){return Object.defineProperty(this,"isColor",{value:!0}),t===void 0&&n===void 0?this.set(e):this.setRGB(e,t,n)}set(e){return e&&e.isColor?this.copy(e):typeof e=="number"?this.setHex(e):typeof e=="string"&&this.setStyle(e),this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,this}setRGB(e,t,n){return this.r=e,this.g=t,this.b=n,this}setHSL(e,t,n){if(e=Ee.euclideanModulo(e,1),t=Ee.clamp(t,0,1),n=Ee.clamp(n,0,1),t===0)this.r=this.g=this.b=n;else{const i=n<=.5?n*(1+t):n+t-n*t,o=2*n-i;this.r=Us(o,i,e+1/3),this.g=Us(o,i,e),this.b=Us(o,i,e-1/3)}return this}setStyle(e){function t(i){if(i===void 0)return;parseFloat(i)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let n;if(n=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(e)){let i;const o=n[1],r=n[2];switch(o){case"rgb":case"rgba":if(i=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(r))return this.r=Math.min(255,parseInt(i[1],10))/255,this.g=Math.min(255,parseInt(i[2],10))/255,this.b=Math.min(255,parseInt(i[3],10))/255,t(i[5]),this;if(i=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(r))return this.r=Math.min(100,parseInt(i[1],10))/100,this.g=Math.min(100,parseInt(i[2],10))/100,this.b=Math.min(100,parseInt(i[3],10))/100,t(i[5]),this;break;case"hsl":case"hsla":if(i=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(r)){const s=parseFloat(i[1])/360,a=parseInt(i[2],10)/100,c=parseInt(i[3],10)/100;return t(i[5]),this.setHSL(s,a,c)}break}}else if(n=/^\#([A-Fa-f0-9]+)$/.exec(e)){const i=n[1],o=i.length;if(o===3)return this.r=parseInt(i.charAt(0)+i.charAt(0),16)/255,this.g=parseInt(i.charAt(1)+i.charAt(1),16)/255,this.b=parseInt(i.charAt(2)+i.charAt(2),16)/255,this;if(o===6)return this.r=parseInt(i.charAt(0)+i.charAt(1),16)/255,this.g=parseInt(i.charAt(2)+i.charAt(3),16)/255,this.b=parseInt(i.charAt(4)+i.charAt(5),16)/255,this}return e&&e.length>0?this.setColorName(e):this}setColorName(e){const t=gl[e];return t!==void 0?this.setHex(t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copyGammaToLinear(e,t){return t===void 0&&(t=2),this.r=Math.pow(e.r,t),this.g=Math.pow(e.g,t),this.b=Math.pow(e.b,t),this}copyLinearToGamma(e,t){t===void 0&&(t=2);const n=t>0?1/t:1;return this.r=Math.pow(e.r,n),this.g=Math.pow(e.g,n),this.b=Math.pow(e.b,n),this}convertGammaToLinear(e){return this.copyGammaToLinear(this,e),this}convertLinearToGamma(e){return this.copyLinearToGamma(this,e),this}copySRGBToLinear(e){return this.r=Hs(e.r),this.g=Hs(e.g),this.b=Hs(e.b),this}copyLinearToSRGB(e){return this.r=Ws(e.r),this.g=Ws(e.g),this.b=Ws(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return this.r*255<<16^this.g*255<<8^this.b*255<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(e){e===void 0&&(console.warn("THREE.Color: .getHSL() target is now required"),e={h:0,s:0,l:0});const t=this.r,n=this.g,i=this.b,o=Math.max(t,n,i),r=Math.min(t,n,i);let s,a;const c=(r+o)/2;if(r===o)s=0,a=0;else{const l=o-r;a=c<=.5?l/(o+r):l/(2-o-r);switch(o){case t:s=(n-i)/l+(n<i?6:0);break;case n:s=(i-t)/l+2;break;case i:s=(t-n)/l+4;break}s/=6}return e.h=s,e.s=a,e.l=c,e}getStyle(){return"rgb("+(this.r*255|0)+","+(this.g*255|0)+","+(this.b*255|0)+")"}offsetHSL(e,t,n){return this.getHSL(Gt),Gt.h+=e,Gt.s+=t,Gt.l+=n,this.setHSL(Gt.h,Gt.s,Gt.l),this}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpHSL(e,t){this.getHSL(Gt),e.getHSL(gr);const n=Ee.lerp(Gt.h,gr.h,t),i=Ee.lerp(Gt.s,gr.s,t),o=Ee.lerp(Gt.l,gr.l,t);return this.setHSL(n,i,o),this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t){return t===void 0&&(t=0),this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e,t){return e===void 0&&(e=[]),t===void 0&&(t=0),e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),e.normalized===!0&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}ue.NAMES=gl;ue.prototype.r=1;ue.prototype.g=1;ue.prototype.b=1;class js{constructor(e,t,n,i,o,r){this.a=e,this.b=t,this.c=n,this.normal=i&&i.isVector3?i:new A,this.vertexNormals=Array.isArray(i)?i:[],this.color=o&&o.isColor?o:new ue,this.vertexColors=Array.isArray(o)?o:[],this.materialIndex=r!==void 0?r:0}clone(){return new this.constructor().copy(this)}copy(e){this.a=e.a,this.b=e.b,this.c=e.c,this.normal.copy(e.normal),this.color.copy(e.color),this.materialIndex=e.materialIndex;for(let t=0,n=e.vertexNormals.length;t<n;t++)this.vertexNormals[t]=e.vertexNormals[t].clone();for(let t=0,n=e.vertexColors.length;t<n;t++)this.vertexColors[t]=e.vertexColors[t].clone();return this}}let xm=0;function ve(){Object.defineProperty(this,"id",{value:xm++}),this.uuid=Ee.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.blending=ao,this.side=Ko,this.flatShading=!1,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=Fc,this.blendDst=Dc,this.blendEquation=li,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=xs,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=am,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Ps,this.stencilZFail=Ps,this.stencilZPass=Ps,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0}ve.prototype=Object.assign(Object.create(an.prototype),{constructor:ve,isMaterial:!0,onBeforeCompile:function(){},customProgramCacheKey:function(){return this.onBeforeCompile.toString()},setValues:function(e){if(e===void 0)return;for(const t in e){const n=e[t];if(n===void 0){console.warn("THREE.Material: '"+t+"' parameter is undefined.");continue}if(t==="shading"){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=n===Pc;continue}const i=this[t];if(i===void 0){console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.");continue}i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[t]=n}},toJSON:function(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen&&this.sheen.isColor&&(n.sheen=this.sheen.getHex()),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,n.reflectivity=this.reflectivity,n.refractionRatio=this.refractionRatio,this.combine!==void 0&&(n.combine=this.combine),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity)),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),this.size!==void 0&&(n.size=this.size),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==ao&&(n.blending=this.blending),this.flatShading===!0&&(n.flatShading=this.flatShading),this.side!==Ko&&(n.side=this.side),this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,this.rotation&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.morphTargets===!0&&(n.morphTargets=!0),this.morphNormals===!0&&(n.morphNormals=!0),this.skinning===!0&&(n.skinning=!0),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),JSON.stringify(this.userData)!=="{}"&&(n.userData=this.userData);function i(o){const r=[];for(const s in o){const a=o[s];delete a.metadata,r.push(a)}return r}if(t){const o=i(e.textures),r=i(e.images);o.length>0&&(n.textures=o),r.length>0&&(n.images=r)}return n},clone:function(){return new this.constructor().copy(this)},copy:function(e){this.name=e.name,this.fog=e.fog,this.blending=e.blending,this.side=e.side,this.flatShading=e.flatShading,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const i=t.length;n=new Array(i);for(let o=0;o!==i;++o)n[o]=t[o].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.premultipliedAlpha=e.premultipliedAlpha,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this},dispose:function(){this.dispatchEvent({type:"dispose"})}});Object.defineProperty(ve.prototype,"needsUpdate",{set:function(e){e===!0&&this.version++}});function Jn(e){ve.call(this),this.type="MeshBasicMaterial",this.color=new ue(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=er,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.setValues(e)}Jn.prototype=Object.create(ve.prototype);Jn.prototype.constructor=Jn;Jn.prototype.isMeshBasicMaterial=!0;Jn.prototype.copy=function(e){return ve.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this};const Xe=new A,yr=new X;function Te(e,t,n){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=n===!0,this.usage=cr,this.updateRange={offset:0,count:-1},this.version=0}Object.defineProperty(Te.prototype,"needsUpdate",{set:function(e){e===!0&&this.version++}});Object.assign(Te.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setUsage:function(e){return this.usage=e,this},copy:function(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this},copyAt:function(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let i=0,o=this.itemSize;i<o;i++)this.array[e+i]=t.array[n+i];return this},copyArray:function(e){return this.array.set(e),this},copyColorsArray:function(e){const t=this.array;let n=0;for(let i=0,o=e.length;i<o;i++){let r=e[i];r===void 0&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),r=new ue),t[n++]=r.r,t[n++]=r.g,t[n++]=r.b}return this},copyVector2sArray:function(e){const t=this.array;let n=0;for(let i=0,o=e.length;i<o;i++){let r=e[i];r===void 0&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i),r=new X),t[n++]=r.x,t[n++]=r.y}return this},copyVector3sArray:function(e){const t=this.array;let n=0;for(let i=0,o=e.length;i<o;i++){let r=e[i];r===void 0&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),r=new A),t[n++]=r.x,t[n++]=r.y,t[n++]=r.z}return this},copyVector4sArray:function(e){const t=this.array;let n=0;for(let i=0,o=e.length;i<o;i++){let r=e[i];r===void 0&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i),r=new Ve),t[n++]=r.x,t[n++]=r.y,t[n++]=r.z,t[n++]=r.w}return this},applyMatrix3:function(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)yr.fromBufferAttribute(this,t),yr.applyMatrix3(e),this.setXY(t,yr.x,yr.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)Xe.fromBufferAttribute(this,t),Xe.applyMatrix3(e),this.setXYZ(t,Xe.x,Xe.y,Xe.z);return this},applyMatrix4:function(e){for(let t=0,n=this.count;t<n;t++)Xe.x=this.getX(t),Xe.y=this.getY(t),Xe.z=this.getZ(t),Xe.applyMatrix4(e),this.setXYZ(t,Xe.x,Xe.y,Xe.z);return this},applyNormalMatrix:function(e){for(let t=0,n=this.count;t<n;t++)Xe.x=this.getX(t),Xe.y=this.getY(t),Xe.z=this.getZ(t),Xe.applyNormalMatrix(e),this.setXYZ(t,Xe.x,Xe.y,Xe.z);return this},transformDirection:function(e){for(let t=0,n=this.count;t<n;t++)Xe.x=this.getX(t),Xe.y=this.getY(t),Xe.z=this.getZ(t),Xe.transformDirection(e),this.setXYZ(t,Xe.x,Xe.y,Xe.z);return this},set:function(e,t){return t===void 0&&(t=0),this.array.set(e,t),this},getX:function(e){return this.array[e*this.itemSize]},setX:function(e,t){return this.array[e*this.itemSize]=t,this},getY:function(e){return this.array[e*this.itemSize+1]},setY:function(e,t){return this.array[e*this.itemSize+1]=t,this},getZ:function(e){return this.array[e*this.itemSize+2]},setZ:function(e,t){return this.array[e*this.itemSize+2]=t,this},getW:function(e){return this.array[e*this.itemSize+3]},setW:function(e,t){return this.array[e*this.itemSize+3]=t,this},setXY:function(e,t,n){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this},setXYZ:function(e,t,n,i){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this},setXYZW:function(e,t,n,i,o){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this.array[e+3]=o,this},onUpload:function(e){return this.onUploadCallback=e,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)},toJSON:function(){return{itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized}}});function qs(e,t,n){Te.call(this,new Int8Array(e),t,n)}qs.prototype=Object.create(Te.prototype);qs.prototype.constructor=qs;function Xs(e,t,n){Te.call(this,new Uint8Array(e),t,n)}Xs.prototype=Object.create(Te.prototype);Xs.prototype.constructor=Xs;function Ys(e,t,n){Te.call(this,new Uint8ClampedArray(e),t,n)}Ys.prototype=Object.create(Te.prototype);Ys.prototype.constructor=Ys;function Zs(e,t,n){Te.call(this,new Int16Array(e),t,n)}Zs.prototype=Object.create(Te.prototype);Zs.prototype.constructor=Zs;function yo(e,t,n){Te.call(this,new Uint16Array(e),t,n)}yo.prototype=Object.create(Te.prototype);yo.prototype.constructor=yo;function Js(e,t,n){Te.call(this,new Int32Array(e),t,n)}Js.prototype=Object.create(Te.prototype);Js.prototype.constructor=Js;function vo(e,t,n){Te.call(this,new Uint32Array(e),t,n)}vo.prototype=Object.create(Te.prototype);vo.prototype.constructor=vo;function Pe(e,t,n){Te.call(this,new Float32Array(e),t,n)}Pe.prototype=Object.create(Te.prototype);Pe.prototype.constructor=Pe;function Qs(e,t,n){Te.call(this,new Float64Array(e),t,n)}Qs.prototype=Object.create(Te.prototype);Qs.prototype.constructor=Qs;class bm{constructor(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}computeGroups(e){const t=[];let n,i,o;const r=e.faces;for(i=0;i<r.length;i++){const s=r[i];s.materialIndex!==o&&(o=s.materialIndex,n!==void 0&&(n.count=i*3-n.start,t.push(n)),n={start:i*3,materialIndex:o})}n!==void 0&&(n.count=i*3-n.start,t.push(n)),this.groups=t}fromGeometry(e){const t=e.faces,n=e.vertices,i=e.faceVertexUvs,o=i[0]&&i[0].length>0,r=i[1]&&i[1].length>0,s=e.morphTargets,a=s.length;let c;if(a>0){c=[];for(let v=0;v<a;v++)c[v]={name:s[v].name,data:[]};this.morphTargets.position=c}const l=e.morphNormals,u=l.length;let h;if(u>0){h=[];for(let v=0;v<u;v++)h[v]={name:l[v].name,data:[]};this.morphTargets.normal=h}const p=e.skinIndices,d=e.skinWeights,m=p.length===n.length,y=d.length===n.length;n.length>0&&t.length===0&&console.error("THREE.DirectGeometry: Faceless geometries are not supported.");for(let v=0;v<t.length;v++){const g=t[v];this.vertices.push(n[g.a],n[g.b],n[g.c]);const f=g.vertexNormals;if(f.length===3)this.normals.push(f[0],f[1],f[2]);else{const _=g.normal;this.normals.push(_,_,_)}const w=g.vertexColors;if(w.length===3)this.colors.push(w[0],w[1],w[2]);else{const _=g.color;this.colors.push(_,_,_)}if(o===!0){const _=i[0][v];_!==void 0?this.uvs.push(_[0],_[1],_[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",v),this.uvs.push(new X,new X,new X))}if(r===!0){const _=i[1][v];_!==void 0?this.uvs2.push(_[0],_[1],_[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",v),this.uvs2.push(new X,new X,new X))}for(let _=0;_<a;_++){const M=s[_].vertices;c[_].data.push(M[g.a],M[g.b],M[g.c])}for(let _=0;_<u;_++){const M=l[_].vertexNormals[v];h[_].data.push(M.a,M.b,M.c)}m&&this.skinIndices.push(p[g.a],p[g.b],p[g.c]),y&&this.skinWeights.push(d[g.a],d[g.b],d[g.c])}return this.computeGroups(e),this.verticesNeedUpdate=e.verticesNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),this}}function yl(e){if(e.length===0)return-Infinity;let t=e[0];for(let n=1,i=e.length;n<i;++n)e[n]>t&&(t=e[n]);return t}let wm=1;const jt=new Re,Ks=new he,Si=new A,At=new En,xo=new En,st=new A;function De(){Object.defineProperty(this,"id",{value:wm+=2}),this.uuid=Ee.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:Infinity},this.userData={}}De.prototype=Object.assign(Object.create(an.prototype),{constructor:De,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(e){return Array.isArray(e)?this.index=new(yl(e)>65535?vo:yo)(e,1):this.index=e,this},getAttribute:function(e){return this.attributes[e]},setAttribute:function(e,t){return this.attributes[e]=t,this},deleteAttribute:function(e){return delete this.attributes[e],this},addGroup:function(e,t,n){this.groups.push({start:e,count:t,materialIndex:n!==void 0?n:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(e,t){this.drawRange.start=e,this.drawRange.count=t},applyMatrix4:function(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const o=new Mt().getNormalMatrix(e);n.applyNormalMatrix(o),n.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(e),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this},rotateX:function(e){return jt.makeRotationX(e),this.applyMatrix4(jt),this},rotateY:function(e){return jt.makeRotationY(e),this.applyMatrix4(jt),this},rotateZ:function(e){return jt.makeRotationZ(e),this.applyMatrix4(jt),this},translate:function(e,t,n){return jt.makeTranslation(e,t,n),this.applyMatrix4(jt),this},scale:function(e,t,n){return jt.makeScale(e,t,n),this.applyMatrix4(jt),this},lookAt:function(e){return Ks.lookAt(e),Ks.updateMatrix(),this.applyMatrix4(Ks.matrix),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(Si).negate(),this.translate(Si.x,Si.y,Si.z),this},setFromObject:function(e){const t=e.geometry;if(e.isPoints||e.isLine){const n=new Pe(t.vertices.length*3,3),i=new Pe(t.colors.length*3,3);if(this.setAttribute("position",n.copyVector3sArray(t.vertices)),this.setAttribute("color",i.copyColorsArray(t.colors)),t.lineDistances&&t.lineDistances.length===t.vertices.length){const o=new Pe(t.lineDistances.length,1);this.setAttribute("lineDistance",o.copyArray(t.lineDistances))}t.boundingSphere!==null&&(this.boundingSphere=t.boundingSphere.clone()),t.boundingBox!==null&&(this.boundingBox=t.boundingBox.clone())}else e.isMesh&&(t&&t.isGeometry&&this.fromGeometry(t));return this},setFromPoints:function(e){const t=[];for(let n=0,i=e.length;n<i;n++){const o=e[n];t.push(o.x,o.y,o.z||0)}return this.setAttribute("position",new Pe(t,3)),this},updateFromObject:function(e){let t=e.geometry;if(e.isMesh){let n=t.__directGeometry;if(t.elementsNeedUpdate===!0&&(n=void 0,t.elementsNeedUpdate=!1),n===void 0)return this.fromGeometry(t);n.verticesNeedUpdate=t.verticesNeedUpdate,n.normalsNeedUpdate=t.normalsNeedUpdate,n.colorsNeedUpdate=t.colorsNeedUpdate,n.uvsNeedUpdate=t.uvsNeedUpdate,n.groupsNeedUpdate=t.groupsNeedUpdate,t.verticesNeedUpdate=!1,t.normalsNeedUpdate=!1,t.colorsNeedUpdate=!1,t.uvsNeedUpdate=!1,t.groupsNeedUpdate=!1,t=n}if(t.verticesNeedUpdate===!0){const n=this.attributes.position;n!==void 0&&(n.copyVector3sArray(t.vertices),n.needsUpdate=!0),t.verticesNeedUpdate=!1}if(t.normalsNeedUpdate===!0){const n=this.attributes.normal;n!==void 0&&(n.copyVector3sArray(t.normals),n.needsUpdate=!0),t.normalsNeedUpdate=!1}if(t.colorsNeedUpdate===!0){const n=this.attributes.color;n!==void 0&&(n.copyColorsArray(t.colors),n.needsUpdate=!0),t.colorsNeedUpdate=!1}if(t.uvsNeedUpdate){const n=this.attributes.uv;n!==void 0&&(n.copyVector2sArray(t.uvs),n.needsUpdate=!0),t.uvsNeedUpdate=!1}if(t.lineDistancesNeedUpdate){const n=this.attributes.lineDistance;n!==void 0&&(n.copyArray(t.lineDistances),n.needsUpdate=!0),t.lineDistancesNeedUpdate=!1}return t.groupsNeedUpdate&&(t.computeGroups(e.geometry),this.groups=t.groups,t.groupsNeedUpdate=!1),this},fromGeometry:function(e){return e.__directGeometry=new bm().fromGeometry(e),this.fromDirectGeometry(e.__directGeometry)},fromDirectGeometry:function(e){const t=new Float32Array(e.vertices.length*3);if(this.setAttribute("position",new Te(t,3).copyVector3sArray(e.vertices)),e.normals.length>0){const n=new Float32Array(e.normals.length*3);this.setAttribute("normal",new Te(n,3).copyVector3sArray(e.normals))}if(e.colors.length>0){const n=new Float32Array(e.colors.length*3);this.setAttribute("color",new Te(n,3).copyColorsArray(e.colors))}if(e.uvs.length>0){const n=new Float32Array(e.uvs.length*2);this.setAttribute("uv",new Te(n,2).copyVector2sArray(e.uvs))}if(e.uvs2.length>0){const n=new Float32Array(e.uvs2.length*2);this.setAttribute("uv2",new Te(n,2).copyVector2sArray(e.uvs2))}this.groups=e.groups;for(const n in e.morphTargets){const i=[],o=e.morphTargets[n];for(let r=0,s=o.length;r<s;r++){const a=o[r],c=new Pe(a.data.length*3,3);c.name=a.name,i.push(c.copyVector3sArray(a.data))}this.morphAttributes[n]=i}if(e.skinIndices.length>0){const n=new Pe(e.skinIndices.length*4,4);this.setAttribute("skinIndex",n.copyVector4sArray(e.skinIndices))}if(e.skinWeights.length>0){const n=new Pe(e.skinWeights.length*4,4);this.setAttribute("skinWeight",n.copyVector4sArray(e.skinWeights))}return e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),this},computeBoundingBox:function(){this.boundingBox===null&&(this.boundingBox=new En);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new A(-Infinity,-Infinity,-Infinity),new A(Infinity,Infinity,Infinity));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let n=0,i=t.length;n<i;n++){const o=t[n];At.setFromBufferAttribute(o),this.morphTargetsRelative?(st.addVectors(this.boundingBox.min,At.min),this.boundingBox.expandByPoint(st),st.addVectors(this.boundingBox.max,At.max),this.boundingBox.expandByPoint(st)):(this.boundingBox.expandByPoint(At.min),this.boundingBox.expandByPoint(At.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){this.boundingSphere===null&&(this.boundingSphere=new Tn);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new A,Infinity);return}if(e){const n=this.boundingSphere.center;if(At.setFromBufferAttribute(e),t)for(let o=0,r=t.length;o<r;o++){const s=t[o];xo.setFromBufferAttribute(s),this.morphTargetsRelative?(st.addVectors(At.min,xo.min),At.expandByPoint(st),st.addVectors(At.max,xo.max),At.expandByPoint(st)):(At.expandByPoint(xo.min),At.expandByPoint(xo.max))}At.getCenter(n);let i=0;for(let o=0,r=e.count;o<r;o++)st.fromBufferAttribute(e,o),i=Math.max(i,n.distanceToSquared(st));if(t)for(let o=0,r=t.length;o<r;o++){const s=t[o],a=this.morphTargetsRelative;for(let c=0,l=s.count;c<l;c++)st.fromBufferAttribute(s,c),a&&(Si.fromBufferAttribute(e,c),st.add(Si)),i=Math.max(i,n.distanceToSquared(st))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}},computeFaceNormals:function(){},computeVertexNormals:function(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new Te(new Float32Array(t.count*3),3),this.setAttribute("normal",n);else for(let h=0,p=n.count;h<p;h++)n.setXYZ(h,0,0,0);const i=new A,o=new A,r=new A,s=new A,a=new A,c=new A,l=new A,u=new A;if(e)for(let h=0,p=e.count;h<p;h+=3){const d=e.getX(h+0),m=e.getX(h+1),y=e.getX(h+2);i.fromBufferAttribute(t,d),o.fromBufferAttribute(t,m),r.fromBufferAttribute(t,y),l.subVectors(r,o),u.subVectors(i,o),l.cross(u),s.fromBufferAttribute(n,d),a.fromBufferAttribute(n,m),c.fromBufferAttribute(n,y),s.add(l),a.add(l),c.add(l),n.setXYZ(d,s.x,s.y,s.z),n.setXYZ(m,a.x,a.y,a.z),n.setXYZ(y,c.x,c.y,c.z)}else for(let h=0,p=t.count;h<p;h+=3)i.fromBufferAttribute(t,h+0),o.fromBufferAttribute(t,h+1),r.fromBufferAttribute(t,h+2),l.subVectors(r,o),u.subVectors(i,o),l.cross(u),n.setXYZ(h+0,l.x,l.y,l.z),n.setXYZ(h+1,l.x,l.y,l.z),n.setXYZ(h+2,l.x,l.y,l.z);this.normalizeNormals(),n.needsUpdate=!0}},merge:function(e,t){if(!(e&&e.isBufferGeometry)){console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",e);return}t===void 0&&(t=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const n=this.attributes;for(const i in n){if(e.attributes[i]===void 0)continue;const o=n[i],r=o.array,s=e.attributes[i],a=s.array,c=s.itemSize*t,l=Math.min(a.length,r.length-c);for(let u=0,h=c;u<l;u++,h++)r[h]=a[u]}return this},normalizeNormals:function(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)st.fromBufferAttribute(e,t),st.normalize(),e.setXYZ(t,st.x,st.y,st.z)},toNonIndexed:function(){function e(s,a){const c=s.array,l=s.itemSize,u=s.normalized,h=new c.constructor(a.length*l);let p=0,d=0;for(let m=0,y=a.length;m<y;m++){p=a[m]*l;for(let v=0;v<l;v++)h[d++]=c[p++]}return new Te(h,l,u)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;const t=new De,n=this.index.array,i=this.attributes;for(const s in i){const a=i[s],c=e(a,n);t.setAttribute(s,c)}const o=this.morphAttributes;for(const s in o){const a=[],c=o[s];for(let l=0,u=c.length;l<u;l++){const h=c[l],p=e(h,n);a.push(p)}t.morphAttributes[s]=a}t.morphTargetsRelative=this.morphTargetsRelative;const r=this.groups;for(let s=0,a=r.length;s<a;s++){const c=r[s];t.addGroup(c.start,c.count,c.materialIndex)}return t},toJSON:function(){const e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const a=this.parameters;for(const c in a)a[c]!==void 0&&(e[c]=a[c]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const a in n){const c=n[a],l=c.toJSON(e.data);c.name!==""&&(l.name=c.name),e.data.attributes[a]=l}const i={};let o=!1;for(const a in this.morphAttributes){const c=this.morphAttributes[a],l=[];for(let u=0,h=c.length;u<h;u++){const p=c[u],d=p.toJSON(e.data);p.name!==""&&(d.name=p.name),l.push(d)}l.length>0&&(i[a]=l,o=!0)}o&&(e.data.morphAttributes=i,e.data.morphTargetsRelative=this.morphTargetsRelative);const r=this.groups;r.length>0&&(e.data.groups=JSON.parse(JSON.stringify(r)));const s=this.boundingSphere;return s!==null&&(e.data.boundingSphere={center:s.center.toArray(),radius:s.radius}),e},clone:function(){return new De().copy(this)},copy:function(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone(t));const i=e.attributes;for(const c in i){const l=i[c];this.setAttribute(c,l.clone(t))}const o=e.morphAttributes;for(const c in o){const l=[],u=o[c];for(let h=0,p=u.length;h<p;h++)l.push(u[h].clone(t));this.morphAttributes[c]=l}this.morphTargetsRelative=e.morphTargetsRelative;const r=e.groups;for(let c=0,l=r.length;c<l;c++){const u=r[c];this.addGroup(u.start,u.count,u.materialIndex)}const s=e.boundingBox;s!==null&&(this.boundingBox=s.clone());const a=e.boundingSphere;return a!==null&&(this.boundingSphere=a.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});const vl=new Re,Qn=new mo,$s=new Tn,Rn=new A,Pn=new A,Ln=new A,ea=new A,ta=new A,na=new A,vr=new A,xr=new A,br=new A,Ei=new X,Ti=new X,Ai=new X,bo=new A,wr=new A;function at(e,t){he.call(this),this.type="Mesh",this.geometry=e!==void 0?e:new De,this.material=t!==void 0?t:new Jn,this.updateMorphTargets()}at.prototype=Object.assign(Object.create(he.prototype),{constructor:at,isMesh:!0,copy:function(e){return he.prototype.copy.call(this,e),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=e.material,this.geometry=e.geometry,this},updateMorphTargets:function(){const e=this.geometry;if(e.isBufferGeometry){const t=e.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let o=0,r=i.length;o<r;o++){const s=i[o].name||String(o);this.morphTargetInfluences.push(0),this.morphTargetDictionary[s]=o}}}}else{const t=e.morphTargets;t!==void 0&&t.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}},raycast:function(e,t){const n=this.geometry,i=this.material,o=this.matrixWorld;if(i===void 0)return;if(n.boundingSphere===null&&n.computeBoundingSphere(),$s.copy(n.boundingSphere),$s.applyMatrix4(o),e.ray.intersectsSphere($s)===!1)return;if(vl.getInverse(o),Qn.copy(e.ray).applyMatrix4(vl),n.boundingBox!==null&&Qn.intersectsBox(n.boundingBox)===!1)return;let r;if(n.isBufferGeometry){const s=n.index,a=n.attributes.position,c=n.morphAttributes.position,l=n.morphTargetsRelative,u=n.attributes.uv,h=n.attributes.uv2,p=n.groups,d=n.drawRange;if(s!==null)if(Array.isArray(i))for(let m=0,y=p.length;m<y;m++){const v=p[m],g=i[v.materialIndex],f=Math.max(v.start,d.start),w=Math.min(v.start+v.count,d.start+d.count);for(let _=f,M=w;_<M;_+=3){const b=s.getX(_),P=s.getX(_+1),D=s.getX(_+2);r=_r(this,g,e,Qn,a,c,l,u,h,b,P,D),r&&(r.faceIndex=Math.floor(_/3),r.face.materialIndex=v.materialIndex,t.push(r))}}else{const m=Math.max(0,d.start),y=Math.min(s.count,d.start+d.count);for(let v=m,g=y;v<g;v+=3){const f=s.getX(v),w=s.getX(v+1),_=s.getX(v+2);r=_r(this,i,e,Qn,a,c,l,u,h,f,w,_),r&&(r.faceIndex=Math.floor(v/3),t.push(r))}}else if(a!==void 0)if(Array.isArray(i))for(let m=0,y=p.length;m<y;m++){const v=p[m],g=i[v.materialIndex],f=Math.max(v.start,d.start),w=Math.min(v.start+v.count,d.start+d.count);for(let _=f,M=w;_<M;_+=3){const b=_,P=_+1,D=_+2;r=_r(this,g,e,Qn,a,c,l,u,h,b,P,D),r&&(r.faceIndex=Math.floor(_/3),r.face.materialIndex=v.materialIndex,t.push(r))}}else{const m=Math.max(0,d.start),y=Math.min(a.count,d.start+d.count);for(let v=m,g=y;v<g;v+=3){const f=v,w=v+1,_=v+2;r=_r(this,i,e,Qn,a,c,l,u,h,f,w,_),r&&(r.faceIndex=Math.floor(v/3),t.push(r))}}}else if(n.isGeometry){const s=Array.isArray(i),a=n.vertices,c=n.faces;let l;const u=n.faceVertexUvs[0];u.length>0&&(l=u);for(let h=0,p=c.length;h<p;h++){const d=c[h],m=s?i[d.materialIndex]:i;if(m===void 0)continue;const y=a[d.a],v=a[d.b],g=a[d.c];if(r=xl(this,m,e,Qn,y,v,g,bo),r){if(l&&l[h]){const f=l[h];Ei.copy(f[0]),Ti.copy(f[1]),Ai.copy(f[2]),r.uv=mt.getUV(bo,y,v,g,Ei,Ti,Ai,new X)}r.face=d,r.faceIndex=h,t.push(r)}}}}});function xl(e,t,n,i,o,r,s,a){let c;if(t.side===ct?c=i.intersectTriangle(s,r,o,!0,a):c=i.intersectTriangle(o,r,s,t.side!==$o,a),c===null)return null;wr.copy(a),wr.applyMatrix4(e.matrixWorld);const l=n.ray.origin.distanceTo(wr);return l<n.near||l>n.far?null:{distance:l,point:wr.clone(),object:e}}function _r(e,t,n,i,o,r,s,a,c,l,u,h){Rn.fromBufferAttribute(o,l),Pn.fromBufferAttribute(o,u),Ln.fromBufferAttribute(o,h);const p=e.morphTargetInfluences;if(t.morphTargets&&r&&p){vr.set(0,0,0),xr.set(0,0,0),br.set(0,0,0);for(let m=0,y=r.length;m<y;m++){const v=p[m],g=r[m];if(v===0)continue;ea.fromBufferAttribute(g,l),ta.fromBufferAttribute(g,u),na.fromBufferAttribute(g,h),s?(vr.addScaledVector(ea,v),xr.addScaledVector(ta,v),br.addScaledVector(na,v)):(vr.addScaledVector(ea.sub(Rn),v),xr.addScaledVector(ta.sub(Pn),v),br.addScaledVector(na.sub(Ln),v))}Rn.add(vr),Pn.add(xr),Ln.add(br)}e.isSkinnedMesh&&(e.boneTransform(l,Rn),e.boneTransform(u,Pn),e.boneTransform(h,Ln));const d=xl(e,t,n,i,Rn,Pn,Ln,bo);if(d){a&&(Ei.fromBufferAttribute(a,l),Ti.fromBufferAttribute(a,u),Ai.fromBufferAttribute(a,h),d.uv=mt.getUV(bo,Rn,Pn,Ln,Ei,Ti,Ai,new X)),c&&(Ei.fromBufferAttribute(c,l),Ti.fromBufferAttribute(c,u),Ai.fromBufferAttribute(c,h),d.uv2=mt.getUV(bo,Rn,Pn,Ln,Ei,Ti,Ai,new X));const m=new js(l,u,h);mt.getNormal(Rn,Pn,Ln,m.normal),d.face=m}return d}class ia extends De{constructor(e=1,t=1,n=1,i=1,o=1,r=1){super();this.type="BoxBufferGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:o,depthSegments:r};const s=this;i=Math.floor(i),o=Math.floor(o),r=Math.floor(r);const a=[],c=[],l=[],u=[];let h=0,p=0;d("z","y","x",-1,-1,n,t,e,r,o,0),d("z","y","x",1,-1,n,t,-e,r,o,1),d("x","z","y",1,1,e,n,t,i,r,2),d("x","z","y",1,-1,e,n,-t,i,r,3),d("x","y","z",1,-1,e,t,n,i,o,4),d("x","y","z",-1,-1,e,t,-n,i,o,5),this.setIndex(a),this.setAttribute("position",new Pe(c,3)),this.setAttribute("normal",new Pe(l,3)),this.setAttribute("uv",new Pe(u,2));function d(m,y,v,g,f,w,_,M,b,P,D){const B=w/b,V=_/P,N=w/2,I=_/2,L=M/2,C=b+1,S=P+1;let F=0,k=0;const U=new A;for(let Z=0;Z<S;Z++){const ne=Z*V-I;for(let j=0;j<C;j++){const ge=j*B-N;U[m]=ge*g,U[y]=ne*f,U[v]=L,c.push(U.x,U.y,U.z),U[m]=0,U[y]=0,U[v]=M>0?1:-1,l.push(U.x,U.y,U.z),u.push(j/b),u.push(1-Z/P),F+=1}}for(let Z=0;Z<P;Z++)for(let ne=0;ne<b;ne++){const j=h+ne+C*Z,ge=h+ne+C*(Z+1),we=h+(ne+1)+C*(Z+1),ke=h+(ne+1)+C*Z;a.push(j,ge,ke),a.push(ge,we,ke),k+=6}s.addGroup(p,k,D),p+=k,h+=F}}}function Ci(e){const t={};for(const n in e){t[n]={};for(const i in e[n]){const o=e[n][i];o&&(o.isColor||o.isMatrix3||o.isMatrix4||o.isVector2||o.isVector3||o.isVector4||o.isTexture)?t[n][i]=o.clone():Array.isArray(o)?t[n][i]=o.slice():t[n][i]=o}}return t}function dt(e){const t={};for(let n=0;n<e.length;n++){const i=Ci(e[n]);for(const o in i)t[o]=i[o]}return t}const _m={clone:Ci,merge:dt};var Mm=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,Sm=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;function St(e){ve.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader=Mm,this.fragmentShader=Sm,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&(e.attributes!==void 0&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(e))}St.prototype=Object.create(ve.prototype);St.prototype.constructor=St;St.prototype.isShaderMaterial=!0;St.prototype.copy=function(e){return ve.prototype.copy.call(this,e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Ci(e.uniforms),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.lights=e.lights,this.clipping=e.clipping,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this};St.prototype.toJSON=function(e){const t=ve.prototype.toJSON.call(this,e);t.glslVersion=this.glslVersion,t.uniforms={};for(const i in this.uniforms){const o=this.uniforms[i],r=o.value;r&&r.isTexture?t.uniforms[i]={type:"t",value:r.toJSON(e).uuid}:r&&r.isColor?t.uniforms[i]={type:"c",value:r.getHex()}:r&&r.isVector2?t.uniforms[i]={type:"v2",value:r.toArray()}:r&&r.isVector3?t.uniforms[i]={type:"v3",value:r.toArray()}:r&&r.isVector4?t.uniforms[i]={type:"v4",value:r.toArray()}:r&&r.isMatrix3?t.uniforms[i]={type:"m3",value:r.toArray()}:r&&r.isMatrix4?t.uniforms[i]={type:"m4",value:r.toArray()}:t.uniforms[i]={value:r}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;const n={};for(const i in this.extensions)this.extensions[i]===!0&&(n[i]=!0);return Object.keys(n).length>0&&(t.extensions=n),t};function Bn(){he.call(this),this.type="Camera",this.matrixWorldInverse=new Re,this.projectionMatrix=new Re,this.projectionMatrixInverse=new Re}Bn.prototype=Object.assign(Object.create(he.prototype),{constructor:Bn,isCamera:!0,copy:function(e,t){return he.prototype.copy.call(this,e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this},getWorldDirection:function(e){e===void 0&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),e=new A),this.updateMatrixWorld(!0);const t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()},updateMatrixWorld:function(e){he.prototype.updateMatrixWorld.call(this,e),this.matrixWorldInverse.getInverse(this.matrixWorld)},updateWorldMatrix:function(e,t){he.prototype.updateWorldMatrix.call(this,e,t),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return new this.constructor().copy(this)}});function tt(e,t,n,i){Bn.call(this),this.type="PerspectiveCamera",this.fov=e!==void 0?e:50,this.zoom=1,this.near=n!==void 0?n:.1,this.far=i!==void 0?i:2e3,this.focus=10,this.aspect=t!==void 0?t:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}tt.prototype=Object.assign(Object.create(Bn.prototype),{constructor:tt,isPerspectiveCamera:!0,copy:function(e,t){return Bn.prototype.copy.call(this,e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this},setFocalLength:function(e){const t=.5*this.getFilmHeight()/e;this.fov=Ee.RAD2DEG*2*Math.atan(t),this.updateProjectionMatrix()},getFocalLength:function(){const e=Math.tan(Ee.DEG2RAD*.5*this.fov);return .5*this.getFilmHeight()/e},getEffectiveFOV:function(){return Ee.RAD2DEG*2*Math.atan(Math.tan(Ee.DEG2RAD*.5*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(e,t,n,i,o,r){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=o,this.view.height=r,this.updateProjectionMatrix()},clearViewOffset:function(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){const e=this.near;let t=e*Math.tan(Ee.DEG2RAD*.5*this.fov)/this.zoom,n=2*t,i=this.aspect*n,o=-.5*i;const r=this.view;if(this.view!==null&&this.view.enabled){const a=r.fullWidth,c=r.fullHeight;o+=r.offsetX*i/a,t-=r.offsetY*n/c,i*=r.width/a,n*=r.height/c}const s=this.filmOffset;s!==0&&(o+=e*s/this.getFilmWidth()),this.projectionMatrix.makePerspective(o,o+i,t,t-n,e,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(e){const t=he.prototype.toJSON.call(this,e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}});const Ri=90,Pi=1;function wo(e,t,n){if(he.call(this),this.type="CubeCamera",n.isWebGLCubeRenderTarget!==!0){console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");return}this.renderTarget=n;const i=new tt(Ri,Pi,e,t);i.layers=this.layers,i.up.set(0,-1,0),i.lookAt(new A(1,0,0)),this.add(i);const o=new tt(Ri,Pi,e,t);o.layers=this.layers,o.up.set(0,-1,0),o.lookAt(new A(-1,0,0)),this.add(o);const r=new tt(Ri,Pi,e,t);r.layers=this.layers,r.up.set(0,0,1),r.lookAt(new A(0,1,0)),this.add(r);const s=new tt(Ri,Pi,e,t);s.layers=this.layers,s.up.set(0,0,-1),s.lookAt(new A(0,-1,0)),this.add(s);const a=new tt(Ri,Pi,e,t);a.layers=this.layers,a.up.set(0,-1,0),a.lookAt(new A(0,0,1)),this.add(a);const c=new tt(Ri,Pi,e,t);c.layers=this.layers,c.up.set(0,-1,0),c.lookAt(new A(0,0,-1)),this.add(c),this.update=function(l,u){this.parent===null&&this.updateMatrixWorld();const h=l.xr.enabled,p=l.getRenderTarget();l.xr.enabled=!1;const d=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,l.setRenderTarget(n,0),l.render(u,i),l.setRenderTarget(n,1),l.render(u,o),l.setRenderTarget(n,2),l.render(u,r),l.setRenderTarget(n,3),l.render(u,s),l.setRenderTarget(n,4),l.render(u,a),n.texture.generateMipmaps=d,l.setRenderTarget(n,5),l.render(u,c),l.setRenderTarget(p),l.xr.enabled=h},this.clear=function(l,u,h,p){const d=l.getRenderTarget();for(let m=0;m<6;m++)l.setRenderTarget(n,m),l.clear(u,h,p);l.setRenderTarget(d)}}wo.prototype=Object.create(he.prototype);wo.prototype.constructor=wo;function In(e,t,n,i,o,r,s,a,c,l){e=e!==void 0?e:[],t=t!==void 0?t:bs,s=s!==void 0?s:qn,qe.call(this,e,t,n,i,o,r,s,a,c,l),this.flipY=!1,this._needsFlipEnvMap=!0}In.prototype=Object.create(qe.prototype);In.prototype.constructor=In;In.prototype.isCubeTexture=!0;Object.defineProperty(In.prototype,"images",{get:function(){return this.image},set:function(e){this.image=e}});function Li(e,t,n){Number.isInteger(t)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),t=n),Dt.call(this,e,e,t),t=t||{},this.texture=new In(void 0,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.encoding),this.texture._needsFlipEnvMap=!1}Li.prototype=Object.create(Dt.prototype);Li.prototype.constructor=Li;Li.prototype.isWebGLCubeRenderTarget=!0;Li.prototype.fromEquirectangularTexture=function(e,t){this.texture.type=t.type,this.texture.format=Ft,this.texture.encoding=t.encoding,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

			varying vec3 vWorldDirection;

			vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

				return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

			}

			void main() {

				vWorldDirection = transformDirection( position, modelMatrix );

				#include <begin_vertex>
				#include <project_vertex>

			}
		`,fragmentShader:`

			uniform sampler2D tEquirect;

			varying vec3 vWorldDirection;

			#include <common>

			void main() {

				vec3 direction = normalize( vWorldDirection );

				vec2 sampleUV = equirectUv( direction );

				gl_FragColor = texture2D( tEquirect, sampleUV );

			}
		`},i=new ia(5,5,5),o=new St({name:"CubemapFromEquirect",uniforms:Ci(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:ct,blending:so});o.uniforms.tEquirect.value=t;const r=new at(i,o),s=t.minFilter;t.minFilter===tr&&(t.minFilter=ut);const a=new wo(1,10,this);return a.update(e,r),t.minFilter=s,r.geometry.dispose(),r.material.dispose(),this};function Bi(e,t,n,i,o,r,s,a,c,l,u,h){qe.call(this,null,r,s,a,c,l,i,o,u,h),this.image={data:e||null,width:t||1,height:n||1},this.magFilter=c!==void 0?c:ft,this.minFilter=l!==void 0?l:ft,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}Bi.prototype=Object.create(qe.prototype);Bi.prototype.constructor=Bi;Bi.prototype.isDataTexture=!0;const Ii=new Tn,Mr=new A;class Sr{constructor(e,t,n,i,o,r){this.planes=[e!==void 0?e:new un,t!==void 0?t:new un,n!==void 0?n:new un,i!==void 0?i:new un,o!==void 0?o:new un,r!==void 0?r:new un]}set(e,t,n,i,o,r){const s=this.planes;return s[0].copy(e),s[1].copy(t),s[2].copy(n),s[3].copy(i),s[4].copy(o),s[5].copy(r),this}clone(){return new this.constructor().copy(this)}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e){const t=this.planes,n=e.elements,i=n[0],o=n[1],r=n[2],s=n[3],a=n[4],c=n[5],l=n[6],u=n[7],h=n[8],p=n[9],d=n[10],m=n[11],y=n[12],v=n[13],g=n[14],f=n[15];return t[0].setComponents(s-i,u-a,m-h,f-y).normalize(),t[1].setComponents(s+i,u+a,m+h,f+y).normalize(),t[2].setComponents(s+o,u+c,m+p,f+v).normalize(),t[3].setComponents(s-o,u-c,m-p,f-v).normalize(),t[4].setComponents(s-r,u-l,m-d,f-g).normalize(),t[5].setComponents(s+r,u+l,m+d,f+g).normalize(),this}intersectsObject(e){const t=e.geometry;return t.boundingSphere===null&&t.computeBoundingSphere(),Ii.copy(t.boundingSphere).applyMatrix4(e.matrixWorld),this.intersectsSphere(Ii)}intersectsSprite(e){return Ii.center.set(0,0,0),Ii.radius=.7071067811865476,Ii.applyMatrix4(e.matrixWorld),this.intersectsSphere(Ii)}intersectsSphere(e){const t=this.planes,n=e.center,i=-e.radius;for(let o=0;o<6;o++){const r=t[o].distanceToPoint(n);if(r<i)return!1}return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const i=t[n];if(Mr.x=i.normal.x>0?e.max.x:e.min.x,Mr.y=i.normal.y>0?e.max.y:e.min.y,Mr.z=i.normal.z>0?e.max.z:e.min.z,i.distanceToPoint(Mr)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}}function bl(){let e=null,t=!1,n=null,i=null;function o(r,s){n(r,s),i=e.requestAnimationFrame(o)}return{start:function(){if(t===!0)return;if(n===null)return;i=e.requestAnimationFrame(o),t=!0},stop:function(){e.cancelAnimationFrame(i),t=!1},setAnimationLoop:function(r){n=r},setContext:function(r){e=r}}}function Em(e,t){const n=t.isWebGL2,i=new WeakMap;function o(l,u){const h=l.array,p=l.usage,d=e.createBuffer();e.bindBuffer(u,d),e.bufferData(u,h,p),l.onUploadCallback();let m=5126;return h instanceof Float32Array?m=5126:h instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):h instanceof Uint16Array?m=5123:h instanceof Int16Array?m=5122:h instanceof Uint32Array?m=5125:h instanceof Int32Array?m=5124:h instanceof Int8Array?m=5120:h instanceof Uint8Array&&(m=5121),{buffer:d,type:m,bytesPerElement:h.BYTES_PER_ELEMENT,version:l.version}}function r(l,u,h){const p=u.array,d=u.updateRange;e.bindBuffer(h,l),d.count===-1?e.bufferSubData(h,0,p):(n?e.bufferSubData(h,d.offset*p.BYTES_PER_ELEMENT,p,d.offset,d.count):e.bufferSubData(h,d.offset*p.BYTES_PER_ELEMENT,p.subarray(d.offset,d.offset+d.count)),d.count=-1)}function s(l){return l.isInterleavedBufferAttribute&&(l=l.data),i.get(l)}function a(l){l.isInterleavedBufferAttribute&&(l=l.data);const u=i.get(l);u&&(e.deleteBuffer(u.buffer),i.delete(l))}function c(l,u){if(l.isGLBufferAttribute){var h=i.get(l);(!h||h.version<l.version)&&i.set(l,{buffer:l.buffer,type:l.type,bytesPerElement:l.elementSize,version:l.version});return}l.isInterleavedBufferAttribute&&(l=l.data);const p=i.get(l);p===void 0?i.set(l,o(l,u)):p.version<l.version&&(r(p.buffer,l,u),p.version=l.version)}return{get:s,remove:a,update:c}}class wl extends De{constructor(e,t,n,i){super();this.type="PlaneBufferGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i},e=e||1,t=t||1;const o=e/2,r=t/2,s=Math.floor(n)||1,a=Math.floor(i)||1,c=s+1,l=a+1,u=e/s,h=t/a,p=[],d=[],m=[],y=[];for(let v=0;v<l;v++){const g=v*h-r;for(let f=0;f<c;f++){const w=f*u-o;d.push(w,-g,0),m.push(0,0,1),y.push(f/s),y.push(1-v/a)}}for(let v=0;v<a;v++)for(let g=0;g<s;g++){const f=g+c*v,w=g+c*(v+1),_=g+1+c*(v+1),M=g+1+c*v;p.push(f,w,M),p.push(w,_,M)}this.setIndex(p),this.setAttribute("position",new Pe(d,3)),this.setAttribute("normal",new Pe(m,3)),this.setAttribute("uv",new Pe(y,2))}}var Tm=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vUv ).g;
#endif`,Am=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,Cm=`#ifdef ALPHATEST
	if ( diffuseColor.a < ALPHATEST ) discard;
#endif`,Rm=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );
	#endif
#endif`,Pm=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,Lm="vec3 transformed = vec3( position );",Bm=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,Im=`vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	return vec2( -1.04, 1.04 ) * a004 + r.zw;
}
float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
#if defined ( PHYSICALLY_CORRECT_LIGHTS )
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
#else
	if( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
		return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );
	}
	return 1.0;
#endif
}
vec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {
	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );
	return ( 1.0 - specularColor ) * fresnel + specularColor;
}
vec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {
	float fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );
	vec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;
	return Fr * fresnel + F0;
}
float G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	return 1.0 / ( gl * gv );
}
float G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
vec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( incidentLight.direction + viewDir );
	float dotNL = saturate( dot( normal, incidentLight.direction ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );
	vec3 F = F_Schlick( specularColor, dotLH );
	float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( G * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
vec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	vec2 brdf = integrateSpecularBRDF( dotNV, roughness );
	return specularColor * brdf.x + brdf.y;
}
void BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
	vec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );
	vec2 brdf = integrateSpecularBRDF( dotNV, roughness );
	vec3 FssEss = F * brdf.x + brdf.y;
	float Ess = brdf.x + brdf.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );
	float dotNH = saturate( dot( geometry.normal, halfDir ) );
	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );
	vec3 F = F_Schlick( specularColor, dotLH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
}
float GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {
	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );
}
float BlinnExponentToGGXRoughness( const in float blinnExponent ) {
	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );
}
#if defined( USE_SHEEN )
float D_Charlie(float roughness, float NoH) {
	float invAlpha = 1.0 / roughness;
	float cos2h = NoH * NoH;
	float sin2h = max(1.0 - cos2h, 0.0078125);	return (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);
}
float V_Neubelt(float NoV, float NoL) {
	return saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));
}
vec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {
	vec3 N = geometry.normal;
	vec3 V = geometry.viewDir;
	vec3 H = normalize( V + L );
	float dotNH = saturate( dot( N, H ) );
	return specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );
}
#endif`,Nm=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vUv );
		vec2 dSTdy = dFdy( vUv );
		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {
		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );
		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 );
		fDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,zm=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,Fm=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,Dm=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,Om=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,km=`#ifdef USE_COLOR
	diffuseColor.rgb *= vColor;
#endif`,Gm=`#ifdef USE_COLOR
	varying vec3 vColor;
#endif`,Vm=`#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,Um=`#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor.xyz *= color.xyz;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,Hm=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate(a) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement(a) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract(sin(sn) * c);
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
vec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {
	float distance = dot( planeNormal, point - pointOnPlane );
	return - distance * planeNormal + point;
}
float sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {
	return sign( dot( point - pointOnPlane, planeNormal ) );
}
vec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {
	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float linearToRelativeLuminance( const in vec3 color ) {
	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );
	return dot( weights, color.rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}`,Wm=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_maxMipLevel 8.0
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_maxTileSize 256.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		float texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );
		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );
		vec2 f = fract( uv );
		uv += 0.5 - f;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		if ( mipInt < cubeUV_maxMipLevel ) {
			uv.y += 2.0 * cubeUV_maxTileSize;
		}
		uv.y += filterInt * 2.0 * cubeUV_minTileSize;
		uv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );
		uv *= texelSize;
		vec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.x += texelSize;
		vec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.y += texelSize;
		vec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.x -= texelSize;
		vec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		vec3 tm = mix( tl, tr, f.x );
		vec3 bm = mix( bl, br, f.x );
		return mix( tm, bm, f.y );
	}
	#define r0 1.0
	#define v0 0.339
	#define m0 - 2.0
	#define r1 0.8
	#define v1 0.276
	#define m1 - 1.0
	#define r4 0.4
	#define v4 0.046
	#define m4 2.0
	#define r5 0.305
	#define v5 0.016
	#define m5 3.0
	#define r6 0.21
	#define v6 0.0038
	#define m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= r1 ) {
			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;
		} else if ( roughness >= r4 ) {
			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;
		} else if ( roughness >= r5 ) {
			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;
		} else if ( roughness >= r6 ) {
			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,jm=`vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,qm=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,Xm=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );
#endif`,Ym=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vUv );
	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,Zm=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,Jm="gl_FragColor = linearToOutputTexel( gl_FragColor );",Qm=`
vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 GammaToLinear( in vec4 value, in float gammaFactor ) {
	return vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );
}
vec4 LinearToGamma( in vec4 value, in float gammaFactor ) {
	return vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );
}
vec4 sRGBToLinear( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}
vec4 RGBEToLinear( in vec4 value ) {
	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );
}
vec4 LinearToRGBE( in vec4 value ) {
	float maxComponent = max( max( value.r, value.g ), value.b );
	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );
	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );
}
vec4 RGBMToLinear( in vec4 value, in float maxRange ) {
	return vec4( value.rgb * value.a * maxRange, 1.0 );
}
vec4 LinearToRGBM( in vec4 value, in float maxRange ) {
	float maxRGB = max( value.r, max( value.g, value.b ) );
	float M = clamp( maxRGB / maxRange, 0.0, 1.0 );
	M = ceil( M * 255.0 ) / 255.0;
	return vec4( value.rgb / ( M * maxRange ), M );
}
vec4 RGBDToLinear( in vec4 value, in float maxRange ) {
	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );
}
vec4 LinearToRGBD( in vec4 value, in float maxRange ) {
	float maxRGB = max( value.r, max( value.g, value.b ) );
	float D = max( maxRange / maxRGB, 1.0 );
	D = clamp( floor( D ) / 255.0, 0.0, 1.0 );
	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );
}
const mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );
vec4 LinearToLogLuv( in vec4 value ) {
	vec3 Xp_Y_XYZp = cLogLuvM * value.rgb;
	Xp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );
	vec4 vResult;
	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;
	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;
	vResult.w = fract( Le );
	vResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;
	return vResult;
}
const mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );
vec4 LogLuvToLinear( in vec4 value ) {
	float Le = value.z * 255.0 + value.w;
	vec3 Xp_Y_XYZp;
	Xp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );
	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;
	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;
	vec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;
	return vec4( max( vRGB, 0.0 ), 1.0 );
}`,Km=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifndef ENVMAP_TYPE_CUBE_UV
		envColor = envMapTexelToLinear( envColor );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,$m=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform int maxMipLevel;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,eg=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,tg=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,ng=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,ig=`#ifdef USE_FOG
	fogDepth = - mvPosition.z;
#endif`,og=`#ifdef USE_FOG
	varying float fogDepth;
#endif`,rg=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, fogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,sg=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float fogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,ag=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return texture2D( gradientMap, coord ).rgb;
	#else
		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );
	#endif
}`,cg=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel= texture2D( lightMap, vUv2 );
	reflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
#endif`,lg=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,hg=`vec3 diffuse = vec3( 1.0 );
GeometricContext geometry;
geometry.position = mvPosition.xyz;
geometry.normal = normalize( transformedNormal );
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );
GeometricContext backGeometry;
backGeometry.position = geometry.position;
backGeometry.normal = -geometry.normal;
backGeometry.viewDir = geometry.viewDir;
vLightFront = vec3( 0.0 );
vIndirectFront = vec3( 0.0 );
#ifdef DOUBLE_SIDED
	vLightBack = vec3( 0.0 );
	vIndirectBack = vec3( 0.0 );
#endif
IncidentLight directLight;
float dotNL;
vec3 directLightColor_Diffuse;
vIndirectFront += getAmbientLightIrradiance( ambientLightColor );
vIndirectFront += getLightProbeIrradiance( lightProbe, geometry );
#ifdef DOUBLE_SIDED
	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );
	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );
#endif
#if NUM_POINT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		getPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = PI * directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_SPOT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		getSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = PI * directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_DIR_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = PI * directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_HEMI_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );
		#ifdef DOUBLE_SIDED
			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );
		#endif
	}
	#pragma unroll_loop_end
#endif`,ug=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {
	vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		irradiance *= PI;
	#endif
	return irradiance;
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {
		directLight.color = directionalLight.color;
		directLight.direction = directionalLight.direction;
		directLight.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {
		vec3 lVector = pointLight.position - geometry.position;
		directLight.direction = normalize( lVector );
		float lightDistance = length( lVector );
		directLight.color = pointLight.color;
		directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );
		directLight.visible = ( directLight.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {
		vec3 lVector = spotLight.position - geometry.position;
		directLight.direction = normalize( lVector );
		float lightDistance = length( lVector );
		float angleCos = dot( directLight.direction, spotLight.direction );
		if ( angleCos > spotLight.coneCos ) {
			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );
			directLight.color = spotLight.color;
			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );
			directLight.visible = true;
		} else {
			directLight.color = vec3( 0.0 );
			directLight.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {
		float dotNL = dot( geometry.normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		#ifndef PHYSICALLY_CORRECT_LIGHTS
			irradiance *= PI;
		#endif
		return irradiance;
	}
#endif`,dg=`#if defined( USE_ENVMAP )
	#ifdef ENVMAP_MODE_REFRACTION
		uniform float refractionRatio;
	#endif
	vec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {
		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );
		#ifdef ENVMAP_TYPE_CUBE
			vec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );
			#ifdef TEXTURE_LOD_EXT
				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );
			#else
				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );
			#endif
			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;
		#elif defined( ENVMAP_TYPE_CUBE_UV )
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
		#else
			vec4 envMapColor = vec4( 0.0 );
		#endif
		return PI * envMapColor.rgb * envMapIntensity;
	}
	float getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {
		float maxMIPLevelScalar = float( maxMIPLevel );
		float sigma = PI * roughness * roughness / ( 1.0 + roughness );
		float desiredMIPLevel = maxMIPLevelScalar + log2( sigma );
		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );
	}
	vec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( -viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
		#else
			vec3 reflectVec = refract( -viewDir, normal, refractionRatio );
		#endif
		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
		float specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );
		#ifdef ENVMAP_TYPE_CUBE
			vec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );
			#ifdef TEXTURE_LOD_EXT
				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );
			#else
				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );
			#endif
			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;
		#elif defined( ENVMAP_TYPE_CUBE_UV )
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
		#endif
		return envMapColor.rgb * envMapIntensity;
	}
#endif`,pg=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,fg=`varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		irradiance *= PI;
	#endif
	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon
#define Material_LightProbeLOD( material )	(0)`,mg=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,gg=`varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		irradiance *= PI;
	#endif
	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong
#define Material_LightProbeLOD( material )	(0)`,yg=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;
material.specularRoughness = min( material.specularRoughness, 1.0 );
#ifdef REFLECTIVITY
	material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );
#endif
#ifdef CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheen;
#endif`,vg=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float specularRoughness;
	vec3 specularColor;
#ifdef CLEARCOAT
	float clearcoat;
	float clearcoatRoughness;
#endif
#ifdef USE_SHEEN
	vec3 sheenColor;
#endif
};
#define MAXIMUM_SPECULAR_COEFFICIENT 0.16
#define DEFAULT_SPECULAR_COEFFICIENT 0.04
float clearcoatDHRApprox( const in float roughness, const in float dotNL ) {
	return DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.specularRoughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		irradiance *= PI;
	#endif
	#ifdef CLEARCOAT
		float ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = ccDotNL * directLight.color;
		#ifndef PHYSICALLY_CORRECT_LIGHTS
			ccIrradiance *= PI;
		#endif
		float clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );
		reflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );
	#else
		float clearcoatDHR = 0.0;
	#endif
	#ifdef USE_SHEEN
		reflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(
			material.specularRoughness,
			directLight.direction,
			geometry,
			material.sheenColor
		);
	#else
		reflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);
	#endif
	reflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef CLEARCOAT
		float ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		reflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );
		float ccDotNL = ccDotNV;
		float clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );
	#else
		float clearcoatDHR = 0.0;
	#endif
	float clearcoatInv = 1.0 - clearcoatDHR;
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	BRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );
	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );
	reflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,xg=`
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointDirectLightIrradiance( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotDirectLightIrradiance( spotLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,bg=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel= texture2D( lightMap, vUv2 );
		vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
		#ifndef PHYSICALLY_CORRECT_LIGHTS
			lightMapIrradiance *= PI;
		#endif
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );
	#ifdef CLEARCOAT
		clearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );
	#endif
#endif`,wg=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`,_g=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,Mg=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,Sg=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,Eg=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,Tg=`#ifdef USE_MAP
	vec4 texelColor = texture2D( map, vUv );
	texelColor = mapTexelToLinear( texelColor );
	diffuseColor *= texelColor;
#endif`,Ag=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,Cg=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
#endif
#ifdef USE_MAP
	vec4 mapTexel = texture2D( map, uv );
	diffuseColor *= mapTexelToLinear( mapTexel );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,Rg=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	uniform mat3 uvTransform;
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,Pg=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vUv );
	metalnessFactor *= texelMetalness.b;
#endif`,Lg=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,Bg=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
	objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
	objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
	objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
#endif`,Ig=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifndef USE_MORPHNORMALS
		uniform float morphTargetInfluences[ 8 ];
	#else
		uniform float morphTargetInfluences[ 4 ];
	#endif
#endif`,Ng=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	transformed += morphTarget0 * morphTargetInfluences[ 0 ];
	transformed += morphTarget1 * morphTargetInfluences[ 1 ];
	transformed += morphTarget2 * morphTargetInfluences[ 2 ];
	transformed += morphTarget3 * morphTargetInfluences[ 3 ];
	#ifndef USE_MORPHNORMALS
		transformed += morphTarget4 * morphTargetInfluences[ 4 ];
		transformed += morphTarget5 * morphTargetInfluences[ 5 ];
		transformed += morphTarget6 * morphTargetInfluences[ 6 ];
		transformed += morphTarget7 * morphTargetInfluences[ 7 ];
	#endif
#endif`,zg=`#ifdef FLAT_SHADED
	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );
	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );
	#endif
	#ifdef USE_TANGENT
		vec3 tangent = normalize( vTangent );
		vec3 bitangent = normalize( vBitangent );
		#ifdef DOUBLE_SIDED
			tangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );
			bitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );
		#endif
		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )
			mat3 vTBN = mat3( tangent, bitangent, normal );
		#endif
	#endif
#endif
vec3 geometryNormal = normal;`,Fg=`#ifdef OBJECTSPACE_NORMALMAP
	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( TANGENTSPACE_NORMALMAP )
	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	#ifdef USE_TANGENT
		normal = normalize( vTBN * mapN );
	#else
		normal = perturbNormal2Arb( -vViewPosition, normal, mapN );
	#endif
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );
#endif`,Dg=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef OBJECTSPACE_NORMALMAP
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {
		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );
		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );
		vec2 st0 = dFdx( vUv.st );
		vec2 st1 = dFdy( vUv.st );
		float scale = sign( st1.t * st0.s - st0.t * st1.s );
		vec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );
		vec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );
		vec3 N = normalize( surf_norm );
		mat3 tsn = mat3( S, T, N );
		mapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );
		return normalize( tsn * mapN );
	}
#endif`,Og=`#ifdef CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`,kg=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	#ifdef USE_TANGENT
		clearcoatNormal = normalize( vTBN * clearcoatMapN );
	#else
		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );
	#endif
#endif`,Gg=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif`,Vg=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {
	return linearClipZ * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return (( near + viewZ ) * far ) / (( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * invClipZ - far );
}`,Ug=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,Hg=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,Wg=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,jg=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,qg=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vUv );
	roughnessFactor *= texelRoughness.g;
#endif`,Xg=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,Yg=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );
		bool inFrustum = all( inFrustumVec );
		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );
		bool frustumTest = all( frustumTestVec );
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,Zg=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,Jg=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0
		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		vec4 shadowWorldPosition;
	#endif
	#if NUM_DIR_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );
		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
#endif`,Qg=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,Kg=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,$g=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	#ifdef BONE_TEXTURE
		uniform highp sampler2D boneTexture;
		uniform int boneTextureSize;
		mat4 getBoneMatrix( const in float i ) {
			float j = i * 4.0;
			float x = mod( j, float( boneTextureSize ) );
			float y = floor( j / float( boneTextureSize ) );
			float dx = 1.0 / float( boneTextureSize );
			float dy = 1.0 / float( boneTextureSize );
			y = dy * ( y + 0.5 );
			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
			mat4 bone = mat4( v1, v2, v3, v4 );
			return bone;
		}
	#else
		uniform mat4 boneMatrices[ MAX_BONES ];
		mat4 getBoneMatrix( const in float i ) {
			mat4 bone = boneMatrices[ int(i) ];
			return bone;
		}
	#endif
#endif`,ey=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,ty=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,ny=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,iy=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,oy=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,ry=`#ifndef saturate
#define saturate(a) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,sy=`#ifdef USE_TRANSMISSIONMAP
	totalTransmission *= texture2D( transmissionMap, vUv ).r;
#endif`,ay=`#ifdef USE_TRANSMISSIONMAP
	uniform sampler2D transmissionMap;
#endif`,cy=`#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )
	varying vec2 vUv;
#endif`,ly=`#ifdef USE_UV
	#ifdef UVS_VERTEX_ONLY
		vec2 vUv;
	#else
		varying vec2 vUv;
	#endif
	uniform mat3 uvTransform;
#endif`,hy=`#ifdef USE_UV
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
#endif`,uy=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	varying vec2 vUv2;
#endif`,dy=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	attribute vec2 uv2;
	varying vec2 vUv2;
	uniform mat3 uv2Transform;
#endif`,py=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;
#endif`,fy=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`,my=`uniform sampler2D t2D;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	gl_FragColor = mapTexelToLinear( texColor );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,gy=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,yy=`#include <envmap_common_pars_fragment>
uniform float opacity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	vec3 vReflect = vWorldDirection;
	#include <envmap_fragment>
	gl_FragColor = envColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,vy=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,xy=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,by=`#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,wy=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,_y=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,My=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	vec4 texColor = texture2D( tEquirect, sampleUV );
	gl_FragColor = mapTexelToLinear( texColor );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,Sy=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,Ey=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Ty=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,Ay=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
	
		vec4 lightMapTexel= texture2D( lightMap, vUv2 );
		reflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Cy=`#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <skinbase_vertex>
	#ifdef USE_ENVMAP
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,Ry=`uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <fog_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <emissivemap_fragment>
	#ifdef DOUBLE_SIDED
		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;
	#else
		reflectedLight.indirectDiffuse += vIndirectFront;
	#endif
	#include <lightmap_fragment>
	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );
	#ifdef DOUBLE_SIDED
		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;
	#else
		reflectedLight.directDiffuse = vLightFront;
	#endif
	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Py=`#define LAMBERT
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <bsdfs>
#include <lights_pars_begin>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <lights_lambert_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Ly=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <fog_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
		matcapColor = matcapTexelToLinear( matcapColor );
	#else
		vec4 matcapColor = vec4( 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,By=`#define MATCAP
varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#ifndef FLAT_SHADED
		vNormal = normalize( transformedNormal );
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,Iy=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Ny=`#define TOON
varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,zy=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Fy=`#define PHONG
varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Dy=`#define STANDARD
#ifdef PHYSICAL
	#define REFLECTIVITY
	#define CLEARCOAT
	#define TRANSMISSION
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef TRANSMISSION
	uniform float transmission;
#endif
#ifdef REFLECTIVITY
	uniform float reflectivity;
#endif
#ifdef CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheen;
#endif
varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <transmissionmap_pars_fragment>
#include <bsdfs>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <lights_physical_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#ifdef TRANSMISSION
		float totalTransmission = transmission;
	#endif
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <transmissionmap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#ifdef TRANSMISSION
		diffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );
	#endif
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Oy=`#define STANDARD
varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,ky=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif
#include <packing>
#include <uv_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
}`,Gy=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	vViewPosition = - mvPosition.xyz;
#endif
}`,Vy=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Uy=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,Hy=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,Wy=`#include <common>
#include <fog_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <begin_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,jy=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,qy=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`;const Be={alphamap_fragment:Tm,alphamap_pars_fragment:Am,alphatest_fragment:Cm,aomap_fragment:Rm,aomap_pars_fragment:Pm,begin_vertex:Lm,beginnormal_vertex:Bm,bsdfs:Im,bumpmap_pars_fragment:Nm,clipping_planes_fragment:zm,clipping_planes_pars_fragment:Fm,clipping_planes_pars_vertex:Dm,clipping_planes_vertex:Om,color_fragment:km,color_pars_fragment:Gm,color_pars_vertex:Vm,color_vertex:Um,common:Hm,cube_uv_reflection_fragment:Wm,defaultnormal_vertex:jm,displacementmap_pars_vertex:qm,displacementmap_vertex:Xm,emissivemap_fragment:Ym,emissivemap_pars_fragment:Zm,encodings_fragment:Jm,encodings_pars_fragment:Qm,envmap_fragment:Km,envmap_common_pars_fragment:$m,envmap_pars_fragment:eg,envmap_pars_vertex:tg,envmap_physical_pars_fragment:dg,envmap_vertex:ng,fog_vertex:ig,fog_pars_vertex:og,fog_fragment:rg,fog_pars_fragment:sg,gradientmap_pars_fragment:ag,lightmap_fragment:cg,lightmap_pars_fragment:lg,lights_lambert_vertex:hg,lights_pars_begin:ug,lights_toon_fragment:pg,lights_toon_pars_fragment:fg,lights_phong_fragment:mg,lights_phong_pars_fragment:gg,lights_physical_fragment:yg,lights_physical_pars_fragment:vg,lights_fragment_begin:xg,lights_fragment_maps:bg,lights_fragment_end:wg,logdepthbuf_fragment:_g,logdepthbuf_pars_fragment:Mg,logdepthbuf_pars_vertex:Sg,logdepthbuf_vertex:Eg,map_fragment:Tg,map_pars_fragment:Ag,map_particle_fragment:Cg,map_particle_pars_fragment:Rg,metalnessmap_fragment:Pg,metalnessmap_pars_fragment:Lg,morphnormal_vertex:Bg,morphtarget_pars_vertex:Ig,morphtarget_vertex:Ng,normal_fragment_begin:zg,normal_fragment_maps:Fg,normalmap_pars_fragment:Dg,clearcoat_normal_fragment_begin:Og,clearcoat_normal_fragment_maps:kg,clearcoat_pars_fragment:Gg,packing:Vg,premultiplied_alpha_fragment:Ug,project_vertex:Hg,dithering_fragment:Wg,dithering_pars_fragment:jg,roughnessmap_fragment:qg,roughnessmap_pars_fragment:Xg,shadowmap_pars_fragment:Yg,shadowmap_pars_vertex:Zg,shadowmap_vertex:Jg,shadowmask_pars_fragment:Qg,skinbase_vertex:Kg,skinning_pars_vertex:$g,skinning_vertex:ey,skinnormal_vertex:ty,specularmap_fragment:ny,specularmap_pars_fragment:iy,tonemapping_fragment:oy,tonemapping_pars_fragment:ry,transmissionmap_fragment:sy,transmissionmap_pars_fragment:ay,uv_pars_fragment:cy,uv_pars_vertex:ly,uv_vertex:hy,uv2_pars_fragment:uy,uv2_pars_vertex:dy,uv2_vertex:py,worldpos_vertex:fy,background_frag:my,background_vert:gy,cube_frag:yy,cube_vert:vy,depth_frag:xy,depth_vert:by,distanceRGBA_frag:wy,distanceRGBA_vert:_y,equirect_frag:My,equirect_vert:Sy,linedashed_frag:Ey,linedashed_vert:Ty,meshbasic_frag:Ay,meshbasic_vert:Cy,meshlambert_frag:Ry,meshlambert_vert:Py,meshmatcap_frag:Ly,meshmatcap_vert:By,meshtoon_frag:Iy,meshtoon_vert:Ny,meshphong_frag:zy,meshphong_vert:Fy,meshphysical_frag:Dy,meshphysical_vert:Oy,normal_frag:ky,normal_vert:Gy,points_frag:Vy,points_vert:Uy,shadow_frag:Hy,shadow_vert:Wy,sprite_frag:jy,sprite_vert:qy},oe={common:{diffuse:{value:new ue(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new Mt},uv2Transform:{value:new Mt},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new X(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new ue(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new ue(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Mt}},sprite:{diffuse:{value:new ue(15658734)},opacity:{value:1},center:{value:new X(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Mt}}},qt={basic:{uniforms:dt([oe.common,oe.specularmap,oe.envmap,oe.aomap,oe.lightmap,oe.fog]),vertexShader:Be.meshbasic_vert,fragmentShader:Be.meshbasic_frag},lambert:{uniforms:dt([oe.common,oe.specularmap,oe.envmap,oe.aomap,oe.lightmap,oe.emissivemap,oe.fog,oe.lights,{emissive:{value:new ue(0)}}]),vertexShader:Be.meshlambert_vert,fragmentShader:Be.meshlambert_frag},phong:{uniforms:dt([oe.common,oe.specularmap,oe.envmap,oe.aomap,oe.lightmap,oe.emissivemap,oe.bumpmap,oe.normalmap,oe.displacementmap,oe.fog,oe.lights,{emissive:{value:new ue(0)},specular:{value:new ue(1118481)},shininess:{value:30}}]),vertexShader:Be.meshphong_vert,fragmentShader:Be.meshphong_frag},standard:{uniforms:dt([oe.common,oe.envmap,oe.aomap,oe.lightmap,oe.emissivemap,oe.bumpmap,oe.normalmap,oe.displacementmap,oe.roughnessmap,oe.metalnessmap,oe.fog,oe.lights,{emissive:{value:new ue(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Be.meshphysical_vert,fragmentShader:Be.meshphysical_frag},toon:{uniforms:dt([oe.common,oe.aomap,oe.lightmap,oe.emissivemap,oe.bumpmap,oe.normalmap,oe.displacementmap,oe.gradientmap,oe.fog,oe.lights,{emissive:{value:new ue(0)}}]),vertexShader:Be.meshtoon_vert,fragmentShader:Be.meshtoon_frag},matcap:{uniforms:dt([oe.common,oe.bumpmap,oe.normalmap,oe.displacementmap,oe.fog,{matcap:{value:null}}]),vertexShader:Be.meshmatcap_vert,fragmentShader:Be.meshmatcap_frag},points:{uniforms:dt([oe.points,oe.fog]),vertexShader:Be.points_vert,fragmentShader:Be.points_frag},dashed:{uniforms:dt([oe.common,oe.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Be.linedashed_vert,fragmentShader:Be.linedashed_frag},depth:{uniforms:dt([oe.common,oe.displacementmap]),vertexShader:Be.depth_vert,fragmentShader:Be.depth_frag},normal:{uniforms:dt([oe.common,oe.bumpmap,oe.normalmap,oe.displacementmap,{opacity:{value:1}}]),vertexShader:Be.normal_vert,fragmentShader:Be.normal_frag},sprite:{uniforms:dt([oe.sprite,oe.fog]),vertexShader:Be.sprite_vert,fragmentShader:Be.sprite_frag},background:{uniforms:{uvTransform:{value:new Mt},t2D:{value:null}},vertexShader:Be.background_vert,fragmentShader:Be.background_frag},cube:{uniforms:dt([oe.envmap,{opacity:{value:1}}]),vertexShader:Be.cube_vert,fragmentShader:Be.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Be.equirect_vert,fragmentShader:Be.equirect_frag},distanceRGBA:{uniforms:dt([oe.common,oe.displacementmap,{referencePosition:{value:new A},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Be.distanceRGBA_vert,fragmentShader:Be.distanceRGBA_frag},shadow:{uniforms:dt([oe.lights,oe.fog,{color:{value:new ue(0)},opacity:{value:1}}]),vertexShader:Be.shadow_vert,fragmentShader:Be.shadow_frag}};qt.physical={uniforms:dt([qt.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new X(1,1)},clearcoatNormalMap:{value:null},sheen:{value:new ue(0)},transmission:{value:0},transmissionMap:{value:null}}]),vertexShader:Be.meshphysical_vert,fragmentShader:Be.meshphysical_frag};function Xy(e,t,n,i,o){const r=new ue(0);let s=0,a,c,l=null,u=0,h=null;function p(m,y,v,g){let f=y.isScene===!0?y.background:null;f&&f.isTexture&&(f=t.get(f));const w=e.xr,_=w.getSession&&w.getSession();_&&_.environmentBlendMode==="additive"&&(f=null),f===null?d(r,s):f&&f.isColor&&(d(f,1),g=!0),(e.autoClear||g)&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),f&&(f.isCubeTexture||f.isWebGLCubeRenderTarget||f.mapping===_s)?(c===void 0&&(c=new at(new ia(1,1,1),new St({name:"BackgroundCubeMaterial",uniforms:Ci(qt.cube.uniforms),vertexShader:qt.cube.vertexShader,fragmentShader:qt.cube.fragmentShader,side:ct,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),c.geometry.deleteAttribute("uv"),c.onBeforeRender=function(M,b,P){this.matrixWorld.copyPosition(P.matrixWorld)},Object.defineProperty(c.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(c)),f.isWebGLCubeRenderTarget&&(f=f.texture),c.material.uniforms.envMap.value=f,c.material.uniforms.flipEnvMap.value=f.isCubeTexture&&f._needsFlipEnvMap?-1:1,(l!==f||u!==f.version||h!==e.toneMapping)&&(c.material.needsUpdate=!0,l=f,u=f.version,h=e.toneMapping),m.unshift(c,c.geometry,c.material,0,0,null)):f&&f.isTexture&&(a===void 0&&(a=new at(new wl(2,2),new St({name:"BackgroundMaterial",uniforms:Ci(qt.background.uniforms),vertexShader:qt.background.vertexShader,fragmentShader:qt.background.fragmentShader,side:Ko,depthTest:!1,depthWrite:!1,fog:!1})),a.geometry.deleteAttribute("normal"),Object.defineProperty(a.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(a)),a.material.uniforms.t2D.value=f,f.matrixAutoUpdate===!0&&f.updateMatrix(),a.material.uniforms.uvTransform.value.copy(f.matrix),(l!==f||u!==f.version||h!==e.toneMapping)&&(a.material.needsUpdate=!0,l=f,u=f.version,h=e.toneMapping),m.unshift(a,a.geometry,a.material,0,0,null))}function d(m,y){n.buffers.color.setClear(m.r,m.g,m.b,y,o)}return{getClearColor:function(){return r},setClearColor:function(m,y){r.set(m),s=y!==void 0?y:1,d(r,s)},getClearAlpha:function(){return s},setClearAlpha:function(m){s=m,d(r,s)},render:p}}function Yy(e,t,n,i){const o=e.getParameter(34921),r=i.isWebGL2?null:t.get("OES_vertex_array_object"),s=i.isWebGL2||r!==null,a={},c=y(null);let l=c;function u(L,C,S,F,k){let U=!1;if(s){const Z=m(F,S,C);l!==Z&&(l=Z,p(l.object)),U=v(F,k),U&&g(F,k)}else{const Z=C.wireframe===!0;(l.geometry!==F.id||l.program!==S.id||l.wireframe!==Z)&&(l.geometry=F.id,l.program=S.id,l.wireframe=Z,U=!0)}L.isInstancedMesh===!0&&(U=!0),k!==null&&n.update(k,34963),U&&(P(L,C,S,F),k!==null&&e.bindBuffer(34963,n.get(k).buffer))}function h(){return i.isWebGL2?e.createVertexArray():r.createVertexArrayOES()}function p(L){return i.isWebGL2?e.bindVertexArray(L):r.bindVertexArrayOES(L)}function d(L){return i.isWebGL2?e.deleteVertexArray(L):r.deleteVertexArrayOES(L)}function m(L,C,S){const F=S.wireframe===!0;let k=a[L.id];k===void 0&&(k={},a[L.id]=k);let U=k[C.id];U===void 0&&(U={},k[C.id]=U);let Z=U[F];return Z===void 0&&(Z=y(h()),U[F]=Z),Z}function y(L){const C=[],S=[],F=[];for(let k=0;k<o;k++)C[k]=0,S[k]=0,F[k]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:C,enabledAttributes:S,attributeDivisors:F,object:L,attributes:{},index:null}}function v(L,C){const S=l.attributes,F=L.attributes;if(Object.keys(S).length!==Object.keys(F).length)return!0;for(const k in F){const U=S[k],Z=F[k];if(U===void 0)return!0;if(U.attribute!==Z)return!0;if(U.data!==Z.data)return!0}return l.index!==C}function g(L,C){const S={},F=L.attributes;for(const k in F){const U=F[k],Z={};Z.attribute=U,U.data&&(Z.data=U.data),S[k]=Z}l.attributes=S,l.index=C}function f(){const L=l.newAttributes;for(let C=0,S=L.length;C<S;C++)L[C]=0}function w(L){_(L,0)}function _(L,C){const S=l.newAttributes,F=l.enabledAttributes,k=l.attributeDivisors;if(S[L]=1,F[L]===0&&(e.enableVertexAttribArray(L),F[L]=1),k[L]!==C){const U=i.isWebGL2?e:t.get("ANGLE_instanced_arrays");U[i.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](L,C),k[L]=C}}function M(){const L=l.newAttributes,C=l.enabledAttributes;for(let S=0,F=C.length;S<F;S++)C[S]!==L[S]&&(e.disableVertexAttribArray(S),C[S]=0)}function b(L,C,S,F,k,U){i.isWebGL2===!0&&(S===5124||S===5125)?e.vertexAttribIPointer(L,C,S,k,U):e.vertexAttribPointer(L,C,S,F,k,U)}function P(L,C,S,F){if(i.isWebGL2===!1&&(L.isInstancedMesh||F.isInstancedBufferGeometry)&&t.get("ANGLE_instanced_arrays")===null)return;f();const k=F.attributes,U=S.getAttributes(),Z=C.defaultAttributeValues;for(const ne in U){const j=U[ne];if(j>=0){const ge=k[ne];if(ge!==void 0){const we=ge.normalized,ke=ge.itemSize,W=n.get(ge);if(W===void 0)continue;const He=W.buffer,be=W.type,Fe=W.bytesPerElement;if(ge.isInterleavedBufferAttribute){const ye=ge.data,Oe=ye.stride,q=ge.offset;ye&&ye.isInstancedInterleavedBuffer?(_(j,ye.meshPerAttribute),F._maxInstanceCount===void 0&&(F._maxInstanceCount=ye.meshPerAttribute*ye.count)):w(j),e.bindBuffer(34962,He),b(j,ke,be,we,Oe*Fe,q*Fe)}else ge.isInstancedBufferAttribute?(_(j,ge.meshPerAttribute),F._maxInstanceCount===void 0&&(F._maxInstanceCount=ge.meshPerAttribute*ge.count)):w(j),e.bindBuffer(34962,He),b(j,ke,be,we,0,0)}else if(ne==="instanceMatrix"){const we=n.get(L.instanceMatrix);if(we===void 0)continue;const ke=we.buffer,W=we.type;_(j+0,1),_(j+1,1),_(j+2,1),_(j+3,1),e.bindBuffer(34962,ke),e.vertexAttribPointer(j+0,4,W,!1,64,0),e.vertexAttribPointer(j+1,4,W,!1,64,16),e.vertexAttribPointer(j+2,4,W,!1,64,32),e.vertexAttribPointer(j+3,4,W,!1,64,48)}else if(ne==="instanceColor"){const we=n.get(L.instanceColor);if(we===void 0)continue;const ke=we.buffer,W=we.type;_(j,1),e.bindBuffer(34962,ke),e.vertexAttribPointer(j,3,W,!1,12,0)}else if(Z!==void 0){const we=Z[ne];if(we!==void 0)switch(we.length){case 2:e.vertexAttrib2fv(j,we);break;case 3:e.vertexAttrib3fv(j,we);break;case 4:e.vertexAttrib4fv(j,we);break;default:e.vertexAttrib1fv(j,we)}}}}M()}function D(){N();for(const L in a){const C=a[L];for(const S in C){const F=C[S];for(const k in F)d(F[k].object),delete F[k];delete C[S]}delete a[L]}}function B(L){if(a[L.id]===void 0)return;const C=a[L.id];for(const S in C){const F=C[S];for(const k in F)d(F[k].object),delete F[k];delete C[S]}delete a[L.id]}function V(L){for(const C in a){const S=a[C];if(S[L.id]===void 0)continue;const F=S[L.id];for(const k in F)d(F[k].object),delete F[k];delete S[L.id]}}function N(){if(I(),l===c)return;l=c,p(l.object)}function I(){c.geometry=null,c.program=null,c.wireframe=!1}return{setup:u,reset:N,resetDefaultState:I,dispose:D,releaseStatesOfGeometry:B,releaseStatesOfProgram:V,initAttributes:f,enableAttribute:w,disableUnusedAttributes:M}}function Zy(e,t,n,i){const o=i.isWebGL2;let r;function s(l){r=l}function a(l,u){e.drawArrays(r,l,u),n.update(u,r,1)}function c(l,u,h){if(h===0)return;let p,d;if(o)p=e,d="drawArraysInstanced";else if(p=t.get("ANGLE_instanced_arrays"),d="drawArraysInstancedANGLE",p===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}p[d](r,l,u,h),n.update(u,r,h)}this.setMode=s,this.render=a,this.renderInstances=c}function Jy(e,t,n){let i;function o(){if(i!==void 0)return i;const b=t.get("EXT_texture_filter_anisotropic");return b!==null?i=e.getParameter(b.MAX_TEXTURE_MAX_ANISOTROPY_EXT):i=0,i}function r(b){if(b==="highp"){if(e.getShaderPrecisionFormat(35633,36338).precision>0&&e.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";b="mediump"}return b==="mediump"&&(e.getShaderPrecisionFormat(35633,36337).precision>0&&e.getShaderPrecisionFormat(35632,36337).precision>0)?"mediump":"lowp"}const s=typeof WebGL2RenderingContext!="undefined"&&e instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext!="undefined"&&e instanceof WebGL2ComputeRenderingContext;let a=n.precision!==void 0?n.precision:"highp";const c=r(a);c!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",c,"instead."),a=c);const l=n.logarithmicDepthBuffer===!0,u=e.getParameter(34930),h=e.getParameter(35660),p=e.getParameter(3379),d=e.getParameter(34076),m=e.getParameter(34921),y=e.getParameter(36347),v=e.getParameter(36348),g=e.getParameter(36349),f=h>0,w=s||!!t.get("OES_texture_float"),_=f&&w,M=s?e.getParameter(36183):0;return{isWebGL2:s,getMaxAnisotropy:o,getMaxPrecision:r,precision:a,logarithmicDepthBuffer:l,maxTextures:u,maxVertexTextures:h,maxTextureSize:p,maxCubemapSize:d,maxAttributes:m,maxVertexUniforms:y,maxVaryings:v,maxFragmentUniforms:g,vertexTextures:f,floatFragmentTextures:w,floatVertexTextures:_,maxSamples:M}}function Qy(e){const t=this;let n=null,i=0,o=!1,r=!1;const s=new un,a=new Mt,c={value:null,needsUpdate:!1};this.uniform=c,this.numPlanes=0,this.numIntersection=0,this.init=function(h,p,d){const m=h.length!==0||p||i!==0||o;return o=p,n=u(h,d,0),i=h.length,m},this.beginShadows=function(){r=!0,u(null)},this.endShadows=function(){r=!1,l()},this.setState=function(h,p,d){const m=h.clippingPlanes,y=h.clipIntersection,v=h.clipShadows,g=e.get(h);if(!o||m===null||m.length===0||r&&!v)r?u(null):l();else{const f=r?0:i,w=f*4;let _=g.clippingState||null;c.value=_,_=u(m,p,w,d);for(let M=0;M!==w;++M)_[M]=n[M];g.clippingState=_,this.numIntersection=y?this.numPlanes:0,this.numPlanes+=f}};function l(){c.value!==n&&(c.value=n,c.needsUpdate=i>0),t.numPlanes=i,t.numIntersection=0}function u(h,p,d,m){const y=h!==null?h.length:0;let v=null;if(y!==0){if(v=c.value,m!==!0||v===null){const g=d+y*4,f=p.matrixWorldInverse;a.getNormalMatrix(f),(v===null||v.length<g)&&(v=new Float32Array(g));for(let w=0,_=d;w!==y;++w,_+=4)s.copy(h[w]).applyMatrix4(f,a),s.normal.toArray(v,_),v[_+3]=s.constant}c.value=v,c.needsUpdate=!0}return t.numPlanes=y,t.numIntersection=0,v}}function Ky(e){let t=new WeakMap;function n(r,s){return s===kc?r.mapping=bs:s===Gc&&(r.mapping=ws),r}function i(r){if(r&&r.isTexture){const s=r.mapping;if(s===kc||s===Gc)if(t.has(r)){const a=t.get(r).texture;return n(a,r.mapping)}else{const a=r.image;if(a&&a.height>0){const c=e.getRenderList(),l=e.getRenderTarget(),u=e.getRenderState(),h=new Li(a.height/2);return h.fromEquirectangularTexture(e,r),t.set(r,h),e.setRenderTarget(l),e.setRenderList(c),e.setRenderState(u),n(h.texture,r.mapping)}else return null}}return r}function o(){t=new WeakMap}return{get:i,dispose:o}}function $y(e){const t={};return{has:function(n){if(t[n]!==void 0)return t[n]!==null;let i;switch(n){case"WEBGL_depth_texture":i=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=e.getExtension(n)}return t[n]=i,i!==null},get:function(n){return this.has(n)||console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),t[n]}}}function ev(e,t,n,i){const o=new WeakMap,r=new WeakMap;function s(h){const p=h.target,d=o.get(p);d.index!==null&&t.remove(d.index);for(const y in d.attributes)t.remove(d.attributes[y]);p.removeEventListener("dispose",s),o.delete(p);const m=r.get(d);m&&(t.remove(m),r.delete(d)),i.releaseStatesOfGeometry(p),p.isInstancedBufferGeometry===!0&&delete p._maxInstanceCount,n.memory.geometries--}function a(h,p){let d=o.get(p);return d||(p.addEventListener("dispose",s),p.isBufferGeometry?d=p:p.isGeometry&&(p._bufferGeometry===void 0&&(p._bufferGeometry=new De().setFromObject(h)),d=p._bufferGeometry),o.set(p,d),n.memory.geometries++,d)}function c(h){const p=h.attributes;for(const m in p)t.update(p[m],34962);const d=h.morphAttributes;for(const m in d){const y=d[m];for(let v=0,g=y.length;v<g;v++)t.update(y[v],34962)}}function l(h){const p=[],d=h.index,m=h.attributes.position;let y=0;if(d!==null){const f=d.array;y=d.version;for(let w=0,_=f.length;w<_;w+=3){const M=f[w+0],b=f[w+1],P=f[w+2];p.push(M,b,b,P,P,M)}}else{const f=m.array;y=m.version;for(let w=0,_=f.length/3-1;w<_;w+=3){const M=w+0,b=w+1,P=w+2;p.push(M,b,b,P,P,M)}}const v=new(yl(p)>65535?vo:yo)(p,1);v.version=y;const g=r.get(h);g&&t.remove(g),r.set(h,v)}function u(h){const p=r.get(h);if(p){const d=h.index;d!==null&&(p.version<d.version&&l(h))}else l(h);return r.get(h)}return{get:a,update:c,getWireframeAttribute:u}}function tv(e,t,n,i){const o=i.isWebGL2;let r;function s(p){r=p}let a,c;function l(p){a=p.type,c=p.bytesPerElement}function u(p,d){e.drawElements(r,d,a,p*c),n.update(d,r,1)}function h(p,d,m){if(m===0)return;let y,v;if(o)y=e,v="drawElementsInstanced";else if(y=t.get("ANGLE_instanced_arrays"),v="drawElementsInstancedANGLE",y===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}y[v](r,d,a,p*c,m),n.update(d,r,m)}this.setMode=s,this.setIndex=l,this.render=u,this.renderInstances=h}function nv(e){const t={geometries:0,textures:0},n={frame:0,calls:0,triangles:0,points:0,lines:0};function i(r,s,a){n.calls++;switch(s){case 4:n.triangles+=a*(r/3);break;case 1:n.lines+=a*(r/2);break;case 3:n.lines+=a*(r-1);break;case 2:n.lines+=a*r;break;case 0:n.points+=a*r;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",s);break}}function o(){n.frame++,n.calls=0,n.triangles=0,n.points=0,n.lines=0}return{memory:t,render:n,programs:null,autoReset:!0,reset:o,update:i}}function iv(e,t){return e[0]-t[0]}function ov(e,t){return Math.abs(t[1])-Math.abs(e[1])}function rv(e){const t={},n=new Float32Array(8),i=[];for(let r=0;r<8;r++)i[r]=[r,0];function o(r,s,a,c){const l=r.morphTargetInfluences,u=l===void 0?0:l.length;let h=t[s.id];if(h===void 0){h=[];for(let v=0;v<u;v++)h[v]=[v,0];t[s.id]=h}for(let v=0;v<u;v++){const g=h[v];g[0]=v,g[1]=l[v]}h.sort(ov);for(let v=0;v<8;v++)v<u&&h[v][1]?(i[v][0]=h[v][0],i[v][1]=h[v][1]):(i[v][0]=Number.MAX_SAFE_INTEGER,i[v][1]=0);i.sort(iv);const p=a.morphTargets&&s.morphAttributes.position,d=a.morphNormals&&s.morphAttributes.normal;let m=0;for(let v=0;v<8;v++){const g=i[v],f=g[0],w=g[1];f!==Number.MAX_SAFE_INTEGER&&w?(p&&s.getAttribute("morphTarget"+v)!==p[f]&&s.setAttribute("morphTarget"+v,p[f]),d&&s.getAttribute("morphNormal"+v)!==d[f]&&s.setAttribute("morphNormal"+v,d[f]),n[v]=w,m+=w):(p&&s.getAttribute("morphTarget"+v)!==void 0&&s.deleteAttribute("morphTarget"+v),d&&s.getAttribute("morphNormal"+v)!==void 0&&s.deleteAttribute("morphNormal"+v),n[v]=0)}const y=s.morphTargetsRelative?1:1-m;c.getUniforms().setValue(e,"morphTargetBaseInfluence",y),c.getUniforms().setValue(e,"morphTargetInfluences",n)}return{update:o}}function sv(e,t,n,i){let o=new WeakMap;function r(a){const c=i.render.frame,l=a.geometry,u=t.get(a,l);return o.get(u)!==c&&(l.isGeometry&&u.updateFromObject(a),t.update(u),o.set(u,c)),a.isInstancedMesh&&(n.update(a.instanceMatrix,34962),a.instanceColor!==null&&n.update(a.instanceColor,34962)),u}function s(){o=new WeakMap}return{update:r,dispose:s}}function _o(e,t,n,i){qe.call(this,null),this.image={data:e||null,width:t||1,height:n||1,depth:i||1},this.magFilter=ft,this.minFilter=ft,this.wrapR=Et,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}_o.prototype=Object.create(qe.prototype);_o.prototype.constructor=_o;_o.prototype.isDataTexture2DArray=!0;function Mo(e,t,n,i){qe.call(this,null),this.image={data:e||null,width:t||1,height:n||1,depth:i||1},this.magFilter=ft,this.minFilter=ft,this.wrapR=Et,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}Mo.prototype=Object.create(qe.prototype);Mo.prototype.constructor=Mo;Mo.prototype.isDataTexture3D=!0;const _l=new qe,av=new _o,cv=new Mo,Ml=new In,Sl=[],El=[],Tl=new Float32Array(16),Al=new Float32Array(9),Cl=new Float32Array(4);function Ni(e,t,n){const i=e[0];if(i<=0||i>0)return e;const o=t*n;let r=Sl[o];if(r===void 0&&(r=new Float32Array(o),Sl[o]=r),t!==0){i.toArray(r,0);for(let s=1,a=0;s!==t;++s)a+=n,e[s].toArray(r,a)}return r}function Lt(e,t){if(e.length!==t.length)return!1;for(let n=0,i=e.length;n<i;n++)if(e[n]!==t[n])return!1;return!0}function Ct(e,t){for(let n=0,i=t.length;n<i;n++)e[n]=t[n]}function Rl(e,t){let n=El[t];n===void 0&&(n=new Int32Array(t),El[t]=n);for(let i=0;i!==t;++i)n[i]=e.allocateTextureUnit();return n}function lv(e,t){const n=this.cache;if(n[0]===t)return;e.uniform1f(this.addr,t),n[0]=t}function hv(e,t){const n=this.cache;if(t.x!==void 0)(n[0]!==t.x||n[1]!==t.y)&&(e.uniform2f(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(Lt(n,t))return;e.uniform2fv(this.addr,t),Ct(n,t)}}function uv(e,t){const n=this.cache;if(t.x!==void 0)(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z)&&(e.uniform3f(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else if(t.r!==void 0)(n[0]!==t.r||n[1]!==t.g||n[2]!==t.b)&&(e.uniform3f(this.addr,t.r,t.g,t.b),n[0]=t.r,n[1]=t.g,n[2]=t.b);else{if(Lt(n,t))return;e.uniform3fv(this.addr,t),Ct(n,t)}}function dv(e,t){const n=this.cache;if(t.x!==void 0)(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w)&&(e.uniform4f(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(Lt(n,t))return;e.uniform4fv(this.addr,t),Ct(n,t)}}function pv(e,t){const n=this.cache,i=t.elements;if(i===void 0){if(Lt(n,t))return;e.uniformMatrix2fv(this.addr,!1,t),Ct(n,t)}else{if(Lt(n,i))return;Cl.set(i),e.uniformMatrix2fv(this.addr,!1,Cl),Ct(n,i)}}function fv(e,t){const n=this.cache,i=t.elements;if(i===void 0){if(Lt(n,t))return;e.uniformMatrix3fv(this.addr,!1,t),Ct(n,t)}else{if(Lt(n,i))return;Al.set(i),e.uniformMatrix3fv(this.addr,!1,Al),Ct(n,i)}}function mv(e,t){const n=this.cache,i=t.elements;if(i===void 0){if(Lt(n,t))return;e.uniformMatrix4fv(this.addr,!1,t),Ct(n,t)}else{if(Lt(n,i))return;Tl.set(i),e.uniformMatrix4fv(this.addr,!1,Tl),Ct(n,i)}}function gv(e,t,n){const i=this.cache,o=n.allocateTextureUnit();i[0]!==o&&(e.uniform1i(this.addr,o),i[0]=o),n.safeSetTexture2D(t||_l,o)}function yv(e,t,n){const i=this.cache,o=n.allocateTextureUnit();i[0]!==o&&(e.uniform1i(this.addr,o),i[0]=o),n.setTexture2DArray(t||av,o)}function vv(e,t,n){const i=this.cache,o=n.allocateTextureUnit();i[0]!==o&&(e.uniform1i(this.addr,o),i[0]=o),n.setTexture3D(t||cv,o)}function xv(e,t,n){const i=this.cache,o=n.allocateTextureUnit();i[0]!==o&&(e.uniform1i(this.addr,o),i[0]=o),n.safeSetTextureCube(t||Ml,o)}function bv(e,t){const n=this.cache;if(n[0]===t)return;e.uniform1i(this.addr,t),n[0]=t}function wv(e,t){const n=this.cache;if(Lt(n,t))return;e.uniform2iv(this.addr,t),Ct(n,t)}function _v(e,t){const n=this.cache;if(Lt(n,t))return;e.uniform3iv(this.addr,t),Ct(n,t)}function Mv(e,t){const n=this.cache;if(Lt(n,t))return;e.uniform4iv(this.addr,t),Ct(n,t)}function Sv(e,t){const n=this.cache;if(n[0]===t)return;e.uniform1ui(this.addr,t),n[0]=t}function Ev(e){switch(e){case 5126:return lv;case 35664:return hv;case 35665:return uv;case 35666:return dv;case 35674:return pv;case 35675:return fv;case 35676:return mv;case 5124:case 35670:return bv;case 35667:case 35671:return wv;case 35668:case 35672:return _v;case 35669:case 35673:return Mv;case 5125:return Sv;case 35678:case 36198:case 36298:case 36306:case 35682:return gv;case 35679:case 36299:case 36307:return vv;case 35680:case 36300:case 36308:case 36293:return xv;case 36289:case 36303:case 36311:case 36292:return yv}}function Tv(e,t){e.uniform1fv(this.addr,t)}function Av(e,t){e.uniform1iv(this.addr,t)}function Cv(e,t){e.uniform2iv(this.addr,t)}function Rv(e,t){e.uniform3iv(this.addr,t)}function Pv(e,t){e.uniform4iv(this.addr,t)}function Lv(e,t){const n=Ni(t,this.size,2);e.uniform2fv(this.addr,n)}function Bv(e,t){const n=Ni(t,this.size,3);e.uniform3fv(this.addr,n)}function Iv(e,t){const n=Ni(t,this.size,4);e.uniform4fv(this.addr,n)}function Nv(e,t){const n=Ni(t,this.size,4);e.uniformMatrix2fv(this.addr,!1,n)}function zv(e,t){const n=Ni(t,this.size,9);e.uniformMatrix3fv(this.addr,!1,n)}function Fv(e,t){const n=Ni(t,this.size,16);e.uniformMatrix4fv(this.addr,!1,n)}function Dv(e,t,n){const i=t.length,o=Rl(n,i);e.uniform1iv(this.addr,o);for(let r=0;r!==i;++r)n.safeSetTexture2D(t[r]||_l,o[r])}function Ov(e,t,n){const i=t.length,o=Rl(n,i);e.uniform1iv(this.addr,o);for(let r=0;r!==i;++r)n.safeSetTextureCube(t[r]||Ml,o[r])}function kv(e){switch(e){case 5126:return Tv;case 35664:return Lv;case 35665:return Bv;case 35666:return Iv;case 35674:return Nv;case 35675:return zv;case 35676:return Fv;case 5124:case 35670:return Av;case 35667:case 35671:return Cv;case 35668:case 35672:return Rv;case 35669:case 35673:return Pv;case 35678:case 36198:case 36298:case 36306:case 35682:return Dv;case 35680:case 36300:case 36308:case 36293:return Ov}}function Gv(e,t,n){this.id=e,this.addr=n,this.cache=[],this.setValue=Ev(t.type)}function Pl(e,t,n){this.id=e,this.addr=n,this.cache=[],this.size=t.size,this.setValue=kv(t.type)}Pl.prototype.updateCache=function(e){const t=this.cache;e instanceof Float32Array&&t.length!==e.length&&(this.cache=new Float32Array(e.length)),Ct(t,e)};function Ll(e){this.id=e,this.seq=[],this.map={}}Ll.prototype.setValue=function(e,t,n){const i=this.seq;for(let o=0,r=i.length;o!==r;++o){const s=i[o];s.setValue(e,t[s.id],n)}};const oa=/([\w\d_]+)(\])?(\[|\.)?/g;function Bl(e,t){e.seq.push(t),e.map[t.id]=t}function Vv(e,t,n){const i=e.name,o=i.length;for(oa.lastIndex=0;;){const r=oa.exec(i),s=oa.lastIndex;let a=r[1];const c=r[2]==="]",l=r[3];if(c&&(a=a|0),l===void 0||l==="["&&s+2===o){Bl(n,l===void 0?new Gv(a,e,t):new Pl(a,e,t));break}else{const u=n.map;let h=u[a];h===void 0&&(h=new Ll(a),Bl(n,h)),n=h}}}function Nn(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,35718);for(let i=0;i<n;++i){const o=e.getActiveUniform(t,i),r=e.getUniformLocation(t,o.name);Vv(o,r,this)}}Nn.prototype.setValue=function(e,t,n,i){const o=this.map[t];o!==void 0&&o.setValue(e,n,i)};Nn.prototype.setOptional=function(e,t,n){const i=t[n];i!==void 0&&this.setValue(e,n,i)};Nn.upload=function(e,t,n,i){for(let o=0,r=t.length;o!==r;++o){const s=t[o],a=n[s.id];a.needsUpdate!==!1&&s.setValue(e,a.value,i)}};Nn.seqWithValue=function(e,t){const n=[];for(let i=0,o=e.length;i!==o;++i){const r=e[i];r.id in t&&n.push(r)}return n};function Il(e,t,n){const i=e.createShader(t);return e.shaderSource(i,n),e.compileShader(i),i}let Uv=0;function Hv(e){const t=e.split(`
`);for(let n=0;n<t.length;n++)t[n]=n+1+": "+t[n];return t.join(`
`)}function Nl(e){switch(e){case pi:return["Linear","( value )"];case Rs:return["sRGB","( value )"];case tl:return["RGBE","( value )"];case nl:return["RGBM","( value, 7.0 )"];case il:return["RGBM","( value, 16.0 )"];case ol:return["RGBD","( value, 256.0 )"];case el:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case im:return["LogLuv","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",e),["Linear","( value )"]}}function zl(e,t,n){const i=e.getShaderParameter(t,35713),o=e.getShaderInfoLog(t).trim();if(i&&o==="")return"";const r=e.getShaderSource(t);return"THREE.WebGLShader: gl.getShaderInfoLog() "+n+`
`+o+Hv(r)}function So(e,t){const n=Nl(t);return"vec4 "+e+"( vec4 value ) { return "+n[0]+"ToLinear"+n[1]+"; }"}function Wv(e,t){const n=Nl(t);return"vec4 "+e+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}function jv(e,t){let n;switch(t){case tf:n="Linear";break;case nf:n="Reinhard";break;case of:n="OptimizedCineon";break;case rf:n="ACESFilmic";break;case sf:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),n="Linear"}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function qv(e){const t=[e.extensionDerivatives||e.envMapCubeUV||e.bumpMap||e.tangentSpaceNormalMap||e.clearcoatNormalMap||e.flatShading||e.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(e.extensionFragDepth||e.logarithmicDepthBuffer)&&e.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",e.extensionDrawBuffers&&e.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(e.extensionShaderTextureLOD||e.envMap)&&e.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""];return t.filter(Eo).join(`
`)}function Xv(e){const t=[];for(const n in e){const i=e[n];if(i===!1)continue;t.push("#define "+n+" "+i)}return t.join(`
`)}function Yv(e,t){const n={},i=e.getProgramParameter(t,35721);for(let o=0;o<i;o++){const r=e.getActiveAttrib(t,o),s=r.name;n[s]=e.getAttribLocation(t,s)}return n}function Eo(e){return e!==""}function Fl(e,t){return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function Dl(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const Zv=/^[ \t]*#include +<([\w\d./]+)>/gm;function ra(e){return e.replace(Zv,Jv)}function Jv(e,t){const n=Be[t];if(n===void 0)throw new Error("Can not resolve #include <"+t+">");return ra(n)}const Qv=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,Kv=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function kl(e){return e.replace(Kv,Ol).replace(Qv,$v)}function $v(e,t,n,i){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),Ol(e,t,n,i)}function Ol(e,t,n,i){let o="";for(let r=parseInt(t);r<parseInt(n);r++)o+=i.replace(/\[\s*i\s*\]/g,"[ "+r+" ]").replace(/UNROLLED_LOOP_INDEX/g,r);return o}function Gl(e){let t="precision "+e.precision+` float;
precision `+e.precision+" int;";return e.precision==="highp"?t+=`
#define HIGH_PRECISION`:e.precision==="mediump"?t+=`
#define MEDIUM_PRECISION`:e.precision==="lowp"&&(t+=`
#define LOW_PRECISION`),t}function ex(e){let t="SHADOWMAP_TYPE_BASIC";return e.shadowMapType===Rc?t="SHADOWMAP_TYPE_PCF":e.shadowMapType===vs?t="SHADOWMAP_TYPE_PCF_SOFT":e.shadowMapType===ro&&(t="SHADOWMAP_TYPE_VSM"),t}function tx(e){let t="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case bs:case ws:t="ENVMAP_TYPE_CUBE";break;case _s:case Ms:t="ENVMAP_TYPE_CUBE_UV";break}return t}function nx(e){let t="ENVMAP_MODE_REFLECTION";if(e.envMap)switch(e.envMapMode){case ws:case Ms:t="ENVMAP_MODE_REFRACTION";break}return t}function ix(e){let t="ENVMAP_BLENDING_NONE";if(e.envMap)switch(e.combine){case er:t="ENVMAP_BLENDING_MULTIPLY";break;case $p:t="ENVMAP_BLENDING_MIX";break;case ef:t="ENVMAP_BLENDING_ADD";break}return t}function ox(e,t,n,i){const o=e.getContext(),r=n.defines;let s=n.vertexShader,a=n.fragmentShader;const c=ex(n),l=tx(n),u=nx(n),h=ix(n),p=e.gammaFactor>0?e.gammaFactor:1,d=n.isWebGL2?"":qv(n),m=Xv(r),y=o.createProgram();let v,g,f=n.glslVersion?"#version "+n.glslVersion+`
`:"";n.isRawShaderMaterial?(v=[m].filter(Eo).join(`
`),v.length>0&&(v+=`
`),g=[d,m].filter(Eo).join(`
`),g.length>0&&(g+=`
`)):(v=[Gl(n),"#define SHADER_NAME "+n.shaderName,m,n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+p,"#define MAX_BONES "+n.maxBones,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+u:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.displacementMap&&n.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.useVertexTexture?"#define BONE_TEXTURE":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&n.flatShading===!1?"#define USE_MORPHNORMALS":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+c:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#ifdef USE_COLOR","	attribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(Eo).join(`
`),g=[d,Gl(n),"#define SHADER_NAME "+n.shaderName,m,n.alphaTest?"#define ALPHATEST "+n.alphaTest+(n.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+p,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+l:"",n.envMap?"#define "+u:"",n.envMap?"#define "+h:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.sheen?"#define USE_SHEEN":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor?"#define USE_COLOR":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+c:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(n.extensionShaderTextureLOD||n.envMap)&&n.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==co?"#define TONE_MAPPING":"",n.toneMapping!==co?Be.tonemapping_pars_fragment:"",n.toneMapping!==co?jv("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",Be.encodings_pars_fragment,n.map?So("mapTexelToLinear",n.mapEncoding):"",n.matcap?So("matcapTexelToLinear",n.matcapEncoding):"",n.envMap?So("envMapTexelToLinear",n.envMapEncoding):"",n.emissiveMap?So("emissiveMapTexelToLinear",n.emissiveMapEncoding):"",n.lightMap?So("lightMapTexelToLinear",n.lightMapEncoding):"",Wv("linearToOutputTexel",n.outputEncoding),n.depthPacking?"#define DEPTH_PACKING "+n.depthPacking:"",`
`].filter(Eo).join(`
`)),s=ra(s),s=Fl(s,n),s=Dl(s,n),a=ra(a),a=Fl(a,n),a=Dl(a,n),s=kl(s),a=kl(a),n.isWebGL2&&n.isRawShaderMaterial!==!0&&(f=`#version 300 es
`,v=["#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+v,g=["#define varying in",n.glslVersion===rl?"":"out highp vec4 pc_fragColor;",n.glslVersion===rl?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+g);const w=f+v+s,_=f+g+a,M=Il(o,35633,w),b=Il(o,35632,_);if(o.attachShader(y,M),o.attachShader(y,b),n.index0AttributeName!==void 0?o.bindAttribLocation(y,0,n.index0AttributeName):n.morphTargets===!0&&o.bindAttribLocation(y,0,"position"),o.linkProgram(y),e.debug.checkShaderErrors){const B=o.getProgramInfoLog(y).trim(),V=o.getShaderInfoLog(M).trim(),N=o.getShaderInfoLog(b).trim();let I=!0,L=!0;if(o.getProgramParameter(y,35714)===!1){I=!1;const C=zl(o,M,"vertex"),S=zl(o,b,"fragment");console.error("THREE.WebGLProgram: shader error: ",o.getError(),"35715",o.getProgramParameter(y,35715),"gl.getProgramInfoLog",B,C,S)}else B!==""?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",B):(V===""||N==="")&&(L=!1);L&&(this.diagnostics={runnable:I,programLog:B,vertexShader:{log:V,prefix:v},fragmentShader:{log:N,prefix:g}})}o.deleteShader(M),o.deleteShader(b);let P;this.getUniforms=function(){return P===void 0&&(P=new Nn(o,y)),P};let D;return this.getAttributes=function(){return D===void 0&&(D=Yv(o,y)),D},this.destroy=function(){i.releaseStatesOfProgram(this),o.deleteProgram(y),this.program=void 0},this.name=n.shaderName,this.id=Uv++,this.cacheKey=t,this.usedTimes=1,this.program=y,this.vertexShader=M,this.fragmentShader=b,this}function rx(e,t,n,i,o,r){const s=[],a=i.isWebGL2,c=i.logarithmicDepthBuffer,l=i.floatVertexTextures,u=i.maxVertexUniforms,h=i.vertexTextures;let p=i.precision;const d={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},m=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","instancingColor","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen","transmissionMap"];function y(b){const P=b.skeleton,D=P.bones;if(l)return 1024;{const B=u,V=Math.floor((B-20)/4),N=Math.min(V,D.length);return N<D.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+D.length+" bones. This GPU supports "+N+"."),0):N}}function v(b){let P;return b?b.isTexture?P=b.encoding:b.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),P=b.texture.encoding):P=pi,P}function g(b,P,D,B,V){const N=B.fog,I=b.isMeshStandardMaterial?B.environment:null,L=t.get(b.envMap||I),C=d[b.type],S=V.isSkinnedMesh?y(V):0;b.precision!==null&&(p=i.getMaxPrecision(b.precision),p!==b.precision&&console.warn("THREE.WebGLProgram.getParameters:",b.precision,"not supported, using",p,"instead."));let F,k;if(C){const ne=qt[C];F=ne.vertexShader,k=ne.fragmentShader}else F=b.vertexShader,k=b.fragmentShader;const U=e.getRenderTarget(),Z={isWebGL2:a,shaderID:C,shaderName:b.type,vertexShader:F,fragmentShader:k,defines:b.defines,isRawShaderMaterial:b.isRawShaderMaterial===!0,glslVersion:b.glslVersion,precision:p,instancing:V.isInstancedMesh===!0,instancingColor:V.isInstancedMesh===!0&&V.instanceColor!==null,supportsVertexTextures:h,outputEncoding:U!==null?v(U.texture):e.outputEncoding,map:!!b.map,mapEncoding:v(b.map),matcap:!!b.matcap,matcapEncoding:v(b.matcap),envMap:!!L,envMapMode:L&&L.mapping,envMapEncoding:v(L),envMapCubeUV:!!L&&(L.mapping===_s||L.mapping===Ms),lightMap:!!b.lightMap,lightMapEncoding:v(b.lightMap),aoMap:!!b.aoMap,emissiveMap:!!b.emissiveMap,emissiveMapEncoding:v(b.emissiveMap),bumpMap:!!b.bumpMap,normalMap:!!b.normalMap,objectSpaceNormalMap:b.normalMapType===sm,tangentSpaceNormalMap:b.normalMapType===fi,clearcoatMap:!!b.clearcoatMap,clearcoatRoughnessMap:!!b.clearcoatRoughnessMap,clearcoatNormalMap:!!b.clearcoatNormalMap,displacementMap:!!b.displacementMap,roughnessMap:!!b.roughnessMap,metalnessMap:!!b.metalnessMap,specularMap:!!b.specularMap,alphaMap:!!b.alphaMap,gradientMap:!!b.gradientMap,sheen:!!b.sheen,transmissionMap:!!b.transmissionMap,combine:b.combine,vertexTangents:b.normalMap&&b.vertexTangents,vertexColors:b.vertexColors,vertexUvs:!!b.map||!!b.bumpMap||!!b.normalMap||!!b.specularMap||!!b.alphaMap||!!b.emissiveMap||!!b.roughnessMap||!!b.metalnessMap||!!b.clearcoatMap||!!b.clearcoatRoughnessMap||!!b.clearcoatNormalMap||!!b.displacementMap||!!b.transmissionMap,uvsVertexOnly:!(!!b.map||!!b.bumpMap||!!b.normalMap||!!b.specularMap||!!b.alphaMap||!!b.emissiveMap||!!b.roughnessMap||!!b.metalnessMap||!!b.clearcoatNormalMap||!!b.transmissionMap)&&!!b.displacementMap,fog:!!N,useFog:b.fog,fogExp2:N&&N.isFogExp2,flatShading:b.flatShading,sizeAttenuation:b.sizeAttenuation,logarithmicDepthBuffer:c,skinning:b.skinning&&S>0,maxBones:S,useVertexTexture:l,morphTargets:b.morphTargets,morphNormals:b.morphNormals,maxMorphTargets:e.maxMorphTargets,maxMorphNormals:e.maxMorphNormals,numDirLights:P.directional.length,numPointLights:P.point.length,numSpotLights:P.spot.length,numRectAreaLights:P.rectArea.length,numHemiLights:P.hemi.length,numDirLightShadows:P.directionalShadowMap.length,numPointLightShadows:P.pointShadowMap.length,numSpotLightShadows:P.spotShadowMap.length,numClippingPlanes:r.numPlanes,numClipIntersection:r.numIntersection,dithering:b.dithering,shadowMapEnabled:e.shadowMap.enabled&&D.length>0,shadowMapType:e.shadowMap.type,toneMapping:b.toneMapped?e.toneMapping:co,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:b.premultipliedAlpha,alphaTest:b.alphaTest,doubleSided:b.side===$o,flipSided:b.side===ct,depthPacking:b.depthPacking!==void 0?b.depthPacking:!1,index0AttributeName:b.index0AttributeName,extensionDerivatives:b.extensions&&b.extensions.derivatives,extensionFragDepth:b.extensions&&b.extensions.fragDepth,extensionDrawBuffers:b.extensions&&b.extensions.drawBuffers,extensionShaderTextureLOD:b.extensions&&b.extensions.shaderTextureLOD,rendererExtensionFragDepth:a||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:a||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:a||n.has("EXT_shader_texture_lod"),customProgramCacheKey:b.customProgramCacheKey()};return Z}function f(b){const P=[];if(b.shaderID?P.push(b.shaderID):(P.push(b.fragmentShader),P.push(b.vertexShader)),b.defines!==void 0)for(const D in b.defines)P.push(D),P.push(b.defines[D]);if(b.isRawShaderMaterial===!1){for(let D=0;D<m.length;D++)P.push(b[m[D]]);P.push(e.outputEncoding),P.push(e.gammaFactor)}return P.push(b.customProgramCacheKey),P.join()}function w(b){const P=d[b.type];let D;if(P){const B=qt[P];D=_m.clone(B.uniforms)}else D=b.uniforms;return D}function _(b,P){let D;for(let B=0,V=s.length;B<V;B++){const N=s[B];if(N.cacheKey===P){D=N,++D.usedTimes;break}}return D===void 0&&(D=new ox(e,P,b,o),s.push(D)),D}function M(b){if(--b.usedTimes===0){const P=s.indexOf(b);s[P]=s[s.length-1],s.pop(),b.destroy()}}return{getParameters:g,getProgramCacheKey:f,getUniforms:w,acquireProgram:_,releaseProgram:M,programs:s}}function sx(){let e=new WeakMap;function t(r){let s=e.get(r);return s===void 0&&(s={},e.set(r,s)),s}function n(r){e.delete(r)}function i(r,s,a){e.get(r)[s]=a}function o(){e=new WeakMap}return{get:t,remove:n,update:i,dispose:o}}function ax(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program!==t.program?e.program.id-t.program.id:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function cx(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function Vl(e){const t=[];let n=0;const i=[],o=[],r={id:-1};function s(){n=0,i.length=0,o.length=0}function a(p,d,m,y,v,g){let f=t[n];const w=e.get(m);return f===void 0?(f={id:p.id,object:p,geometry:d,material:m,program:w.program||r,groupOrder:y,renderOrder:p.renderOrder,z:v,group:g},t[n]=f):(f.id=p.id,f.object=p,f.geometry=d,f.material=m,f.program=w.program||r,f.groupOrder=y,f.renderOrder=p.renderOrder,f.z=v,f.group=g),n++,f}function c(p,d,m,y,v,g){const f=a(p,d,m,y,v,g);(m.transparent===!0?o:i).push(f)}function l(p,d,m,y,v,g){const f=a(p,d,m,y,v,g);(m.transparent===!0?o:i).unshift(f)}function u(p,d){i.length>1&&i.sort(p||ax),o.length>1&&o.sort(d||cx)}function h(){for(let p=n,d=t.length;p<d;p++){const m=t[p];if(m.id===null)break;m.id=null,m.object=null,m.geometry=null,m.material=null,m.program=null,m.group=null}}return{opaque:i,transparent:o,init:s,push:c,unshift:l,finish:h,sort:u}}function lx(e){let t=new WeakMap;function n(o,r){const s=t.get(o);let a;return s===void 0?(a=new Vl(e),t.set(o,new WeakMap),t.get(o).set(r,a)):(a=s.get(r),a===void 0&&(a=new Vl(e),s.set(r,a))),a}function i(){t=new WeakMap}return{get:n,dispose:i}}function hx(){const e={};return{get:function(t){if(e[t.id]!==void 0)return e[t.id];let n;switch(t.type){case"DirectionalLight":n={direction:new A,color:new ue};break;case"SpotLight":n={position:new A,direction:new A,color:new ue,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new A,color:new ue,distance:0,decay:0};break;case"HemisphereLight":n={direction:new A,skyColor:new ue,groundColor:new ue};break;case"RectAreaLight":n={color:new ue,position:new A,halfWidth:new A,halfHeight:new A};break}return e[t.id]=n,n}}}function ux(){const e={};return{get:function(t){if(e[t.id]!==void 0)return e[t.id];let n;switch(t.type){case"DirectionalLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new X};break;case"SpotLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new X};break;case"PointLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new X,shadowCameraNear:1,shadowCameraFar:1e3};break}return e[t.id]=n,n}}}let dx=0;function px(e,t){return(t.castShadow?1:0)-(e.castShadow?1:0)}function fx(){const e=new hx,t=ux(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let a=0;a<9;a++)n.probe.push(new A);const i=new A,o=new Re,r=new Re;function s(a,c,l){let u=0,h=0,p=0;for(let P=0;P<9;P++)n.probe[P].set(0,0,0);let d=0,m=0,y=0,v=0,g=0,f=0,w=0,_=0;const M=l.matrixWorldInverse;a.sort(px);for(let P=0,D=a.length;P<D;P++){const B=a[P],V=B.color,N=B.intensity,I=B.distance,L=B.shadow&&B.shadow.map?B.shadow.map.texture:null;if(B.isAmbientLight)u+=V.r*N,h+=V.g*N,p+=V.b*N;else if(B.isLightProbe)for(let C=0;C<9;C++)n.probe[C].addScaledVector(B.sh.coefficients[C],N);else if(B.isDirectionalLight){const C=e.get(B);if(C.color.copy(B.color).multiplyScalar(B.intensity),C.direction.setFromMatrixPosition(B.matrixWorld),i.setFromMatrixPosition(B.target.matrixWorld),C.direction.sub(i),C.direction.transformDirection(M),B.castShadow){const S=B.shadow,F=t.get(B);F.shadowBias=S.bias,F.shadowNormalBias=S.normalBias,F.shadowRadius=S.radius,F.shadowMapSize=S.mapSize,n.directionalShadow[d]=F,n.directionalShadowMap[d]=L,n.directionalShadowMatrix[d]=B.shadow.matrix,f++}n.directional[d]=C,d++}else if(B.isSpotLight){const C=e.get(B);if(C.position.setFromMatrixPosition(B.matrixWorld),C.position.applyMatrix4(M),C.color.copy(V).multiplyScalar(N),C.distance=I,C.direction.setFromMatrixPosition(B.matrixWorld),i.setFromMatrixPosition(B.target.matrixWorld),C.direction.sub(i),C.direction.transformDirection(M),C.coneCos=Math.cos(B.angle),C.penumbraCos=Math.cos(B.angle*(1-B.penumbra)),C.decay=B.decay,B.castShadow){const S=B.shadow,F=t.get(B);F.shadowBias=S.bias,F.shadowNormalBias=S.normalBias,F.shadowRadius=S.radius,F.shadowMapSize=S.mapSize,n.spotShadow[y]=F,n.spotShadowMap[y]=L,n.spotShadowMatrix[y]=B.shadow.matrix,_++}n.spot[y]=C,y++}else if(B.isRectAreaLight){const C=e.get(B);C.color.copy(V).multiplyScalar(N),C.position.setFromMatrixPosition(B.matrixWorld),C.position.applyMatrix4(M),r.identity(),o.copy(B.matrixWorld),o.premultiply(M),r.extractRotation(o),C.halfWidth.set(B.width*.5,0,0),C.halfHeight.set(0,B.height*.5,0),C.halfWidth.applyMatrix4(r),C.halfHeight.applyMatrix4(r),n.rectArea[v]=C,v++}else if(B.isPointLight){const C=e.get(B);if(C.position.setFromMatrixPosition(B.matrixWorld),C.position.applyMatrix4(M),C.color.copy(B.color).multiplyScalar(B.intensity),C.distance=B.distance,C.decay=B.decay,B.castShadow){const S=B.shadow,F=t.get(B);F.shadowBias=S.bias,F.shadowNormalBias=S.normalBias,F.shadowRadius=S.radius,F.shadowMapSize=S.mapSize,F.shadowCameraNear=S.camera.near,F.shadowCameraFar=S.camera.far,n.pointShadow[m]=F,n.pointShadowMap[m]=L,n.pointShadowMatrix[m]=B.shadow.matrix,w++}n.point[m]=C,m++}else if(B.isHemisphereLight){const C=e.get(B);C.direction.setFromMatrixPosition(B.matrixWorld),C.direction.transformDirection(M),C.direction.normalize(),C.skyColor.copy(B.color).multiplyScalar(N),C.groundColor.copy(B.groundColor).multiplyScalar(N),n.hemi[g]=C,g++}}v>0&&(n.rectAreaLTC1=oe.LTC_1,n.rectAreaLTC2=oe.LTC_2),n.ambient[0]=u,n.ambient[1]=h,n.ambient[2]=p;const b=n.hash;(b.directionalLength!==d||b.pointLength!==m||b.spotLength!==y||b.rectAreaLength!==v||b.hemiLength!==g||b.numDirectionalShadows!==f||b.numPointShadows!==w||b.numSpotShadows!==_)&&(n.directional.length=d,n.spot.length=y,n.rectArea.length=v,n.point.length=m,n.hemi.length=g,n.directionalShadow.length=f,n.directionalShadowMap.length=f,n.pointShadow.length=w,n.pointShadowMap.length=w,n.spotShadow.length=_,n.spotShadowMap.length=_,n.directionalShadowMatrix.length=f,n.pointShadowMatrix.length=w,n.spotShadowMatrix.length=_,b.directionalLength=d,b.pointLength=m,b.spotLength=y,b.rectAreaLength=v,b.hemiLength=g,b.numDirectionalShadows=f,b.numPointShadows=w,b.numSpotShadows=_,n.version=dx++)}return{setup:s,state:n}}function Ul(){const e=new fx,t=[],n=[];function i(){t.length=0,n.length=0}function o(c){t.push(c)}function r(c){n.push(c)}function s(c){e.setup(t,n,c)}const a={lightsArray:t,shadowsArray:n,lights:e};return{init:i,state:a,setupLights:s,pushLight:o,pushShadow:r}}function mx(){let e=new WeakMap;function t(i,o){let r;return e.has(i)===!1?(r=new Ul,e.set(i,new WeakMap),e.get(i).set(o,r)):e.get(i).has(o)===!1?(r=new Ul,e.get(i).set(o,r)):r=e.get(i).get(o),r}function n(){e=new WeakMap}return{get:t,dispose:n}}function Kn(e){ve.call(this),this.type="MeshDepthMaterial",this.depthPacking=om,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(e)}Kn.prototype=Object.create(ve.prototype);Kn.prototype.constructor=Kn;Kn.prototype.isMeshDepthMaterial=!0;Kn.prototype.copy=function(e){return ve.prototype.copy.call(this,e),this.depthPacking=e.depthPacking,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this};function $n(e){ve.call(this),this.type="MeshDistanceMaterial",this.referencePosition=new A,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(e)}$n.prototype=Object.create(ve.prototype);$n.prototype.constructor=$n;$n.prototype.isMeshDistanceMaterial=!0;$n.prototype.copy=function(e){return ve.prototype.copy.call(this,e),this.referencePosition.copy(e.referencePosition),this.nearDistance=e.nearDistance,this.farDistance=e.farDistance,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this};var gx=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	float mean = 0.0;
	float squared_mean = 0.0;
	float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );
	for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {
		#ifdef HORIZONAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean * HALF_SAMPLE_RATE;
	squared_mean = squared_mean * HALF_SAMPLE_RATE;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`,yx=`void main() {
	gl_Position = vec4( position, 1.0 );
}`;function Hl(e,t,n){let i=new Sr;const o=new X,r=new X,s=new Ve,a=[],c=[],l={},u={0:ct,1:Ko,2:$o},h=new St({defines:{SAMPLE_RATE:2/8,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new X},radius:{value:4}},vertexShader:yx,fragmentShader:gx}),p=h.clone();p.defines.HORIZONAL_PASS=1;const d=new De;d.setAttribute("position",new Te(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const m=new at(d,h),y=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=Rc,this.render=function(M,b,P){if(y.enabled===!1)return;if(y.autoUpdate===!1&&y.needsUpdate===!1)return;if(M.length===0)return;const D=e.getRenderTarget(),B=e.getActiveCubeFace(),V=e.getActiveMipmapLevel(),N=e.state;N.setBlending(so),N.buffers.color.setClear(1,1,1,1),N.buffers.depth.setTest(!0),N.setScissorTest(!1);for(let I=0,L=M.length;I<L;I++){const C=M[I],S=C.shadow;if(S===void 0){console.warn("THREE.WebGLShadowMap:",C,"has no shadow.");continue}if(S.autoUpdate===!1&&S.needsUpdate===!1)continue;o.copy(S.mapSize);const F=S.getFrameExtents();if(o.multiply(F),r.copy(S.mapSize),(o.x>n||o.y>n)&&(o.x>n&&(r.x=Math.floor(n/F.x),o.x=r.x*F.x,S.mapSize.x=r.x),o.y>n&&(r.y=Math.floor(n/F.y),o.y=r.y*F.y,S.mapSize.y=r.y)),S.map===null&&!S.isPointLightShadow&&this.type===ro){const U={minFilter:ut,magFilter:ut,format:Ft};S.map=new Dt(o.x,o.y,U),S.map.texture.name=C.name+".shadowMap",S.mapPass=new Dt(o.x,o.y,U),S.camera.updateProjectionMatrix()}if(S.map===null){const U={minFilter:ft,magFilter:ft,format:Ft};S.map=new Dt(o.x,o.y,U),S.map.texture.name=C.name+".shadowMap",S.camera.updateProjectionMatrix()}e.setRenderTarget(S.map),e.clear();const k=S.getViewportCount();for(let U=0;U<k;U++){const Z=S.getViewport(U);s.set(r.x*Z.x,r.y*Z.y,r.x*Z.z,r.y*Z.w),N.viewport(s),S.updateMatrices(C,U),i=S.getFrustum(),_(b,P,S.camera,C,this.type)}!S.isPointLightShadow&&this.type===ro&&v(S,P),S.needsUpdate=!1}y.needsUpdate=!1,e.setRenderTarget(D,B,V)};function v(M,b){const P=t.update(m);h.uniforms.shadow_pass.value=M.map.texture,h.uniforms.resolution.value=M.mapSize,h.uniforms.radius.value=M.radius,e.setRenderTarget(M.mapPass),e.clear(),e.renderBufferDirect(b,null,P,h,m,null),p.uniforms.shadow_pass.value=M.mapPass.texture,p.uniforms.resolution.value=M.mapSize,p.uniforms.radius.value=M.radius,e.setRenderTarget(M.map),e.clear(),e.renderBufferDirect(b,null,P,p,m,null)}function g(M,b,P){const D=M<<0|b<<1|P<<2;let B=a[D];return B===void 0&&(B=new Kn({depthPacking:rm,morphTargets:M,skinning:b}),a[D]=B),B}function f(M,b,P){const D=M<<0|b<<1|P<<2;let B=c[D];return B===void 0&&(B=new $n({morphTargets:M,skinning:b}),c[D]=B),B}function w(M,b,P,D,B,V,N){let I=null,L=g,C=M.customDepthMaterial;if(D.isPointLight===!0&&(L=f,C=M.customDistanceMaterial),C===void 0){let S=!1;P.morphTargets===!0&&(S=b.morphAttributes&&b.morphAttributes.position&&b.morphAttributes.position.length>0);let F=!1;M.isSkinnedMesh===!0&&(P.skinning===!0?F=!0:console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",M));const k=M.isInstancedMesh===!0;I=L(S,F,k)}else I=C;if(e.localClippingEnabled&&P.clipShadows===!0&&P.clippingPlanes.length!==0){const S=I.uuid,F=P.uuid;let k=l[S];k===void 0&&(k={},l[S]=k);let U=k[F];U===void 0&&(U=I.clone(),k[F]=U),I=U}return I.visible=P.visible,I.wireframe=P.wireframe,N===ro?I.side=P.shadowSide!==null?P.shadowSide:P.side:I.side=P.shadowSide!==null?P.shadowSide:u[P.side],I.clipShadows=P.clipShadows,I.clippingPlanes=P.clippingPlanes,I.clipIntersection=P.clipIntersection,I.wireframeLinewidth=P.wireframeLinewidth,I.linewidth=P.linewidth,D.isPointLight===!0&&I.isMeshDistanceMaterial===!0&&(I.referencePosition.setFromMatrixPosition(D.matrixWorld),I.nearDistance=B,I.farDistance=V),I}function _(M,b,P,D,B){if(M.visible===!1)return;const V=M.layers.test(b.layers);if(V&&(M.isMesh||M.isLine||M.isPoints)&&((M.castShadow||M.receiveShadow&&B===ro)&&(!M.frustumCulled||i.intersectsObject(M)))){M.modelViewMatrix.multiplyMatrices(P.matrixWorldInverse,M.matrixWorld);const I=t.update(M),L=M.material;if(Array.isArray(L)){const C=I.groups;for(let S=0,F=C.length;S<F;S++){const k=C[S],U=L[k.materialIndex];if(U&&U.visible){const Z=w(M,I,U,D,P.near,P.far,B);e.renderBufferDirect(P,null,I,Z,M,k)}}}else if(L.visible){const C=w(M,I,L,D,P.near,P.far,B);e.renderBufferDirect(P,null,I,C,M,null)}}const N=M.children;for(let I=0,L=N.length;I<L;I++)_(N[I],b,P,D,B)}}function vx(e,t,n){const i=n.isWebGL2;function o(){let z=!1;const J=new Ve;let $=null;const me=new Ve(0,0,0,0);return{setMask:function(te){$!==te&&!z&&(e.colorMask(te,te,te,te),$=te)},setLocked:function(te){z=te},setClear:function(te,ae,fe,Me,se){se===!0&&(te*=Me,ae*=Me,fe*=Me),J.set(te,ae,fe,Me),me.equals(J)===!1&&(e.clearColor(te,ae,fe,Me),me.copy(J))},reset:function(){z=!1,$=null,me.set(-1,0,0,0)}}}function r(){let z=!1,J=null,$=null,me=null;return{setTest:function(te){te?ne(2929):j(2929)},setMask:function(te){J!==te&&!z&&(e.depthMask(te),J=te)},setFunc:function(te){if($!==te){if(te)switch(te){case qp:e.depthFunc(512);break;case Xp:e.depthFunc(519);break;case Yp:e.depthFunc(513);break;case xs:e.depthFunc(515);break;case Zp:e.depthFunc(514);break;case Jp:e.depthFunc(518);break;case Qp:e.depthFunc(516);break;case Kp:e.depthFunc(517);break;default:e.depthFunc(515)}else e.depthFunc(515);$=te}},setLocked:function(te){z=te},setClear:function(te){me!==te&&(e.clearDepth(te),me=te)},reset:function(){z=!1,J=null,$=null,me=null}}}function s(){let z=!1,J=null,$=null,me=null,te=null,ae=null,fe=null,Me=null,se=null;return{setTest:function(xe){z||(xe?ne(2960):j(2960))},setMask:function(xe){J!==xe&&!z&&(e.stencilMask(xe),J=xe)},setFunc:function(xe,Ke,bt){($!==xe||me!==Ke||te!==bt)&&(e.stencilFunc(xe,Ke,bt),$=xe,me=Ke,te=bt)},setOp:function(xe,Ke,bt){(ae!==xe||fe!==Ke||Me!==bt)&&(e.stencilOp(xe,Ke,bt),ae=xe,fe=Ke,Me=bt)},setLocked:function(xe){z=xe},setClear:function(xe){se!==xe&&(e.clearStencil(xe),se=xe)},reset:function(){z=!1,J=null,$=null,me=null,te=null,ae=null,fe=null,Me=null,se=null}}}const a=new o,c=new r,l=new s;let u={},h=null,p=null,d=null,m=null,y=null,v=null,g=null,f=null,w=null,_=!1,M=null,b=null,P=null,D=null,B=null;const V=e.getParameter(35661);let N=!1,I=0;const L=e.getParameter(7938);L.indexOf("WebGL")!==-1?(I=parseFloat(/^WebGL\ ([0-9])/.exec(L)[1]),N=I>=1):L.indexOf("OpenGL ES")!==-1&&(I=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(L)[1]),N=I>=2);let C=null,S={};const F=new Ve,k=new Ve;function U(z,J,$){const me=new Uint8Array(4),te=e.createTexture();e.bindTexture(z,te),e.texParameteri(z,10241,9728),e.texParameteri(z,10240,9728);for(let ae=0;ae<$;ae++)e.texImage2D(J+ae,0,6408,1,1,0,6408,5121,me);return te}const Z={};Z[3553]=U(3553,3553,1),Z[34067]=U(34067,34069,6),a.setClear(0,0,0,1),c.setClear(1),l.setClear(0),ne(2929),c.setFunc(xs),be(!1),Fe(Cc),ne(2884),W(so);function ne(z){u[z]!==!0&&(e.enable(z),u[z]=!0)}function j(z){u[z]!==!1&&(e.disable(z),u[z]=!1)}function ge(z){return h!==z?(e.useProgram(z),h=z,!0):!1}const we={[li]:32774,[zp]:32778,[Fp]:32779};if(i)we[Nc]=32775,we[zc]=32776;else{const z=t.get("EXT_blend_minmax");z!==null&&(we[Nc]=z.MIN_EXT,we[zc]=z.MAX_EXT)}const ke={[Dp]:0,[Op]:1,[kp]:768,[Fc]:770,[jp]:776,[Hp]:774,[Vp]:772,[Gp]:769,[Dc]:771,[Wp]:775,[Up]:773};function W(z,J,$,me,te,ae,fe,Me){if(z===so){p&&(j(3042),p=!1);return}if(p||(ne(3042),p=!0),z!==Np){if(z!==d||Me!==_){if((m!==li||g!==li)&&(e.blendEquation(32774),m=li,g=li),Me)switch(z){case ao:e.blendFuncSeparate(1,771,1,771);break;case Lc:e.blendFunc(1,1);break;case Bc:e.blendFuncSeparate(0,0,769,771);break;case Ic:e.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",z);break}else switch(z){case ao:e.blendFuncSeparate(770,771,1,771);break;case Lc:e.blendFunc(770,1);break;case Bc:e.blendFunc(0,769);break;case Ic:e.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",z);break}y=null,v=null,f=null,w=null,d=z,_=Me}return}te=te||J,ae=ae||$,fe=fe||me,(J!==m||te!==g)&&(e.blendEquationSeparate(we[J],we[te]),m=J,g=te),($!==y||me!==v||ae!==f||fe!==w)&&(e.blendFuncSeparate(ke[$],ke[me],ke[ae],ke[fe]),y=$,v=me,f=ae,w=fe),d=z,_=null}function He(z,J){z.side===$o?j(2884):ne(2884);let $=z.side===ct;J&&($=!$),be($),z.blending===ao&&z.transparent===!1?W(so):W(z.blending,z.blendEquation,z.blendSrc,z.blendDst,z.blendEquationAlpha,z.blendSrcAlpha,z.blendDstAlpha,z.premultipliedAlpha),c.setFunc(z.depthFunc),c.setTest(z.depthTest),c.setMask(z.depthWrite),a.setMask(z.colorWrite);const me=z.stencilWrite;l.setTest(me),me&&(l.setMask(z.stencilWriteMask),l.setFunc(z.stencilFunc,z.stencilRef,z.stencilFuncMask),l.setOp(z.stencilFail,z.stencilZFail,z.stencilZPass)),Oe(z.polygonOffset,z.polygonOffsetFactor,z.polygonOffsetUnits)}function be(z){M!==z&&(z?e.frontFace(2304):e.frontFace(2305),M=z)}function Fe(z){z!==Bp?(ne(2884),z!==b&&(z===Cc?e.cullFace(1029):z===Ip?e.cullFace(1028):e.cullFace(1032))):j(2884),b=z}function ye(z){z!==P&&(N&&e.lineWidth(z),P=z)}function Oe(z,J,$){z?(ne(32823),(D!==J||B!==$)&&(e.polygonOffset(J,$),D=J,B=$)):j(32823)}function q(z){z?ne(3089):j(3089)}function Q(z){z===void 0&&(z=33984+V-1),C!==z&&(e.activeTexture(z),C=z)}function ee(z,J){C===null&&Q();let $=S[C];$===void 0&&($={type:void 0,texture:void 0},S[C]=$),($.type!==z||$.texture!==J)&&(e.bindTexture(z,J||Z[z]),$.type=z,$.texture=J)}function le(){const z=S[C];z!==void 0&&z.type!==void 0&&(e.bindTexture(z.type,null),z.type=void 0,z.texture=void 0)}function re(){try{e.compressedTexImage2D.apply(e,arguments)}catch(z){console.error("THREE.WebGLState:",z)}}function _e(){try{e.texImage2D.apply(e,arguments)}catch(z){console.error("THREE.WebGLState:",z)}}function R(){try{e.texImage3D.apply(e,arguments)}catch(z){console.error("THREE.WebGLState:",z)}}function T(z){F.equals(z)===!1&&(e.scissor(z.x,z.y,z.z,z.w),F.copy(z))}function K(z){k.equals(z)===!1&&(e.viewport(z.x,z.y,z.z,z.w),k.copy(z))}function Y(){u={},C=null,S={},h=null,d=null,M=null,b=null,a.reset(),c.reset(),l.reset()}return{buffers:{color:a,depth:c,stencil:l},enable:ne,disable:j,useProgram:ge,setBlending:W,setMaterial:He,setFlipSided:be,setCullFace:Fe,setLineWidth:ye,setPolygonOffset:Oe,setScissorTest:q,activeTexture:Q,bindTexture:ee,unbindTexture:le,compressedTexImage2D:re,texImage2D:_e,texImage3D:R,scissor:T,viewport:K,reset:Y}}function xx(e,t,n,i,o,r,s){const a=o.isWebGL2,c=o.maxTextures,l=o.maxCubemapSize,u=o.maxTextureSize,h=o.maxSamples,p=new WeakMap;let d,m=!1;try{m=typeof OffscreenCanvas!="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch(R){}function y(R,T){return m?new OffscreenCanvas(R,T):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function v(R,T,K,Y){let z=1;if((R.width>Y||R.height>Y)&&(z=Y/Math.max(R.width,R.height)),z<1||T===!0)if(typeof HTMLImageElement!="undefined"&&R instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&R instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&R instanceof ImageBitmap){const J=T?Ee.floorPowerOfTwo:Math.floor,$=J(z*R.width),me=J(z*R.height);d===void 0&&(d=y($,me));const te=K?y($,me):d;te.width=$,te.height=me;const ae=te.getContext("2d");return ae.drawImage(R,0,0,$,me),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+R.width+"x"+R.height+") to ("+$+"x"+me+")."),te}else return"data"in R&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+R.width+"x"+R.height+")."),R;return R}function g(R){return Ee.isPowerOfTwo(R.width)&&Ee.isPowerOfTwo(R.height)}function f(R){return a?!1:R.wrapS!==Et||R.wrapT!==Et||R.minFilter!==ft&&R.minFilter!==ut}function w(R,T){return R.generateMipmaps&&T&&R.minFilter!==ft&&R.minFilter!==ut}function _(R,T,K,Y){e.generateMipmap(R);const z=i.get(T);z.__maxMipLevel=Math.log(Math.max(K,Y))*Math.LOG2E}function M(R,T,K){if(a===!1)return T;if(R!==null){if(e[R]!==void 0)return e[R];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+R+"'")}let Y=T;return T===6403&&(K===5126&&(Y=33326),K===5131&&(Y=33325),K===5121&&(Y=33321)),T===6407&&(K===5126&&(Y=34837),K===5131&&(Y=34843),K===5121&&(Y=32849)),T===6408&&(K===5126&&(Y=34836),K===5131&&(Y=34842),K===5121&&(Y=32856)),(Y===33325||Y===33326||Y===34842||Y===34836)&&t.get("EXT_color_buffer_float"),Y}function b(R){return R===ft||R===Vc||R===Uc?9728:9729}function P(R){const T=R.target;T.removeEventListener("dispose",P),B(T),T.isVideoTexture&&p.delete(T),s.memory.textures--}function D(R){const T=R.target;T.removeEventListener("dispose",D),V(T),s.memory.textures--}function B(R){const T=i.get(R);if(T.__webglInit===void 0)return;e.deleteTexture(T.__webglTexture),i.remove(R)}function V(R){const T=i.get(R),K=i.get(R.texture);if(!R)return;if(K.__webglTexture!==void 0&&e.deleteTexture(K.__webglTexture),R.depthTexture&&R.depthTexture.dispose(),R.isWebGLCubeRenderTarget)for(let Y=0;Y<6;Y++)e.deleteFramebuffer(T.__webglFramebuffer[Y]),T.__webglDepthbuffer&&e.deleteRenderbuffer(T.__webglDepthbuffer[Y]);else e.deleteFramebuffer(T.__webglFramebuffer),T.__webglDepthbuffer&&e.deleteRenderbuffer(T.__webglDepthbuffer),T.__webglMultisampledFramebuffer&&e.deleteFramebuffer(T.__webglMultisampledFramebuffer),T.__webglColorRenderbuffer&&e.deleteRenderbuffer(T.__webglColorRenderbuffer),T.__webglDepthRenderbuffer&&e.deleteRenderbuffer(T.__webglDepthRenderbuffer);i.remove(R.texture),i.remove(R)}let N=0;function I(){N=0}function L(){const R=N;return R>=c&&console.warn("THREE.WebGLTextures: Trying to use "+R+" texture units while this GPU supports only "+c),N+=1,R}function C(R,T){const K=i.get(R);if(R.isVideoTexture&&Q(R),R.version>0&&K.__version!==R.version){const Y=R.image;if(Y===void 0)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else if(Y.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{ge(K,R,T);return}}n.activeTexture(33984+T),n.bindTexture(3553,K.__webglTexture)}function S(R,T){const K=i.get(R);if(R.version>0&&K.__version!==R.version){ge(K,R,T);return}n.activeTexture(33984+T),n.bindTexture(35866,K.__webglTexture)}function F(R,T){const K=i.get(R);if(R.version>0&&K.__version!==R.version){ge(K,R,T);return}n.activeTexture(33984+T),n.bindTexture(32879,K.__webglTexture)}function k(R,T){const K=i.get(R);if(R.version>0&&K.__version!==R.version){we(K,R,T);return}n.activeTexture(33984+T),n.bindTexture(34067,K.__webglTexture)}const U={[Ss]:10497,[Et]:33071,[Es]:33648},Z={[ft]:9728,[Vc]:9984,[Uc]:9986,[ut]:9729,[af]:9985,[tr]:9987};function ne(R,T,K){K?(e.texParameteri(R,10242,U[T.wrapS]),e.texParameteri(R,10243,U[T.wrapT]),(R===32879||R===35866)&&e.texParameteri(R,32882,U[T.wrapR]),e.texParameteri(R,10240,Z[T.magFilter]),e.texParameteri(R,10241,Z[T.minFilter])):(e.texParameteri(R,10242,33071),e.texParameteri(R,10243,33071),(R===32879||R===35866)&&e.texParameteri(R,32882,33071),(T.wrapS!==Et||T.wrapT!==Et)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),e.texParameteri(R,10240,b(T.magFilter)),e.texParameteri(R,10241,b(T.minFilter)),T.minFilter!==ft&&T.minFilter!==ut&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));const Y=t.get("EXT_texture_filter_anisotropic");if(Y){if(T.type===_n&&t.get("OES_texture_float_linear")===null)return;if(T.type===or&&(a||t.get("OES_texture_half_float_linear"))===null)return;(T.anisotropy>1||i.get(T).__currentAnisotropy)&&(e.texParameterf(R,Y.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(T.anisotropy,o.getMaxAnisotropy())),i.get(T).__currentAnisotropy=T.anisotropy)}}function j(R,T){R.__webglInit===void 0&&(R.__webglInit=!0,T.addEventListener("dispose",P),R.__webglTexture=e.createTexture(),s.memory.textures++)}function ge(R,T,K){let Y=3553;T.isDataTexture2DArray&&(Y=35866),T.isDataTexture3D&&(Y=32879),j(R,T),n.activeTexture(33984+K),n.bindTexture(Y,R.__webglTexture),e.pixelStorei(37440,T.flipY),e.pixelStorei(37441,T.premultiplyAlpha),e.pixelStorei(3317,T.unpackAlignment);const z=f(T)&&g(T.image)===!1,J=v(T.image,z,!1,u),$=g(J)||a,me=r.convert(T.format);let te=r.convert(T.type),ae=M(T.internalFormat,me,te);ne(Y,T,$);let fe;const Me=T.mipmaps;if(T.isDepthTexture)ae=6402,a?T.type===_n?ae=36012:T.type===ir?ae=33190:T.type===lo?ae=35056:ae=33189:T.type===_n&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),T.format===hi&&ae===6402&&(T.type!==nr&&T.type!==ir&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),T.type=nr,te=r.convert(T.type))),T.format===ho&&ae===6402&&(ae=34041,T.type!==lo&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),T.type=lo,te=r.convert(T.type))),n.texImage2D(3553,0,ae,J.width,J.height,0,me,te,null);else if(T.isDataTexture)if(Me.length>0&&$){for(let se=0,xe=Me.length;se<xe;se++)fe=Me[se],n.texImage2D(3553,se,ae,fe.width,fe.height,0,me,te,fe.data);T.generateMipmaps=!1,R.__maxMipLevel=Me.length-1}else n.texImage2D(3553,0,ae,J.width,J.height,0,me,te,J.data),R.__maxMipLevel=0;else if(T.isCompressedTexture){for(let se=0,xe=Me.length;se<xe;se++)fe=Me[se],T.format!==Ft&&T.format!==qn?me!==null?n.compressedTexImage2D(3553,se,ae,fe.width,fe.height,0,fe.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):n.texImage2D(3553,se,ae,fe.width,fe.height,0,me,te,fe.data);R.__maxMipLevel=Me.length-1}else if(T.isDataTexture2DArray)n.texImage3D(35866,0,ae,J.width,J.height,J.depth,0,me,te,J.data),R.__maxMipLevel=0;else if(T.isDataTexture3D)n.texImage3D(32879,0,ae,J.width,J.height,J.depth,0,me,te,J.data),R.__maxMipLevel=0;else if(Me.length>0&&$){for(let se=0,xe=Me.length;se<xe;se++)fe=Me[se],n.texImage2D(3553,se,ae,me,te,fe);T.generateMipmaps=!1,R.__maxMipLevel=Me.length-1}else n.texImage2D(3553,0,ae,me,te,J),R.__maxMipLevel=0;w(T,$)&&_(Y,T,J.width,J.height),R.__version=T.version,T.onUpdate&&T.onUpdate(T)}function we(R,T,K){if(T.image.length!==6)return;j(R,T),n.activeTexture(33984+K),n.bindTexture(34067,R.__webglTexture),e.pixelStorei(37440,T.flipY);const Y=T&&(T.isCompressedTexture||T.image[0].isCompressedTexture),z=T.image[0]&&T.image[0].isDataTexture,J=[];for(let se=0;se<6;se++)!Y&&!z?J[se]=v(T.image[se],!1,!0,l):J[se]=z?T.image[se].image:T.image[se];const $=J[0],me=g($)||a,te=r.convert(T.format),ae=r.convert(T.type),fe=M(T.internalFormat,te,ae);ne(34067,T,me);let Me;if(Y){for(let se=0;se<6;se++){Me=J[se].mipmaps;for(let xe=0;xe<Me.length;xe++){const Ke=Me[xe];T.format!==Ft&&T.format!==qn?te!==null?n.compressedTexImage2D(34069+se,xe,fe,Ke.width,Ke.height,0,Ke.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):n.texImage2D(34069+se,xe,fe,Ke.width,Ke.height,0,te,ae,Ke.data)}}R.__maxMipLevel=Me.length-1}else{Me=T.mipmaps;for(let se=0;se<6;se++)if(z){n.texImage2D(34069+se,0,fe,J[se].width,J[se].height,0,te,ae,J[se].data);for(let xe=0;xe<Me.length;xe++){const Ke=Me[xe],bt=Ke.image[se].image;n.texImage2D(34069+se,xe+1,fe,bt.width,bt.height,0,te,ae,bt.data)}}else{n.texImage2D(34069+se,0,fe,te,ae,J[se]);for(let xe=0;xe<Me.length;xe++){const Ke=Me[xe];n.texImage2D(34069+se,xe+1,fe,te,ae,Ke.image[se])}}R.__maxMipLevel=Me.length}w(T,me)&&_(34067,T,$.width,$.height),R.__version=T.version,T.onUpdate&&T.onUpdate(T)}function ke(R,T,K,Y){const z=r.convert(T.texture.format),J=r.convert(T.texture.type),$=M(T.texture.internalFormat,z,J);n.texImage2D(Y,0,$,T.width,T.height,0,z,J,null),e.bindFramebuffer(36160,R),e.framebufferTexture2D(36160,K,Y,i.get(T.texture).__webglTexture,0),e.bindFramebuffer(36160,null)}function W(R,T,K){if(e.bindRenderbuffer(36161,R),T.depthBuffer&&!T.stencilBuffer){let Y=33189;if(K){const z=T.depthTexture;z&&z.isDepthTexture&&(z.type===_n?Y=36012:z.type===ir&&(Y=33190));const J=q(T);e.renderbufferStorageMultisample(36161,J,Y,T.width,T.height)}else e.renderbufferStorage(36161,Y,T.width,T.height);e.framebufferRenderbuffer(36160,36096,36161,R)}else if(T.depthBuffer&&T.stencilBuffer){if(K){const Y=q(T);e.renderbufferStorageMultisample(36161,Y,35056,T.width,T.height)}else e.renderbufferStorage(36161,34041,T.width,T.height);e.framebufferRenderbuffer(36160,33306,36161,R)}else{const Y=r.convert(T.texture.format),z=r.convert(T.texture.type),J=M(T.texture.internalFormat,Y,z);if(K){const $=q(T);e.renderbufferStorageMultisample(36161,$,J,T.width,T.height)}else e.renderbufferStorage(36161,J,T.width,T.height)}e.bindRenderbuffer(36161,null)}function He(R,T){const K=T&&T.isWebGLCubeRenderTarget;if(K)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(36160,R),!(T.depthTexture&&T.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!i.get(T.depthTexture).__webglTexture||T.depthTexture.image.width!==T.width||T.depthTexture.image.height!==T.height)&&(T.depthTexture.image.width=T.width,T.depthTexture.image.height=T.height,T.depthTexture.needsUpdate=!0),C(T.depthTexture,0);const Y=i.get(T.depthTexture).__webglTexture;if(T.depthTexture.format===hi)e.framebufferTexture2D(36160,36096,3553,Y,0);else if(T.depthTexture.format===ho)e.framebufferTexture2D(36160,33306,3553,Y,0);else throw new Error("Unknown depthTexture format")}function be(R){const T=i.get(R),K=R.isWebGLCubeRenderTarget===!0;if(R.depthTexture){if(K)throw new Error("target.depthTexture not supported in Cube render targets");He(T.__webglFramebuffer,R)}else if(K){T.__webglDepthbuffer=[];for(let Y=0;Y<6;Y++)e.bindFramebuffer(36160,T.__webglFramebuffer[Y]),T.__webglDepthbuffer[Y]=e.createRenderbuffer(),W(T.__webglDepthbuffer[Y],R,!1)}else e.bindFramebuffer(36160,T.__webglFramebuffer),T.__webglDepthbuffer=e.createRenderbuffer(),W(T.__webglDepthbuffer,R,!1);e.bindFramebuffer(36160,null)}function Fe(R){const T=i.get(R),K=i.get(R.texture);R.addEventListener("dispose",D),K.__webglTexture=e.createTexture(),s.memory.textures++;const Y=R.isWebGLCubeRenderTarget===!0,z=R.isWebGLMultisampleRenderTarget===!0,J=g(R)||a;if(a&&R.texture.format===qn&&(R.texture.type===_n||R.texture.type===or)&&(R.texture.format=Ft,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),Y){T.__webglFramebuffer=[];for(let $=0;$<6;$++)T.__webglFramebuffer[$]=e.createFramebuffer()}else if(T.__webglFramebuffer=e.createFramebuffer(),z)if(a){T.__webglMultisampledFramebuffer=e.createFramebuffer(),T.__webglColorRenderbuffer=e.createRenderbuffer(),e.bindRenderbuffer(36161,T.__webglColorRenderbuffer);const $=r.convert(R.texture.format),me=r.convert(R.texture.type),te=M(R.texture.internalFormat,$,me),ae=q(R);e.renderbufferStorageMultisample(36161,ae,te,R.width,R.height),e.bindFramebuffer(36160,T.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(36160,36064,36161,T.__webglColorRenderbuffer),e.bindRenderbuffer(36161,null),R.depthBuffer&&(T.__webglDepthRenderbuffer=e.createRenderbuffer(),W(T.__webglDepthRenderbuffer,R,!0)),e.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(Y){n.bindTexture(34067,K.__webglTexture),ne(34067,R.texture,J);for(let $=0;$<6;$++)ke(T.__webglFramebuffer[$],R,36064,34069+$);w(R.texture,J)&&_(34067,R.texture,R.width,R.height),n.bindTexture(34067,null)}else n.bindTexture(3553,K.__webglTexture),ne(3553,R.texture,J),ke(T.__webglFramebuffer,R,36064,3553),w(R.texture,J)&&_(3553,R.texture,R.width,R.height),n.bindTexture(3553,null);R.depthBuffer&&be(R)}function ye(R){const T=R.texture,K=g(R)||a;if(w(T,K)){const Y=R.isWebGLCubeRenderTarget?34067:3553,z=i.get(T).__webglTexture;n.bindTexture(Y,z),_(Y,T,R.width,R.height),n.bindTexture(Y,null)}}function Oe(R){if(R.isWebGLMultisampleRenderTarget)if(a){const T=i.get(R);e.bindFramebuffer(36008,T.__webglMultisampledFramebuffer),e.bindFramebuffer(36009,T.__webglFramebuffer);const K=R.width,Y=R.height;let z=16384;R.depthBuffer&&(z|=256),R.stencilBuffer&&(z|=1024),e.blitFramebuffer(0,0,K,Y,0,0,K,Y,z,9728),e.bindFramebuffer(36160,T.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")}function q(R){return a&&R.isWebGLMultisampleRenderTarget?Math.min(h,R.samples):0}function Q(R){const T=s.render.frame;p.get(R)!==T&&(p.set(R,T),R.update())}let ee=!1,le=!1;function re(R,T){R&&R.isWebGLRenderTarget&&(ee===!1&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),ee=!0),R=R.texture),C(R,T)}function _e(R,T){R&&R.isWebGLCubeRenderTarget&&(le===!1&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),le=!0),R=R.texture),k(R,T)}this.allocateTextureUnit=L,this.resetTextureUnits=I,this.setTexture2D=C,this.setTexture2DArray=S,this.setTexture3D=F,this.setTextureCube=k,this.setupRenderTarget=Fe,this.updateRenderTargetMipmap=ye,this.updateMultisampleRenderTarget=Oe,this.safeSetTexture2D=re,this.safeSetTextureCube=_e}function bx(e,t,n){const i=n.isWebGL2;function o(r){let s;if(r===Ts)return 5121;if(r===uf)return 32819;if(r===df)return 32820;if(r===pf)return 33635;if(r===cf)return 5120;if(r===lf)return 5122;if(r===nr)return 5123;if(r===hf)return 5124;if(r===ir)return 5125;if(r===_n)return 5126;if(r===or)return i?5131:(s=t.get("OES_texture_half_float"),s!==null?s.HALF_FLOAT_OES:null);if(r===ff)return 6406;if(r===qn)return 6407;if(r===Ft)return 6408;if(r===mf)return 6409;if(r===gf)return 6410;if(r===hi)return 6402;if(r===ho)return 34041;if(r===yf)return 6403;if(r===vf)return 36244;if(r===xf)return 33319;if(r===bf)return 33320;if(r===wf)return 36248;if(r===_f)return 36249;if(r===Hc||r===Wc||r===jc||r===qc)if(s=t.get("WEBGL_compressed_texture_s3tc"),s!==null){if(r===Hc)return s.COMPRESSED_RGB_S3TC_DXT1_EXT;if(r===Wc)return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(r===jc)return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(r===qc)return s.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(r===Xc||r===Yc||r===Zc||r===Jc)if(s=t.get("WEBGL_compressed_texture_pvrtc"),s!==null){if(r===Xc)return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(r===Yc)return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(r===Zc)return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(r===Jc)return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(r===Mf)return s=t.get("WEBGL_compressed_texture_etc1"),s!==null?s.COMPRESSED_RGB_ETC1_WEBGL:null;if((r===Qc||r===Kc)&&(s=t.get("WEBGL_compressed_texture_etc"),s!==null)){if(r===Qc)return s.COMPRESSED_RGB8_ETC2;if(r===Kc)return s.COMPRESSED_RGBA8_ETC2_EAC}if(r===Sf||r===Ef||r===Tf||r===Af||r===Cf||r===Rf||r===Pf||r===Lf||r===Bf||r===If||r===Nf||r===zf||r===Ff||r===Df||r===kf||r===Gf||r===Vf||r===Uf||r===Hf||r===Wf||r===jf||r===qf||r===Xf||r===Yf||r===Zf||r===Jf||r===Qf||r===Kf)return s=t.get("WEBGL_compressed_texture_astc"),s!==null?r:null;if(r===Of)return s=t.get("EXT_texture_compression_bptc"),s!==null?r:null;if(r===lo)return i?34042:(s=t.get("WEBGL_depth_texture"),s!==null?s.UNSIGNED_INT_24_8_WEBGL:null)}return{convert:o}}function sa(e){tt.call(this),this.cameras=e||[]}sa.prototype=Object.assign(Object.create(tt.prototype),{constructor:sa,isArrayCamera:!0});function zi(){he.call(this),this.type="Group"}zi.prototype=Object.assign(Object.create(he.prototype),{constructor:zi,isGroup:!0});function To(){this._targetRay=null,this._grip=null,this._hand=null}Object.assign(To.prototype,{constructor:To,getHandSpace:function(){if(this._hand===null&&(this._hand=new zi,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints=[],this._hand.inputState={pinching:!1},window.XRHand))for(let e=0;e<=window.XRHand.LITTLE_PHALANX_TIP;e++){const t=new zi;t.matrixAutoUpdate=!1,t.visible=!1,this._hand.joints.push(t),this._hand.add(t)}return this._hand},getTargetRaySpace:function(){return this._targetRay===null&&(this._targetRay=new zi,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1),this._targetRay},getGripSpace:function(){return this._grip===null&&(this._grip=new zi,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1),this._grip},dispatchEvent:function(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this},disconnect:function(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this},update:function(e,t,n){let i=null,o=null,r=null;const s=this._targetRay,a=this._grip,c=this._hand;if(e)if(c&&e.hand){r=!0;for(let l=0;l<=window.XRHand.LITTLE_PHALANX_TIP;l++)if(e.hand[l]){const u=t.getJointPose(e.hand[l],n),h=c.joints[l];u!==null&&(h.matrix.fromArray(u.transform.matrix),h.matrix.decompose(h.position,h.rotation,h.scale),h.jointRadius=u.radius),h.visible=u!==null;const p=c.joints[window.XRHand.INDEX_PHALANX_TIP],d=c.joints[window.XRHand.THUMB_PHALANX_TIP],m=p.position.distanceTo(d.position),y=.02,v=.005;c.inputState.pinching&&m>y+v?(c.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!c.inputState.pinching&&m<=y-v&&(c.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}}else s!==null&&(i=t.getPose(e.targetRaySpace,n),i!==null&&(s.matrix.fromArray(i.transform.matrix),s.matrix.decompose(s.position,s.rotation,s.scale))),a!==null&&e.gripSpace&&(o=t.getPose(e.gripSpace,n),o!==null&&(a.matrix.fromArray(o.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale)));return s!==null&&(s.visible=i!==null),a!==null&&(a.visible=o!==null),c!==null&&(c.visible=r!==null),this}});function Wl(e,t){const n=this;let i=null,o=1,r=null,s="local-floor",a=null;const c=[],l=new Map,u=new tt;u.layers.enable(1),u.viewport=new Ve;const h=new tt;h.layers.enable(2),h.viewport=new Ve;const p=[u,h],d=new sa;d.layers.enable(1),d.layers.enable(2);let m=null,y=null;this.enabled=!1,this.isPresenting=!1,this.getController=function(N){let I=c[N];return I===void 0&&(I=new To,c[N]=I),I.getTargetRaySpace()},this.getControllerGrip=function(N){let I=c[N];return I===void 0&&(I=new To,c[N]=I),I.getGripSpace()},this.getHand=function(N){let I=c[N];return I===void 0&&(I=new To,c[N]=I),I.getHandSpace()};function v(N){const I=l.get(N.inputSource);I&&I.dispatchEvent({type:N.type,data:N.inputSource})}function g(){l.forEach(function(N,I){N.disconnect(I)}),l.clear(),e.setFramebuffer(null),e.setRenderTarget(e.getRenderTarget()),V.stop(),n.isPresenting=!1,n.dispatchEvent({type:"sessionend"})}function f(N){r=N,V.setContext(i),V.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}this.setFramebufferScaleFactor=function(N){o=N,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(N){s=N,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return r},this.getSession=function(){return i},this.setSession=function(N){if(i=N,i!==null){i.addEventListener("select",v),i.addEventListener("selectstart",v),i.addEventListener("selectend",v),i.addEventListener("squeeze",v),i.addEventListener("squeezestart",v),i.addEventListener("squeezeend",v),i.addEventListener("end",g);const I=t.getContextAttributes();I.xrCompatible!==!0&&t.makeXRCompatible();const L={antialias:I.antialias,alpha:I.alpha,depth:I.depth,stencil:I.stencil,framebufferScaleFactor:o},C=new XRWebGLLayer(i,t,L);i.updateRenderState({baseLayer:C}),i.requestReferenceSpace(s).then(f),i.addEventListener("inputsourceschange",w)}};function w(N){const I=i.inputSources;for(let L=0;L<c.length;L++)l.set(I[L],c[L]);for(let L=0;L<N.removed.length;L++){const C=N.removed[L],S=l.get(C);S&&(S.dispatchEvent({type:"disconnected",data:C}),l.delete(C))}for(let L=0;L<N.added.length;L++){const C=N.added[L],S=l.get(C);S&&S.dispatchEvent({type:"connected",data:C})}}const _=new A,M=new A;function b(N,I,L){_.setFromMatrixPosition(I.matrixWorld),M.setFromMatrixPosition(L.matrixWorld);const C=_.distanceTo(M),S=I.projectionMatrix.elements,F=L.projectionMatrix.elements,k=S[14]/(S[10]-1),U=S[14]/(S[10]+1),Z=(S[9]+1)/S[5],ne=(S[9]-1)/S[5],j=(S[8]-1)/S[0],ge=(F[8]+1)/F[0],we=k*j,ke=k*ge,W=C/(-j+ge),He=W*-j;I.matrixWorld.decompose(N.position,N.quaternion,N.scale),N.translateX(He),N.translateZ(W),N.matrixWorld.compose(N.position,N.quaternion,N.scale),N.matrixWorldInverse.getInverse(N.matrixWorld);const be=k+W,Fe=U+W,ye=we-He,Oe=ke+(C-He),q=Z*U/Fe*be,Q=ne*U/Fe*be;N.projectionMatrix.makePerspective(ye,Oe,q,Q,be,Fe)}function P(N,I){I===null?N.matrixWorld.copy(N.matrix):N.matrixWorld.multiplyMatrices(I.matrixWorld,N.matrix),N.matrixWorldInverse.getInverse(N.matrixWorld)}this.getCamera=function(N){d.near=h.near=u.near=N.near,d.far=h.far=u.far=N.far,(m!==d.near||y!==d.far)&&(i.updateRenderState({depthNear:d.near,depthFar:d.far}),m=d.near,y=d.far);const I=N.parent,L=d.cameras;P(d,I);for(let S=0;S<L.length;S++)P(L[S],I);N.matrixWorld.copy(d.matrixWorld);const C=N.children;for(let S=0,F=C.length;S<F;S++)C[S].updateMatrixWorld(!0);return L.length===2?b(d,u,h):d.projectionMatrix.copy(u.projectionMatrix),d};let D=null;function B(N,I){if(a=I.getViewerPose(r),a!==null){const C=a.views,S=i.renderState.baseLayer;e.setFramebuffer(S.framebuffer);let F=!1;C.length!==d.cameras.length&&(d.cameras.length=0,F=!0);for(let k=0;k<C.length;k++){const U=C[k],Z=S.getViewport(U),ne=p[k];ne.matrix.fromArray(U.transform.matrix),ne.projectionMatrix.fromArray(U.projectionMatrix),ne.viewport.set(Z.x,Z.y,Z.width,Z.height),k===0&&d.matrix.copy(ne.matrix),F===!0&&d.cameras.push(ne)}}const L=i.inputSources;for(let C=0;C<c.length;C++){const S=c[C],F=L[C];S.update(F,I,r)}D&&D(N,I)}const V=new bl;V.setAnimationLoop(B),this.setAnimationLoop=function(N){D=N},this.dispose=function(){}}Object.assign(Wl.prototype,an.prototype);function wx(e){function t(g,f){g.fogColor.value.copy(f.color),f.isFog?(g.fogNear.value=f.near,g.fogFar.value=f.far):f.isFogExp2&&(g.fogDensity.value=f.density)}function n(g,f,w,_){f.isMeshBasicMaterial?i(g,f):f.isMeshLambertMaterial?(i(g,f),c(g,f)):f.isMeshToonMaterial?(i(g,f),u(g,f)):f.isMeshPhongMaterial?(i(g,f),l(g,f)):f.isMeshStandardMaterial?(i(g,f),f.isMeshPhysicalMaterial?p(g,f):h(g,f)):f.isMeshMatcapMaterial?(i(g,f),d(g,f)):f.isMeshDepthMaterial?(i(g,f),m(g,f)):f.isMeshDistanceMaterial?(i(g,f),y(g,f)):f.isMeshNormalMaterial?(i(g,f),v(g,f)):f.isLineBasicMaterial?(o(g,f),f.isLineDashedMaterial&&r(g,f)):f.isPointsMaterial?s(g,f,w,_):f.isSpriteMaterial?a(g,f):f.isShadowMaterial?(g.color.value.copy(f.color),g.opacity.value=f.opacity):f.isShaderMaterial&&(f.uniformsNeedUpdate=!1)}function i(g,f){g.opacity.value=f.opacity,f.color&&g.diffuse.value.copy(f.color),f.emissive&&g.emissive.value.copy(f.emissive).multiplyScalar(f.emissiveIntensity),f.map&&(g.map.value=f.map),f.alphaMap&&(g.alphaMap.value=f.alphaMap),f.specularMap&&(g.specularMap.value=f.specularMap);const w=e.get(f).envMap;if(w){g.envMap.value=w,g.flipEnvMap.value=w.isCubeTexture&&w._needsFlipEnvMap?-1:1,g.reflectivity.value=f.reflectivity,g.refractionRatio.value=f.refractionRatio;const b=e.get(w).__maxMipLevel;b!==void 0&&(g.maxMipLevel.value=b)}f.lightMap&&(g.lightMap.value=f.lightMap,g.lightMapIntensity.value=f.lightMapIntensity),f.aoMap&&(g.aoMap.value=f.aoMap,g.aoMapIntensity.value=f.aoMapIntensity);let _;f.map?_=f.map:f.specularMap?_=f.specularMap:f.displacementMap?_=f.displacementMap:f.normalMap?_=f.normalMap:f.bumpMap?_=f.bumpMap:f.roughnessMap?_=f.roughnessMap:f.metalnessMap?_=f.metalnessMap:f.alphaMap?_=f.alphaMap:f.emissiveMap?_=f.emissiveMap:f.clearcoatMap?_=f.clearcoatMap:f.clearcoatNormalMap?_=f.clearcoatNormalMap:f.clearcoatRoughnessMap&&(_=f.clearcoatRoughnessMap),_!==void 0&&(_.isWebGLRenderTarget&&(_=_.texture),_.matrixAutoUpdate===!0&&_.updateMatrix(),g.uvTransform.value.copy(_.matrix));let M;f.aoMap?M=f.aoMap:f.lightMap&&(M=f.lightMap),M!==void 0&&(M.isWebGLRenderTarget&&(M=M.texture),M.matrixAutoUpdate===!0&&M.updateMatrix(),g.uv2Transform.value.copy(M.matrix))}function o(g,f){g.diffuse.value.copy(f.color),g.opacity.value=f.opacity}function r(g,f){g.dashSize.value=f.dashSize,g.totalSize.value=f.dashSize+f.gapSize,g.scale.value=f.scale}function s(g,f,w,_){g.diffuse.value.copy(f.color),g.opacity.value=f.opacity,g.size.value=f.size*w,g.scale.value=_*.5,f.map&&(g.map.value=f.map),f.alphaMap&&(g.alphaMap.value=f.alphaMap);let M;f.map?M=f.map:f.alphaMap&&(M=f.alphaMap),M!==void 0&&(M.matrixAutoUpdate===!0&&M.updateMatrix(),g.uvTransform.value.copy(M.matrix))}function a(g,f){g.diffuse.value.copy(f.color),g.opacity.value=f.opacity,g.rotation.value=f.rotation,f.map&&(g.map.value=f.map),f.alphaMap&&(g.alphaMap.value=f.alphaMap);let w;f.map?w=f.map:f.alphaMap&&(w=f.alphaMap),w!==void 0&&(w.matrixAutoUpdate===!0&&w.updateMatrix(),g.uvTransform.value.copy(w.matrix))}function c(g,f){f.emissiveMap&&(g.emissiveMap.value=f.emissiveMap)}function l(g,f){g.specular.value.copy(f.specular),g.shininess.value=Math.max(f.shininess,1e-4),f.emissiveMap&&(g.emissiveMap.value=f.emissiveMap),f.bumpMap&&(g.bumpMap.value=f.bumpMap,g.bumpScale.value=f.bumpScale,f.side===ct&&(g.bumpScale.value*=-1)),f.normalMap&&(g.normalMap.value=f.normalMap,g.normalScale.value.copy(f.normalScale),f.side===ct&&g.normalScale.value.negate()),f.displacementMap&&(g.displacementMap.value=f.displacementMap,g.displacementScale.value=f.displacementScale,g.displacementBias.value=f.displacementBias)}function u(g,f){f.gradientMap&&(g.gradientMap.value=f.gradientMap),f.emissiveMap&&(g.emissiveMap.value=f.emissiveMap),f.bumpMap&&(g.bumpMap.value=f.bumpMap,g.bumpScale.value=f.bumpScale,f.side===ct&&(g.bumpScale.value*=-1)),f.normalMap&&(g.normalMap.value=f.normalMap,g.normalScale.value.copy(f.normalScale),f.side===ct&&g.normalScale.value.negate()),f.displacementMap&&(g.displacementMap.value=f.displacementMap,g.displacementScale.value=f.displacementScale,g.displacementBias.value=f.displacementBias)}function h(g,f){g.roughness.value=f.roughness,g.metalness.value=f.metalness,f.roughnessMap&&(g.roughnessMap.value=f.roughnessMap),f.metalnessMap&&(g.metalnessMap.value=f.metalnessMap),f.emissiveMap&&(g.emissiveMap.value=f.emissiveMap),f.bumpMap&&(g.bumpMap.value=f.bumpMap,g.bumpScale.value=f.bumpScale,f.side===ct&&(g.bumpScale.value*=-1)),f.normalMap&&(g.normalMap.value=f.normalMap,g.normalScale.value.copy(f.normalScale),f.side===ct&&g.normalScale.value.negate()),f.displacementMap&&(g.displacementMap.value=f.displacementMap,g.displacementScale.value=f.displacementScale,g.displacementBias.value=f.displacementBias);const w=e.get(f).envMap;w&&(g.envMapIntensity.value=f.envMapIntensity)}function p(g,f){h(g,f),g.reflectivity.value=f.reflectivity,g.clearcoat.value=f.clearcoat,g.clearcoatRoughness.value=f.clearcoatRoughness,f.sheen&&g.sheen.value.copy(f.sheen),f.clearcoatMap&&(g.clearcoatMap.value=f.clearcoatMap),f.clearcoatRoughnessMap&&(g.clearcoatRoughnessMap.value=f.clearcoatRoughnessMap),f.clearcoatNormalMap&&(g.clearcoatNormalScale.value.copy(f.clearcoatNormalScale),g.clearcoatNormalMap.value=f.clearcoatNormalMap,f.side===ct&&g.clearcoatNormalScale.value.negate()),g.transmission.value=f.transmission,f.transmissionMap&&(g.transmissionMap.value=f.transmissionMap)}function d(g,f){f.matcap&&(g.matcap.value=f.matcap),f.bumpMap&&(g.bumpMap.value=f.bumpMap,g.bumpScale.value=f.bumpScale,f.side===ct&&(g.bumpScale.value*=-1)),f.normalMap&&(g.normalMap.value=f.normalMap,g.normalScale.value.copy(f.normalScale),f.side===ct&&g.normalScale.value.negate()),f.displacementMap&&(g.displacementMap.value=f.displacementMap,g.displacementScale.value=f.displacementScale,g.displacementBias.value=f.displacementBias)}function m(g,f){f.displacementMap&&(g.displacementMap.value=f.displacementMap,g.displacementScale.value=f.displacementScale,g.displacementBias.value=f.displacementBias)}function y(g,f){f.displacementMap&&(g.displacementMap.value=f.displacementMap,g.displacementScale.value=f.displacementScale,g.displacementBias.value=f.displacementBias),g.referencePosition.value.copy(f.referencePosition),g.nearDistance.value=f.nearDistance,g.farDistance.value=f.farDistance}function v(g,f){f.bumpMap&&(g.bumpMap.value=f.bumpMap,g.bumpScale.value=f.bumpScale,f.side===ct&&(g.bumpScale.value*=-1)),f.normalMap&&(g.normalMap.value=f.normalMap,g.normalScale.value.copy(f.normalScale),f.side===ct&&g.normalScale.value.negate()),f.displacementMap&&(g.displacementMap.value=f.displacementMap,g.displacementScale.value=f.displacementScale,g.displacementBias.value=f.displacementBias)}return{refreshFogUniforms:t,refreshMaterialUniforms:n}}function Fi(e){e=e||{};const t=e.canvas!==void 0?e.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),n=e.context!==void 0?e.context:null,i=e.alpha!==void 0?e.alpha:!1,o=e.depth!==void 0?e.depth:!0,r=e.stencil!==void 0?e.stencil:!0,s=e.antialias!==void 0?e.antialias:!1,a=e.premultipliedAlpha!==void 0?e.premultipliedAlpha:!0,c=e.preserveDrawingBuffer!==void 0?e.preserveDrawingBuffer:!1,l=e.powerPreference!==void 0?e.powerPreference:"default",u=e.failIfMajorPerformanceCaveat!==void 0?e.failIfMajorPerformanceCaveat:!1;let h=null,p=null;this.domElement=t,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=pi,this.physicallyCorrectLights=!1,this.toneMapping=co,this.toneMappingExposure=1,this.maxMorphTargets=8,this.maxMorphNormals=4;const d=this;let m=!1,y=null,v=0,g=0,f=null,w=null,_=-1,M=null,b=null;const P=new Ve,D=new Ve;let B=null,V=t.width,N=t.height,I=1,L=null,C=null;const S=new Ve(0,0,V,N),F=new Ve(0,0,V,N);let k=!1;const U=new Sr;let Z=!1,ne=!1;const j=new Re,ge=new A,we={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function ke(){return f===null?I:1}let W=n;function He(E,G){for(let O=0;O<E.length;O++){const H=E[O],ie=t.getContext(H,G);if(ie!==null)return ie}return null}try{const E={alpha:i,depth:o,stencil:r,antialias:s,premultipliedAlpha:a,preserveDrawingBuffer:c,powerPreference:l,failIfMajorPerformanceCaveat:u};if(t.addEventListener("webglcontextlost",Ke,!1),t.addEventListener("webglcontextrestored",bt,!1),W===null){const G=["webgl2","webgl","experimental-webgl"];if(d.isWebGL1Renderer===!0&&G.shift(),W=He(G,E),W===null)throw He(G)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}W.getShaderPrecisionFormat===void 0&&(W.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(E){throw console.error("THREE.WebGLRenderer: "+E.message),E}let be,Fe,ye,Oe,q,Q,ee,le,re,_e,R,T,K,Y,z,J,$,me,te,ae,fe;function Me(){be=new $y(W),Fe=new Jy(W,be,e),Fe.isWebGL2===!1&&(be.get("WEBGL_depth_texture"),be.get("OES_texture_float"),be.get("OES_texture_half_float"),be.get("OES_texture_half_float_linear"),be.get("OES_standard_derivatives"),be.get("OES_element_index_uint"),be.get("OES_vertex_array_object"),be.get("ANGLE_instanced_arrays")),be.get("OES_texture_float_linear"),ae=new bx(W,be,Fe),ye=new vx(W,be,Fe),ye.scissor(D.copy(F).multiplyScalar(I).floor()),ye.viewport(P.copy(S).multiplyScalar(I).floor()),Oe=new nv(W),q=new sx,Q=new xx(W,be,ye,q,Fe,ae,Oe),ee=new Ky(d),le=new Em(W,Fe),fe=new Yy(W,be,le,Fe),re=new ev(W,le,Oe,fe),_e=new sv(W,re,le,Oe),$=new rv(W),z=new Qy(q),R=new rx(d,ee,be,Fe,fe,z),T=new wx(q),K=new lx(q),Y=new mx,J=new Xy(d,ee,ye,_e,a),me=new Zy(W,be,Oe,Fe),te=new tv(W,be,Oe,Fe),Oe.programs=R.programs,d.capabilities=Fe,d.extensions=be,d.properties=q,d.renderLists=K,d.state=ye,d.info=Oe}Me();const se=new Wl(d,W);this.xr=se;const xe=new Hl(d,_e,Fe.maxTextureSize);this.shadowMap=xe,this.getContext=function(){return W},this.getContextAttributes=function(){return W.getContextAttributes()},this.forceContextLoss=function(){const E=be.get("WEBGL_lose_context");E&&E.loseContext()},this.forceContextRestore=function(){const E=be.get("WEBGL_lose_context");E&&E.restoreContext()},this.getPixelRatio=function(){return I},this.setPixelRatio=function(E){if(E===void 0)return;I=E,this.setSize(V,N,!1)},this.getSize=function(E){return E===void 0&&(console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"),E=new X),E.set(V,N)},this.setSize=function(E,G,O){if(se.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}V=E,N=G,t.width=Math.floor(E*I),t.height=Math.floor(G*I),O!==!1&&(t.style.width=E+"px",t.style.height=G+"px"),this.setViewport(0,0,E,G)},this.getDrawingBufferSize=function(E){return E===void 0&&(console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"),E=new X),E.set(V*I,N*I).floor()},this.setDrawingBufferSize=function(E,G,O){V=E,N=G,I=O,t.width=Math.floor(E*O),t.height=Math.floor(G*O),this.setViewport(0,0,E,G)},this.getCurrentViewport=function(E){return E===void 0&&(console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"),E=new Ve),E.copy(P)},this.getViewport=function(E){return E.copy(S)},this.setViewport=function(E,G,O,H){E.isVector4?S.set(E.x,E.y,E.z,E.w):S.set(E,G,O,H),ye.viewport(P.copy(S).multiplyScalar(I).floor())},this.getScissor=function(E){return E.copy(F)},this.setScissor=function(E,G,O,H){E.isVector4?F.set(E.x,E.y,E.z,E.w):F.set(E,G,O,H),ye.scissor(D.copy(F).multiplyScalar(I).floor())},this.getScissorTest=function(){return k},this.setScissorTest=function(E){ye.setScissorTest(k=E)},this.setOpaqueSort=function(E){L=E},this.setTransparentSort=function(E){C=E},this.getClearColor=function(){return J.getClearColor()},this.setClearColor=function(){J.setClearColor.apply(J,arguments)},this.getClearAlpha=function(){return J.getClearAlpha()},this.setClearAlpha=function(){J.setClearAlpha.apply(J,arguments)},this.clear=function(E,G,O){let H=0;(E===void 0||E)&&(H|=16384),(G===void 0||G)&&(H|=256),(O===void 0||O)&&(H|=1024),W.clear(H)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",Ke,!1),t.removeEventListener("webglcontextrestored",bt,!1),K.dispose(),Y.dispose(),q.dispose(),ee.dispose(),_e.dispose(),fe.dispose(),se.dispose(),Ki.stop()};function Ke(E){E.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),m=!0}function bt(){console.log("THREE.WebGLRenderer: Context Restored."),m=!1,Me()}function qa(E){const G=E.target;G.removeEventListener("dispose",qa),tu(G)}function tu(E){Xa(E),q.remove(E)}function Xa(E){const G=q.get(E).program;G!==void 0&&R.releaseProgram(G)}function nu(E,G){E.render(function(O){d.renderBufferImmediate(O,G)})}this.renderBufferImmediate=function(E,G){fe.initAttributes();const O=q.get(E);E.hasPositions&&!O.position&&(O.position=W.createBuffer()),E.hasNormals&&!O.normal&&(O.normal=W.createBuffer()),E.hasUvs&&!O.uv&&(O.uv=W.createBuffer()),E.hasColors&&!O.color&&(O.color=W.createBuffer());const H=G.getAttributes();E.hasPositions&&(W.bindBuffer(34962,O.position),W.bufferData(34962,E.positionArray,35048),fe.enableAttribute(H.position),W.vertexAttribPointer(H.position,3,5126,!1,0,0)),E.hasNormals&&(W.bindBuffer(34962,O.normal),W.bufferData(34962,E.normalArray,35048),fe.enableAttribute(H.normal),W.vertexAttribPointer(H.normal,3,5126,!1,0,0)),E.hasUvs&&(W.bindBuffer(34962,O.uv),W.bufferData(34962,E.uvArray,35048),fe.enableAttribute(H.uv),W.vertexAttribPointer(H.uv,2,5126,!1,0,0)),E.hasColors&&(W.bindBuffer(34962,O.color),W.bufferData(34962,E.colorArray,35048),fe.enableAttribute(H.color),W.vertexAttribPointer(H.color,3,5126,!1,0,0)),fe.disableUnusedAttributes(),W.drawArrays(4,0,E.count),E.count=0},this.renderBufferDirect=function(E,G,O,H,ie,Ie){G===null&&(G=we);const Ae=ie.isMesh&&ie.matrixWorld.determinant()<0,Ne=Qa(E,G,H,ie);ye.setMaterial(H,Ae);let Ce=O.index;const et=O.attributes.position;if(Ce===null){if(et===void 0||et.count===0)return}else if(Ce.count===0)return;let $e=1;H.wireframe===!0&&(Ce=re.getWireframeAttribute(O),$e=2),(H.morphTargets||H.morphNormals)&&$.update(ie,O,H,Ne),fe.setup(ie,H,Ne,O,Ce);let Se,We=me;Ce!==null&&(Se=le.get(Ce),We=te,We.setIndex(Se));const nn=Ce!==null?Ce.count:et.count,je=O.drawRange.start*$e,kn=O.drawRange.count*$e,nt=Ie!==null?Ie.start*$e:0,rs=Ie!==null?Ie.count*$e:Infinity,wt=Math.max(je,nt),$i=Math.min(nn,je+kn,nt+rs)-1,si=Math.max(0,$i-wt+1);if(si===0)return;if(ie.isMesh)H.wireframe===!0?(ye.setLineWidth(H.wireframeLinewidth*ke()),We.setMode(1)):We.setMode(4);else if(ie.isLine){let eo=H.linewidth;eo===void 0&&(eo=1),ye.setLineWidth(eo*ke()),ie.isLineSegments?We.setMode(1):ie.isLineLoop?We.setMode(2):We.setMode(3)}else ie.isPoints?We.setMode(0):ie.isSprite&&We.setMode(4);if(ie.isInstancedMesh)We.renderInstances(wt,si,ie.count);else if(O.isInstancedBufferGeometry){const eo=Math.min(O.instanceCount,O._maxInstanceCount);We.renderInstances(wt,si,eo)}else We.render(wt,si)},this.compile=function(E,G){p=Y.get(E,G),p.init(),E.traverse(function(H){H.isLight&&(p.pushLight(H),H.castShadow&&p.pushShadow(H))}),p.setupLights(G);const O=new WeakMap;E.traverse(function(H){const ie=H.material;if(ie)if(Array.isArray(ie))for(let Ie=0;Ie<ie.length;Ie++){const Ae=ie[Ie];O.has(Ae)===!1&&(tn(Ae,E,H),O.set(Ae))}else O.has(ie)===!1&&(tn(ie,E,H),O.set(ie))})};let os=null;function iu(E){if(se.isPresenting)return;os&&os(E)}const Ki=new bl;Ki.setAnimationLoop(iu),typeof window!="undefined"&&Ki.setContext(window),this.setAnimationLoop=function(E){os=E,se.setAnimationLoop(E),E===null?Ki.stop():Ki.start()},this.render=function(E,G){let O,H;if(arguments[2]!==void 0&&(console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."),O=arguments[2]),arguments[3]!==void 0&&(console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."),H=arguments[3]),G!==void 0&&G.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(m===!0)return;fe.resetDefaultState(),_=-1,M=null,E.autoUpdate===!0&&E.updateMatrixWorld(),G.parent===null&&G.updateMatrixWorld(),se.enabled===!0&&se.isPresenting===!0&&(G=se.getCamera(G)),E.isScene===!0&&E.onBeforeRender(d,E,G,O||f),p=Y.get(E,G),p.init(),j.multiplyMatrices(G.projectionMatrix,G.matrixWorldInverse),U.setFromProjectionMatrix(j),ne=this.localClippingEnabled,Z=z.init(this.clippingPlanes,ne,G),h=K.get(E,G),h.init(),Ya(E,G,0,d.sortObjects),h.finish(),d.sortObjects===!0&&h.sort(L,C),Z===!0&&z.beginShadows();const ie=p.state.shadowsArray;xe.render(ie,E,G),p.setupLights(G),Z===!0&&z.endShadows(),this.info.autoReset===!0&&this.info.reset(),O!==void 0&&this.setRenderTarget(O),J.render(h,E,G,H);const Ie=h.opaque,Ae=h.transparent;Ie.length>0&&Za(Ie,E,G),Ae.length>0&&Za(Ae,E,G),E.isScene===!0&&E.onAfterRender(d,E,G),f!==null&&(Q.updateRenderTargetMipmap(f),Q.updateMultisampleRenderTarget(f)),ye.buffers.depth.setTest(!0),ye.buffers.depth.setMask(!0),ye.buffers.color.setMask(!0),ye.setPolygonOffset(!1),h=null,p=null};function Ya(E,G,O,H){if(E.visible===!1)return;const ie=E.layers.test(G.layers);if(ie){if(E.isGroup)O=E.renderOrder;else if(E.isLOD)E.autoUpdate===!0&&E.update(G);else if(E.isLight)p.pushLight(E),E.castShadow&&p.pushShadow(E);else if(E.isSprite){if(!E.frustumCulled||U.intersectsSprite(E)){H&&ge.setFromMatrixPosition(E.matrixWorld).applyMatrix4(j);const Ae=_e.update(E),Ne=E.material;Ne.visible&&h.push(E,Ae,Ne,O,ge.z,null)}}else if(E.isImmediateRenderObject)H&&ge.setFromMatrixPosition(E.matrixWorld).applyMatrix4(j),h.push(E,null,E.material,O,ge.z,null);else if((E.isMesh||E.isLine||E.isPoints)&&(E.isSkinnedMesh&&(E.skeleton.frame!==Oe.render.frame&&(E.skeleton.update(),E.skeleton.frame=Oe.render.frame)),!E.frustumCulled||U.intersectsObject(E))){H&&ge.setFromMatrixPosition(E.matrixWorld).applyMatrix4(j);const Ae=_e.update(E),Ne=E.material;if(Array.isArray(Ne)){const Ce=Ae.groups;for(let et=0,$e=Ce.length;et<$e;et++){const Se=Ce[et],We=Ne[Se.materialIndex];We&&We.visible&&h.push(E,Ae,We,O,ge.z,Se)}}else Ne.visible&&h.push(E,Ae,Ne,O,ge.z,null)}}const Ie=E.children;for(let Ae=0,Ne=Ie.length;Ae<Ne;Ae++)Ya(Ie[Ae],G,O,H)}function Za(E,G,O){const H=G.isScene===!0?G.overrideMaterial:null;for(let ie=0,Ie=E.length;ie<Ie;ie++){const Ae=E[ie],Ne=Ae.object,Ce=Ae.geometry,et=H===null?Ae.material:H,$e=Ae.group;if(O.isArrayCamera){b=O;const Se=O.cameras;for(let We=0,nn=Se.length;We<nn;We++){const je=Se[We];Ne.layers.test(je.layers)&&(ye.viewport(P.copy(je.viewport)),p.setupLights(je),Ja(Ne,G,je,Ce,et,$e))}}else b=null,Ja(Ne,G,O,Ce,et,$e)}}function Ja(E,G,O,H,ie,Ie){if(E.onBeforeRender(d,G,O,H,ie,Ie),p=Y.get(G,b||O),E.modelViewMatrix.multiplyMatrices(O.matrixWorldInverse,E.matrixWorld),E.normalMatrix.getNormalMatrix(E.modelViewMatrix),E.isImmediateRenderObject){const Ae=Qa(O,G,ie,E);ye.setMaterial(ie),fe.reset(),nu(E,Ae)}else d.renderBufferDirect(O,G,H,ie,E,Ie);E.onAfterRender(d,G,O,H,ie,Ie),p=Y.get(G,b||O)}function tn(E,G,O){G.isScene!==!0&&(G=we);const H=q.get(E),ie=p.state.lights,Ie=p.state.shadowsArray,Ae=ie.state.version,Ne=R.getParameters(E,ie.state,Ie,G,O),Ce=R.getProgramCacheKey(Ne);let et=H.program,$e=!0;if(et===void 0)E.addEventListener("dispose",qa);else if(et.cacheKey!==Ce)Xa(E);else if(H.lightsStateVersion!==Ae)$e=!1;else if(Ne.shaderID!==void 0){const je=E.isMeshStandardMaterial?G.environment:null;H.envMap=ee.get(E.envMap||je);return}else $e=!1;$e&&(Ne.uniforms=R.getUniforms(E),E.onBeforeCompile(Ne,d),et=R.acquireProgram(Ne,Ce),H.program=et,H.uniforms=Ne.uniforms,H.outputEncoding=Ne.outputEncoding);const Se=H.uniforms;(!E.isShaderMaterial&&!E.isRawShaderMaterial||E.clipping===!0)&&(H.numClippingPlanes=z.numPlanes,H.numIntersection=z.numIntersection,Se.clippingPlanes=z.uniform),H.environment=E.isMeshStandardMaterial?G.environment:null,H.fog=G.fog,H.envMap=ee.get(E.envMap||H.environment),H.needsLights=ru(E),H.lightsStateVersion=Ae,H.needsLights&&(Se.ambientLightColor.value=ie.state.ambient,Se.lightProbe.value=ie.state.probe,Se.directionalLights.value=ie.state.directional,Se.directionalLightShadows.value=ie.state.directionalShadow,Se.spotLights.value=ie.state.spot,Se.spotLightShadows.value=ie.state.spotShadow,Se.rectAreaLights.value=ie.state.rectArea,Se.ltc_1.value=ie.state.rectAreaLTC1,Se.ltc_2.value=ie.state.rectAreaLTC2,Se.pointLights.value=ie.state.point,Se.pointLightShadows.value=ie.state.pointShadow,Se.hemisphereLights.value=ie.state.hemi,Se.directionalShadowMap.value=ie.state.directionalShadowMap,Se.directionalShadowMatrix.value=ie.state.directionalShadowMatrix,Se.spotShadowMap.value=ie.state.spotShadowMap,Se.spotShadowMatrix.value=ie.state.spotShadowMatrix,Se.pointShadowMap.value=ie.state.pointShadowMap,Se.pointShadowMatrix.value=ie.state.pointShadowMatrix);const We=H.program.getUniforms(),nn=Nn.seqWithValue(We.seq,Se);H.uniformsList=nn}function Qa(E,G,O,H){G.isScene!==!0&&(G=we),Q.resetTextureUnits();const ie=G.fog,Ie=O.isMeshStandardMaterial?G.environment:null,Ae=f===null?d.outputEncoding:f.texture.encoding,Ne=ee.get(O.envMap||Ie),Ce=q.get(O),et=p.state.lights;if(Z===!0&&(ne===!0||E!==M)){const nt=E===M&&O.id===_;z.setState(O,E,nt)}O.version===Ce.__version?(O.fog&&Ce.fog!==ie||(Ce.environment!==Ie||(Ce.needsLights&&Ce.lightsStateVersion!==et.state.version||(Ce.numClippingPlanes!==void 0&&(Ce.numClippingPlanes!==z.numPlanes||Ce.numIntersection!==z.numIntersection)||(Ce.outputEncoding!==Ae||Ce.envMap!==Ne)))))&&tn(O,G,H):(tn(O,G,H),Ce.__version=O.version);let $e=!1,Se=!1,We=!1;const nn=Ce.program,je=nn.getUniforms(),kn=Ce.uniforms;if(ye.useProgram(nn.program)&&($e=!0,Se=!0,We=!0),O.id!==_&&(_=O.id,Se=!0),$e||M!==E){if(je.setValue(W,"projectionMatrix",E.projectionMatrix),Fe.logarithmicDepthBuffer&&je.setValue(W,"logDepthBufFC",2/(Math.log(E.far+1)/Math.LN2)),M!==E&&(M=E,Se=!0,We=!0),O.isShaderMaterial||O.isMeshPhongMaterial||O.isMeshToonMaterial||O.isMeshStandardMaterial||O.envMap){const nt=je.map.cameraPosition;nt!==void 0&&nt.setValue(W,ge.setFromMatrixPosition(E.matrixWorld))}(O.isMeshPhongMaterial||O.isMeshToonMaterial||O.isMeshLambertMaterial||O.isMeshBasicMaterial||O.isMeshStandardMaterial||O.isShaderMaterial)&&je.setValue(W,"isOrthographic",E.isOrthographicCamera===!0),(O.isMeshPhongMaterial||O.isMeshToonMaterial||O.isMeshLambertMaterial||O.isMeshBasicMaterial||O.isMeshStandardMaterial||O.isShaderMaterial||O.isShadowMaterial||O.skinning)&&je.setValue(W,"viewMatrix",E.matrixWorldInverse)}if(O.skinning){je.setOptional(W,H,"bindMatrix"),je.setOptional(W,H,"bindMatrixInverse");const nt=H.skeleton;if(nt){const rs=nt.bones;if(Fe.floatVertexTextures){if(nt.boneTexture===void 0){let wt=Math.sqrt(rs.length*4);wt=Ee.ceilPowerOfTwo(wt),wt=Math.max(wt,4);const $i=new Float32Array(wt*wt*4);$i.set(nt.boneMatrices);const si=new Bi($i,wt,wt,Ft,_n);nt.boneMatrices=$i,nt.boneTexture=si,nt.boneTextureSize=wt}je.setValue(W,"boneTexture",nt.boneTexture,Q),je.setValue(W,"boneTextureSize",nt.boneTextureSize)}else je.setOptional(W,nt,"boneMatrices")}}return(Se||Ce.receiveShadow!==H.receiveShadow)&&(Ce.receiveShadow=H.receiveShadow,je.setValue(W,"receiveShadow",H.receiveShadow)),Se&&(je.setValue(W,"toneMappingExposure",d.toneMappingExposure),Ce.needsLights&&ou(kn,We),ie&&O.fog&&T.refreshFogUniforms(kn,ie),T.refreshMaterialUniforms(kn,O,I,N),Nn.upload(W,Ce.uniformsList,kn,Q)),O.isShaderMaterial&&O.uniformsNeedUpdate===!0&&(Nn.upload(W,Ce.uniformsList,kn,Q),O.uniformsNeedUpdate=!1),O.isSpriteMaterial&&je.setValue(W,"center",H.center),je.setValue(W,"modelViewMatrix",H.modelViewMatrix),je.setValue(W,"normalMatrix",H.normalMatrix),je.setValue(W,"modelMatrix",H.matrixWorld),nn}function ou(E,G){E.ambientLightColor.needsUpdate=G,E.lightProbe.needsUpdate=G,E.directionalLights.needsUpdate=G,E.directionalLightShadows.needsUpdate=G,E.pointLights.needsUpdate=G,E.pointLightShadows.needsUpdate=G,E.spotLights.needsUpdate=G,E.spotLightShadows.needsUpdate=G,E.rectAreaLights.needsUpdate=G,E.hemisphereLights.needsUpdate=G}function ru(E){return E.isMeshLambertMaterial||E.isMeshToonMaterial||E.isMeshPhongMaterial||E.isMeshStandardMaterial||E.isShadowMaterial||E.isShaderMaterial&&E.lights===!0}this.setFramebuffer=function(E){y!==E&&f===null&&W.bindFramebuffer(36160,E),y=E},this.getActiveCubeFace=function(){return v},this.getActiveMipmapLevel=function(){return g},this.getRenderList=function(){return h},this.setRenderList=function(E){h=E},this.getRenderState=function(){return p},this.setRenderState=function(E){p=E},this.getRenderTarget=function(){return f},this.setRenderTarget=function(E,G=0,O=0){f=E,v=G,g=O,E&&q.get(E).__webglFramebuffer===void 0&&Q.setupRenderTarget(E);let H=y,ie=!1;if(E){const Ie=q.get(E).__webglFramebuffer;E.isWebGLCubeRenderTarget?(H=Ie[G],ie=!0):E.isWebGLMultisampleRenderTarget?H=q.get(E).__webglMultisampledFramebuffer:H=Ie,P.copy(E.viewport),D.copy(E.scissor),B=E.scissorTest}else P.copy(S).multiplyScalar(I).floor(),D.copy(F).multiplyScalar(I).floor(),B=k;if(w!==H&&(W.bindFramebuffer(36160,H),w=H),ye.viewport(P),ye.scissor(D),ye.setScissorTest(B),ie){const Ie=q.get(E.texture);W.framebufferTexture2D(36160,36064,34069+G,Ie.__webglTexture,O)}},this.readRenderTargetPixels=function(E,G,O,H,ie,Ie,Ae){if(!(E&&E.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let Ne=q.get(E).__webglFramebuffer;if(E.isWebGLCubeRenderTarget&&Ae!==void 0&&(Ne=Ne[Ae]),Ne){let Ce=!1;Ne!==w&&(W.bindFramebuffer(36160,Ne),Ce=!0);try{const et=E.texture,$e=et.format,Se=et.type;if($e!==Ft&&ae.convert($e)!==W.getParameter(35739)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(Se!==Ts&&ae.convert(Se)!==W.getParameter(35738)&&!(Se===_n&&(Fe.isWebGL2||be.get("OES_texture_float")||be.get("WEBGL_color_buffer_float")))&&!(Se===or&&(Fe.isWebGL2?be.get("EXT_color_buffer_float"):be.get("EXT_color_buffer_half_float")))){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}W.checkFramebufferStatus(36160)===36053?G>=0&&G<=E.width-H&&O>=0&&O<=E.height-ie&&W.readPixels(G,O,H,ie,ae.convert($e),ae.convert(Se),Ie):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{Ce&&W.bindFramebuffer(36160,w)}}},this.copyFramebufferToTexture=function(E,G,O){O===void 0&&(O=0);const H=Math.pow(2,-O),ie=Math.floor(G.image.width*H),Ie=Math.floor(G.image.height*H),Ae=ae.convert(G.format);Q.setTexture2D(G,0),W.copyTexImage2D(3553,O,Ae,E.x,E.y,ie,Ie,0),ye.unbindTexture()},this.copyTextureToTexture=function(E,G,O,H){H===void 0&&(H=0);const ie=G.image.width,Ie=G.image.height,Ae=ae.convert(O.format),Ne=ae.convert(O.type);Q.setTexture2D(O,0),W.pixelStorei(37440,O.flipY),W.pixelStorei(37441,O.premultiplyAlpha),W.pixelStorei(3317,O.unpackAlignment),G.isDataTexture?W.texSubImage2D(3553,H,E.x,E.y,ie,Ie,Ae,Ne,G.image.data):G.isCompressedTexture?W.compressedTexSubImage2D(3553,H,E.x,E.y,G.mipmaps[0].width,G.mipmaps[0].height,Ae,G.mipmaps[0].data):W.texSubImage2D(3553,H,E.x,E.y,Ae,Ne,G.image),H===0&&O.generateMipmaps&&W.generateMipmap(3553),ye.unbindTexture()},this.initTexture=function(E){Q.setTexture2D(E,0),ye.unbindTexture()},typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}function jl(e){Fi.call(this,e)}jl.prototype=Object.assign(Object.create(Fi.prototype),{constructor:jl,isWebGL1Renderer:!0});class aa extends he{constructor(){super();Object.defineProperty(this,"isScene",{value:!0}),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.autoUpdate=e.autoUpdate,this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.background!==null&&(t.object.background=this.background.toJSON(e)),this.environment!==null&&(t.object.environment=this.environment.toJSON(e)),this.fog!==null&&(t.object.fog=this.fog.toJSON()),t}}function Bt(e,t){this.array=e,this.stride=t,this.count=e!==void 0?e.length/t:0,this.usage=cr,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=Ee.generateUUID()}Object.defineProperty(Bt.prototype,"needsUpdate",{set:function(e){e===!0&&this.version++}});Object.assign(Bt.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setUsage:function(e){return this.usage=e,this},copy:function(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this},copyAt:function(e,t,n){e*=this.stride,n*=t.stride;for(let i=0,o=this.stride;i<o;i++)this.array[e+i]=t.array[n+i];return this},set:function(e,t){return t===void 0&&(t=0),this.array.set(e,t),this},clone:function(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Ee.generateUUID()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),n=new Bt(t,this.stride);return n.setUsage(this.usage),n},onUpload:function(e){return this.onUploadCallback=e,this},toJSON:function(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Ee.generateUUID()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}});const ei=new A;function ti(e,t,n,i){this.name="",this.data=e,this.itemSize=t,this.offset=n,this.normalized=i===!0}Object.defineProperties(ti.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}},needsUpdate:{set:function(e){this.data.needsUpdate=e}}});Object.assign(ti.prototype,{isInterleavedBufferAttribute:!0,applyMatrix4:function(e){for(let t=0,n=this.data.count;t<n;t++)ei.x=this.getX(t),ei.y=this.getY(t),ei.z=this.getZ(t),ei.applyMatrix4(e),this.setXYZ(t,ei.x,ei.y,ei.z);return this},setX:function(e,t){return this.data.array[e*this.data.stride+this.offset]=t,this},setY:function(e,t){return this.data.array[e*this.data.stride+this.offset+1]=t,this},setZ:function(e,t){return this.data.array[e*this.data.stride+this.offset+2]=t,this},setW:function(e,t){return this.data.array[e*this.data.stride+this.offset+3]=t,this},getX:function(e){return this.data.array[e*this.data.stride+this.offset]},getY:function(e){return this.data.array[e*this.data.stride+this.offset+1]},getZ:function(e){return this.data.array[e*this.data.stride+this.offset+2]},getW:function(e){return this.data.array[e*this.data.stride+this.offset+3]},setXY:function(e,t,n){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this},setXYZ:function(e,t,n,i){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this},setXYZW:function(e,t,n,i,o){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this.data.array[e+3]=o,this},clone:function(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let o=0;o<this.itemSize;o++)t.push(this.data.array[i+o])}return new Te(new this.array.constructor(t),this.itemSize,this.normalized)}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new ti(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)},toJSON:function(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let o=0;o<this.itemSize;o++)t.push(this.data.array[i+o])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}});function ni(e){ve.call(this),this.type="SpriteMaterial",this.color=new ue(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(e)}ni.prototype=Object.create(ve.prototype);ni.prototype.constructor=ni;ni.prototype.isSpriteMaterial=!0;ni.prototype.copy=function(e){return ve.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this};let Di;const Ao=new A,Oi=new A,ki=new A,Gi=new X,Co=new X,ql=new Re,Er=new A,Ro=new A,Tr=new A,Xl=new X,ca=new X,Yl=new X;function Zl(e){if(he.call(this),this.type="Sprite",Di===void 0){Di=new De;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),n=new Bt(t,5);Di.setIndex([0,1,2,0,2,3]),Di.setAttribute("position",new ti(n,3,0,!1)),Di.setAttribute("uv",new ti(n,2,3,!1))}this.geometry=Di,this.material=e!==void 0?e:new ni,this.center=new X(.5,.5)}Zl.prototype=Object.assign(Object.create(he.prototype),{constructor:Zl,isSprite:!0,raycast:function(e,t){e.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),Oi.setFromMatrixScale(this.matrixWorld),ql.copy(e.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld),ki.setFromMatrixPosition(this.modelViewMatrix),e.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&Oi.multiplyScalar(-ki.z);const n=this.material.rotation;let i,o;n!==0&&(o=Math.cos(n),i=Math.sin(n));const r=this.center;Ar(Er.set(-.5,-.5,0),ki,r,Oi,i,o),Ar(Ro.set(.5,-.5,0),ki,r,Oi,i,o),Ar(Tr.set(.5,.5,0),ki,r,Oi,i,o),Xl.set(0,0),ca.set(1,0),Yl.set(1,1);let s=e.ray.intersectTriangle(Er,Ro,Tr,!1,Ao);if(s===null&&(Ar(Ro.set(-.5,.5,0),ki,r,Oi,i,o),ca.set(0,1),s=e.ray.intersectTriangle(Er,Tr,Ro,!1,Ao),s===null))return;const a=e.ray.origin.distanceTo(Ao);if(a<e.near||a>e.far)return;t.push({distance:a,point:Ao.clone(),uv:mt.getUV(Ao,Er,Ro,Tr,Xl,ca,Yl,new X),face:null,object:this})},copy:function(e){return he.prototype.copy.call(this,e),e.center!==void 0&&this.center.copy(e.center),this.material=e.material,this}});function Ar(e,t,n,i,o,r){Gi.subVectors(e,n).addScalar(.5).multiply(i),o!==void 0?(Co.x=r*Gi.x-o*Gi.y,Co.y=o*Gi.x+r*Gi.y):Co.copy(Gi),e.copy(t),e.x+=Co.x,e.y+=Co.y,e.applyMatrix4(ql)}const Cr=new A,Jl=new A;function la(){he.call(this),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}}),this.autoUpdate=!0}la.prototype=Object.assign(Object.create(he.prototype),{constructor:la,isLOD:!0,copy:function(e){he.prototype.copy.call(this,e,!1);const t=e.levels;for(let n=0,i=t.length;n<i;n++){const o=t[n];this.addLevel(o.object.clone(),o.distance)}return this.autoUpdate=e.autoUpdate,this},addLevel:function(e,t){t===void 0&&(t=0),t=Math.abs(t);const n=this.levels;let i;for(i=0;i<n.length&&!(t<n[i].distance);i++);return n.splice(i,0,{distance:t,object:e}),this.add(e),this},getCurrentLevel:function(){return this._currentLevel},getObjectForDistance:function(e){const t=this.levels;if(t.length>0){let n,i;for(n=1,i=t.length;n<i&&!(e<t[n].distance);n++);return t[n-1].object}return null},raycast:function(e,t){const n=this.levels;if(n.length>0){Cr.setFromMatrixPosition(this.matrixWorld);const i=e.ray.origin.distanceTo(Cr);this.getObjectForDistance(i).raycast(e,t)}},update:function(e){const t=this.levels;if(t.length>1){Cr.setFromMatrixPosition(e.matrixWorld),Jl.setFromMatrixPosition(this.matrixWorld);const n=Cr.distanceTo(Jl)/e.zoom;t[0].object.visible=!0;let i,o;for(i=1,o=t.length;i<o&&n>=t[i].distance;i++)t[i-1].object.visible=!1,t[i].object.visible=!0;for(this._currentLevel=i-1;i<o;i++)t[i].object.visible=!1}},toJSON:function(e){const t=he.prototype.toJSON.call(this,e);this.autoUpdate===!1&&(t.object.autoUpdate=!1),t.object.levels=[];const n=this.levels;for(let i=0,o=n.length;i<o;i++){const r=n[i];t.object.levels.push({object:r.object.uuid,distance:r.distance})}return t}});function ha(e,t){e&&e.isGeometry&&console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."),at.call(this,e,t),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Re,this.bindMatrixInverse=new Re}ha.prototype=Object.assign(Object.create(at.prototype),{constructor:ha,isSkinnedMesh:!0,copy:function(e){return at.prototype.copy.call(this,e),this.bindMode=e.bindMode,this.bindMatrix.copy(e.bindMatrix),this.bindMatrixInverse.copy(e.bindMatrixInverse),this.skeleton=e.skeleton,this},bind:function(e,t){this.skeleton=e,t===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.getInverse(t)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){const e=new Ve,t=this.geometry.attributes.skinWeight;for(let n=0,i=t.count;n<i;n++){e.x=t.getX(n),e.y=t.getY(n),e.z=t.getZ(n),e.w=t.getW(n);const o=1/e.manhattanLength();o!==Infinity?e.multiplyScalar(o):e.set(1,0,0,0),t.setXYZW(n,e.x,e.y,e.z,e.w)}},updateMatrixWorld:function(e){at.prototype.updateMatrixWorld.call(this,e),this.bindMode==="attached"?this.bindMatrixInverse.getInverse(this.matrixWorld):this.bindMode==="detached"?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},boneTransform:function(){const e=new A,t=new Ve,n=new Ve,i=new A,o=new Re;return function(r,s){const a=this.skeleton,c=this.geometry;t.fromBufferAttribute(c.attributes.skinIndex,r),n.fromBufferAttribute(c.attributes.skinWeight,r),e.fromBufferAttribute(c.attributes.position,r).applyMatrix4(this.bindMatrix),s.set(0,0,0);for(let l=0;l<4;l++){const u=n.getComponent(l);if(u!==0){const h=t.getComponent(l);o.multiplyMatrices(a.bones[h].matrixWorld,a.boneInverses[h]),s.addScaledVector(i.copy(e).applyMatrix4(o),u)}}return s.applyMatrix4(this.bindMatrixInverse)}}()});const Ql=new Re,_x=new Re;function ua(e,t){if(e=e||[],this.bones=e.slice(0),this.boneMatrices=new Float32Array(this.bones.length*16),this.frame=-1,t===void 0)this.calculateInverses();else if(this.bones.length===t.length)this.boneInverses=t.slice(0);else{console.warn("THREE.Skeleton boneInverses is the wrong length."),this.boneInverses=[];for(let n=0,i=this.bones.length;n<i;n++)this.boneInverses.push(new Re)}}Object.assign(ua.prototype,{calculateInverses:function(){this.boneInverses=[];for(let e=0,t=this.bones.length;e<t;e++){const n=new Re;this.bones[e]&&n.getInverse(this.bones[e].matrixWorld),this.boneInverses.push(n)}},pose:function(){for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];n&&n.matrixWorld.getInverse(this.boneInverses[e])}for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];n&&(n.parent&&n.parent.isBone?(n.matrix.getInverse(n.parent.matrixWorld),n.matrix.multiply(n.matrixWorld)):n.matrix.copy(n.matrixWorld),n.matrix.decompose(n.position,n.quaternion,n.scale))}},update:function(){const e=this.bones,t=this.boneInverses,n=this.boneMatrices,i=this.boneTexture;for(let o=0,r=e.length;o<r;o++){const s=e[o]?e[o].matrixWorld:_x;Ql.multiplyMatrices(s,t[o]),Ql.toArray(n,o*16)}i!==void 0&&(i.needsUpdate=!0)},clone:function(){return new ua(this.bones,this.boneInverses)},getBoneByName:function(e){for(let t=0,n=this.bones.length;t<n;t++){const i=this.bones[t];if(i.name===e)return i}return},dispose:function(){this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=void 0)}});function Kl(){he.call(this),this.type="Bone"}Kl.prototype=Object.assign(Object.create(he.prototype),{constructor:Kl,isBone:!0});const $l=new Re,eh=new Re,Rr=[],Po=new at;function th(e,t,n){at.call(this,e,t),this.instanceMatrix=new Te(new Float32Array(n*16),16),this.instanceColor=null,this.count=n,this.frustumCulled=!1}th.prototype=Object.assign(Object.create(at.prototype),{constructor:th,isInstancedMesh:!0,copy:function(e){return at.prototype.copy.call(this,e),this.instanceMatrix.copy(e.instanceMatrix),this.count=e.count,this},setColorAt:function(e,t){this.instanceColor===null&&(this.instanceColor=new Te(new Float32Array(this.count*3),3)),t.toArray(this.instanceColor.array,e*3)},getMatrixAt:function(e,t){t.fromArray(this.instanceMatrix.array,e*16)},raycast:function(e,t){const n=this.matrixWorld,i=this.count;if(Po.geometry=this.geometry,Po.material=this.material,Po.material===void 0)return;for(let o=0;o<i;o++){this.getMatrixAt(o,$l),eh.multiplyMatrices(n,$l),Po.matrixWorld=eh,Po.raycast(e,Rr);for(let r=0,s=Rr.length;r<s;r++){const a=Rr[r];a.instanceId=o,a.object=this,t.push(a)}Rr.length=0}},setMatrixAt:function(e,t){t.toArray(this.instanceMatrix.array,e*16)},updateMorphTargets:function(){}});function Rt(e){ve.call(this),this.type="LineBasicMaterial",this.color=new ue(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.morphTargets=!1,this.setValues(e)}Rt.prototype=Object.create(ve.prototype);Rt.prototype.constructor=Rt;Rt.prototype.isLineBasicMaterial=!0;Rt.prototype.copy=function(e){return ve.prototype.copy.call(this,e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.morphTargets=e.morphTargets,this};const nh=new A,ih=new A,oh=new Re,Pr=new mo,Lr=new Tn;function Vi(e,t,n){n===1&&console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."),he.call(this),this.type="Line",this.geometry=e!==void 0?e:new De,this.material=t!==void 0?t:new Rt,this.updateMorphTargets()}Vi.prototype=Object.assign(Object.create(he.prototype),{constructor:Vi,isLine:!0,copy:function(e){return he.prototype.copy.call(this,e),this.material=e.material,this.geometry=e.geometry,this},computeLineDistances:function(){const e=this.geometry;if(e.isBufferGeometry)if(e.index===null){const t=e.attributes.position,n=[0];for(let i=1,o=t.count;i<o;i++)nh.fromBufferAttribute(t,i-1),ih.fromBufferAttribute(t,i),n[i]=n[i-1],n[i]+=nh.distanceTo(ih);e.setAttribute("lineDistance",new Pe(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(e.isGeometry){const t=e.vertices,n=e.lineDistances;n[0]=0;for(let i=1,o=t.length;i<o;i++)n[i]=n[i-1],n[i]+=t[i-1].distanceTo(t[i])}return this},raycast:function(e,t){const n=this.geometry,i=this.matrixWorld,o=e.params.Line.threshold;if(n.boundingSphere===null&&n.computeBoundingSphere(),Lr.copy(n.boundingSphere),Lr.applyMatrix4(i),Lr.radius+=o,e.ray.intersectsSphere(Lr)===!1)return;oh.getInverse(i),Pr.copy(e.ray).applyMatrix4(oh);const r=o/((this.scale.x+this.scale.y+this.scale.z)/3),s=r*r,a=new A,c=new A,l=new A,u=new A,h=this.isLineSegments?2:1;if(n.isBufferGeometry){const p=n.index,d=n.attributes,m=d.position;if(p!==null){const y=p.array;for(let v=0,g=y.length-1;v<g;v+=h){const f=y[v],w=y[v+1];a.fromBufferAttribute(m,f),c.fromBufferAttribute(m,w);const _=Pr.distanceSqToSegment(a,c,u,l);if(_>s)continue;u.applyMatrix4(this.matrixWorld);const M=e.ray.origin.distanceTo(u);if(M<e.near||M>e.far)continue;t.push({distance:M,point:l.clone().applyMatrix4(this.matrixWorld),index:v,face:null,faceIndex:null,object:this})}}else for(let y=0,v=m.count-1;y<v;y+=h){a.fromBufferAttribute(m,y),c.fromBufferAttribute(m,y+1);const g=Pr.distanceSqToSegment(a,c,u,l);if(g>s)continue;u.applyMatrix4(this.matrixWorld);const f=e.ray.origin.distanceTo(u);if(f<e.near||f>e.far)continue;t.push({distance:f,point:l.clone().applyMatrix4(this.matrixWorld),index:y,face:null,faceIndex:null,object:this})}}else if(n.isGeometry){const p=n.vertices,d=p.length;for(let m=0;m<d-1;m+=h){const y=Pr.distanceSqToSegment(p[m],p[m+1],u,l);if(y>s)continue;u.applyMatrix4(this.matrixWorld);const v=e.ray.origin.distanceTo(u);if(v<e.near||v>e.far)continue;t.push({distance:v,point:l.clone().applyMatrix4(this.matrixWorld),index:m,face:null,faceIndex:null,object:this})}}},updateMorphTargets:function(){const e=this.geometry;if(e.isBufferGeometry){const t=e.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let o=0,r=i.length;o<r;o++){const s=i[o].name||String(o);this.morphTargetInfluences.push(0),this.morphTargetDictionary[s]=o}}}}else{const t=e.morphTargets;t!==void 0&&t.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}});const Br=new A,Ir=new A;function Lo(e,t){Vi.call(this,e,t),this.type="LineSegments"}Lo.prototype=Object.assign(Object.create(Vi.prototype),{constructor:Lo,isLineSegments:!0,computeLineDistances:function(){const e=this.geometry;if(e.isBufferGeometry)if(e.index===null){const t=e.attributes.position,n=[];for(let i=0,o=t.count;i<o;i+=2)Br.fromBufferAttribute(t,i),Ir.fromBufferAttribute(t,i+1),n[i]=i===0?0:n[i-1],n[i+1]=n[i]+Br.distanceTo(Ir);e.setAttribute("lineDistance",new Pe(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(e.isGeometry){const t=e.vertices,n=e.lineDistances;for(let i=0,o=t.length;i<o;i+=2)Br.copy(t[i]),Ir.copy(t[i+1]),n[i]=i===0?0:n[i-1],n[i+1]=n[i]+Br.distanceTo(Ir)}return this}});function rh(e,t){Vi.call(this,e,t),this.type="LineLoop"}rh.prototype=Object.assign(Object.create(Vi.prototype),{constructor:rh,isLineLoop:!0});function ii(e){ve.call(this),this.type="PointsMaterial",this.color=new ue(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.setValues(e)}ii.prototype=Object.create(ve.prototype);ii.prototype.constructor=ii;ii.prototype.isPointsMaterial=!0;ii.prototype.copy=function(e){return ve.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.morphTargets=e.morphTargets,this};const sh=new Re,da=new mo,Nr=new Tn,zr=new A;function ah(e,t){he.call(this),this.type="Points",this.geometry=e!==void 0?e:new De,this.material=t!==void 0?t:new ii,this.updateMorphTargets()}ah.prototype=Object.assign(Object.create(he.prototype),{constructor:ah,isPoints:!0,copy:function(e){return he.prototype.copy.call(this,e),this.material=e.material,this.geometry=e.geometry,this},raycast:function(e,t){const n=this.geometry,i=this.matrixWorld,o=e.params.Points.threshold;if(n.boundingSphere===null&&n.computeBoundingSphere(),Nr.copy(n.boundingSphere),Nr.applyMatrix4(i),Nr.radius+=o,e.ray.intersectsSphere(Nr)===!1)return;sh.getInverse(i),da.copy(e.ray).applyMatrix4(sh);const r=o/((this.scale.x+this.scale.y+this.scale.z)/3),s=r*r;if(n.isBufferGeometry){const a=n.index,c=n.attributes,l=c.position;if(a!==null){const u=a.array;for(let h=0,p=u.length;h<p;h++){const d=u[h];zr.fromBufferAttribute(l,d),pa(zr,d,s,i,e,t,this)}}else for(let u=0,h=l.count;u<h;u++)zr.fromBufferAttribute(l,u),pa(zr,u,s,i,e,t,this)}else{const a=n.vertices;for(let c=0,l=a.length;c<l;c++)pa(a[c],c,s,i,e,t,this)}},updateMorphTargets:function(){const e=this.geometry;if(e.isBufferGeometry){const t=e.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let o=0,r=i.length;o<r;o++){const s=i[o].name||String(o);this.morphTargetInfluences.push(0),this.morphTargetDictionary[s]=o}}}}else{const t=e.morphTargets;t!==void 0&&t.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}});function pa(e,t,n,i,o,r,s){const a=da.distanceSqToPoint(e);if(a<n){const c=new A;da.closestPointToPoint(e,c),c.applyMatrix4(i);const l=o.ray.origin.distanceTo(c);if(l<o.near||l>o.far)return;r.push({distance:l,distanceToRay:Math.sqrt(a),point:c,index:t,face:null,object:s})}}function ch(e,t,n,i,o,r,s,a,c){qe.call(this,e,t,n,i,o,r,s,a,c),this.format=s!==void 0?s:qn,this.minFilter=r!==void 0?r:ut,this.magFilter=o!==void 0?o:ut,this.generateMipmaps=!1;const l=this;function u(){l.needsUpdate=!0,e.requestVideoFrameCallback(u)}"requestVideoFrameCallback"in e&&e.requestVideoFrameCallback(u)}ch.prototype=Object.assign(Object.create(qe.prototype),{constructor:ch,isVideoTexture:!0,update:function(){const e=this.image,t="requestVideoFrameCallback"in e;t===!1&&e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}});function Bo(e,t,n,i,o,r,s,a,c,l,u,h){qe.call(this,null,r,s,a,c,l,i,o,u,h),this.image={width:t,height:n},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}Bo.prototype=Object.create(qe.prototype);Bo.prototype.constructor=Bo;Bo.prototype.isCompressedTexture=!0;function Fr(e,t,n,i,o,r,s,a,c){qe.call(this,e,t,n,i,o,r,s,a,c),this.needsUpdate=!0}Fr.prototype=Object.create(qe.prototype);Fr.prototype.constructor=Fr;Fr.prototype.isCanvasTexture=!0;function Dr(e,t,n,i,o,r,s,a,c,l){if(l=l!==void 0?l:hi,l!==hi&&l!==ho)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&l===hi&&(n=nr),n===void 0&&l===ho&&(n=lo),qe.call(this,null,i,o,r,s,a,l,n,c),this.image={width:e,height:t},this.magFilter=s!==void 0?s:ft,this.minFilter=a!==void 0?a:ft,this.flipY=!1,this.generateMipmaps=!1}Dr.prototype=Object.create(qe.prototype);Dr.prototype.constructor=Dr;Dr.prototype.isDepthTexture=!0;let Mx=0;const Xt=new Re,fa=new he,Or=new A;function gt(){Object.defineProperty(this,"id",{value:Mx+=2}),this.uuid=Ee.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}gt.prototype=Object.assign(Object.create(an.prototype),{constructor:gt,isGeometry:!0,applyMatrix4:function(e){const t=new Mt().getNormalMatrix(e);for(let n=0,i=this.vertices.length;n<i;n++){const o=this.vertices[n];o.applyMatrix4(e)}for(let n=0,i=this.faces.length;n<i;n++){const o=this.faces[n];o.normal.applyMatrix3(t).normalize();for(let r=0,s=o.vertexNormals.length;r<s;r++)o.vertexNormals[r].applyMatrix3(t).normalize()}return this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(e){return Xt.makeRotationX(e),this.applyMatrix4(Xt),this},rotateY:function(e){return Xt.makeRotationY(e),this.applyMatrix4(Xt),this},rotateZ:function(e){return Xt.makeRotationZ(e),this.applyMatrix4(Xt),this},translate:function(e,t,n){return Xt.makeTranslation(e,t,n),this.applyMatrix4(Xt),this},scale:function(e,t,n){return Xt.makeScale(e,t,n),this.applyMatrix4(Xt),this},lookAt:function(e){return fa.lookAt(e),fa.updateMatrix(),this.applyMatrix4(fa.matrix),this},fromBufferGeometry:function(e){const t=this,n=e.index!==null?e.index:void 0,i=e.attributes;if(i.position===void 0)return console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion."),this;const o=i.position,r=i.normal,s=i.color,a=i.uv,c=i.uv2;c!==void 0&&(this.faceVertexUvs[1]=[]);for(let h=0;h<o.count;h++)t.vertices.push(new A().fromBufferAttribute(o,h)),s!==void 0&&t.colors.push(new ue().fromBufferAttribute(s,h));function l(h,p,d,m){const y=s===void 0?[]:[t.colors[h].clone(),t.colors[p].clone(),t.colors[d].clone()],v=r===void 0?[]:[new A().fromBufferAttribute(r,h),new A().fromBufferAttribute(r,p),new A().fromBufferAttribute(r,d)],g=new js(h,p,d,v,y,m);t.faces.push(g),a!==void 0&&t.faceVertexUvs[0].push([new X().fromBufferAttribute(a,h),new X().fromBufferAttribute(a,p),new X().fromBufferAttribute(a,d)]),c!==void 0&&t.faceVertexUvs[1].push([new X().fromBufferAttribute(c,h),new X().fromBufferAttribute(c,p),new X().fromBufferAttribute(c,d)])}const u=e.groups;if(u.length>0)for(let h=0;h<u.length;h++){const p=u[h],d=p.start,m=p.count;for(let y=d,v=d+m;y<v;y+=3)n!==void 0?l(n.getX(y),n.getX(y+1),n.getX(y+2),p.materialIndex):l(y,y+1,y+2,p.materialIndex)}else if(n!==void 0)for(let h=0;h<n.count;h+=3)l(n.getX(h),n.getX(h+1),n.getX(h+2));else for(let h=0;h<o.count;h+=3)l(h,h+1,h+2);return this.computeFaceNormals(),e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(Or).negate(),this.translate(Or.x,Or.y,Or.z),this},normalize:function(){this.computeBoundingSphere();const e=this.boundingSphere.center,t=this.boundingSphere.radius,n=t===0?1:1/t,i=new Re;return i.set(n,0,0,-n*e.x,0,n,0,-n*e.y,0,0,n,-n*e.z,0,0,0,1),this.applyMatrix4(i),this},computeFaceNormals:function(){const e=new A,t=new A;for(let n=0,i=this.faces.length;n<i;n++){const o=this.faces[n],r=this.vertices[o.a],s=this.vertices[o.b],a=this.vertices[o.c];e.subVectors(a,s),t.subVectors(r,s),e.cross(t),e.normalize(),o.normal.copy(e)}},computeVertexNormals:function(e){e===void 0&&(e=!0);const t=new Array(this.vertices.length);for(let n=0,i=this.vertices.length;n<i;n++)t[n]=new A;if(e){const n=new A,i=new A;for(let o=0,r=this.faces.length;o<r;o++){const s=this.faces[o],a=this.vertices[s.a],c=this.vertices[s.b],l=this.vertices[s.c];n.subVectors(l,c),i.subVectors(a,c),n.cross(i),t[s.a].add(n),t[s.b].add(n),t[s.c].add(n)}}else{this.computeFaceNormals();for(let n=0,i=this.faces.length;n<i;n++){const o=this.faces[n];t[o.a].add(o.normal),t[o.b].add(o.normal),t[o.c].add(o.normal)}}for(let n=0,i=this.vertices.length;n<i;n++)t[n].normalize();for(let n=0,i=this.faces.length;n<i;n++){const o=this.faces[n],r=o.vertexNormals;r.length===3?(r[0].copy(t[o.a]),r[1].copy(t[o.b]),r[2].copy(t[o.c])):(r[0]=t[o.a].clone(),r[1]=t[o.b].clone(),r[2]=t[o.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){this.computeFaceNormals();for(let e=0,t=this.faces.length;e<t;e++){const n=this.faces[e],i=n.vertexNormals;i.length===3?(i[0].copy(n.normal),i[1].copy(n.normal),i[2].copy(n.normal)):(i[0]=n.normal.clone(),i[1]=n.normal.clone(),i[2]=n.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){for(let t=0,n=this.faces.length;t<n;t++){const i=this.faces[t];i.__originalFaceNormal?i.__originalFaceNormal.copy(i.normal):i.__originalFaceNormal=i.normal.clone(),i.__originalVertexNormals||(i.__originalVertexNormals=[]);for(let o=0,r=i.vertexNormals.length;o<r;o++)i.__originalVertexNormals[o]?i.__originalVertexNormals[o].copy(i.vertexNormals[o]):i.__originalVertexNormals[o]=i.vertexNormals[o].clone()}const e=new gt;e.faces=this.faces;for(let t=0,n=this.morphTargets.length;t<n;t++){if(!this.morphNormals[t]){this.morphNormals[t]={},this.morphNormals[t].faceNormals=[],this.morphNormals[t].vertexNormals=[];const o=this.morphNormals[t].faceNormals,r=this.morphNormals[t].vertexNormals;for(let s=0,a=this.faces.length;s<a;s++){const c=new A,l={a:new A,b:new A,c:new A};o.push(c),r.push(l)}}const i=this.morphNormals[t];e.vertices=this.morphTargets[t].vertices,e.computeFaceNormals(),e.computeVertexNormals();for(let o=0,r=this.faces.length;o<r;o++){const s=this.faces[o],a=i.faceNormals[o],c=i.vertexNormals[o];a.copy(s.normal),c.a.copy(s.vertexNormals[0]),c.b.copy(s.vertexNormals[1]),c.c.copy(s.vertexNormals[2])}}for(let t=0,n=this.faces.length;t<n;t++){const i=this.faces[t];i.normal=i.__originalFaceNormal,i.vertexNormals=i.__originalVertexNormals}},computeBoundingBox:function(){this.boundingBox===null&&(this.boundingBox=new En),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){this.boundingSphere===null&&(this.boundingSphere=new Tn),this.boundingSphere.setFromPoints(this.vertices)},merge:function(e,t,n){if(!(e&&e.isGeometry)){console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",e);return}let i;const o=this.vertices.length,r=this.vertices,s=e.vertices,a=this.faces,c=e.faces,l=this.colors,u=e.colors;n===void 0&&(n=0),t!==void 0&&(i=new Mt().getNormalMatrix(t));for(let h=0,p=s.length;h<p;h++){const d=s[h],m=d.clone();t!==void 0&&m.applyMatrix4(t),r.push(m)}for(let h=0,p=u.length;h<p;h++)l.push(u[h].clone());for(let h=0,p=c.length;h<p;h++){const d=c[h];let m,y;const v=d.vertexNormals,g=d.vertexColors,f=new js(d.a+o,d.b+o,d.c+o);f.normal.copy(d.normal),i!==void 0&&f.normal.applyMatrix3(i).normalize();for(let w=0,_=v.length;w<_;w++)m=v[w].clone(),i!==void 0&&m.applyMatrix3(i).normalize(),f.vertexNormals.push(m);f.color.copy(d.color);for(let w=0,_=g.length;w<_;w++)y=g[w],f.vertexColors.push(y.clone());f.materialIndex=d.materialIndex+n,a.push(f)}for(let h=0,p=e.faceVertexUvs.length;h<p;h++){const d=e.faceVertexUvs[h];this.faceVertexUvs[h]===void 0&&(this.faceVertexUvs[h]=[]);for(let m=0,y=d.length;m<y;m++){const v=d[m],g=[];for(let f=0,w=v.length;f<w;f++)g.push(v[f].clone());this.faceVertexUvs[h].push(g)}}},mergeMesh:function(e){if(!(e&&e.isMesh)){console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",e);return}e.matrixAutoUpdate&&e.updateMatrix(),this.merge(e.geometry,e.matrix)},mergeVertices:function(){const e={},t=[],n=[],i=4,o=Math.pow(10,i);for(let a=0,c=this.vertices.length;a<c;a++){const l=this.vertices[a],u=Math.round(l.x*o)+"_"+Math.round(l.y*o)+"_"+Math.round(l.z*o);e[u]===void 0?(e[u]=a,t.push(this.vertices[a]),n[a]=t.length-1):n[a]=n[e[u]]}const r=[];for(let a=0,c=this.faces.length;a<c;a++){const l=this.faces[a];l.a=n[l.a],l.b=n[l.b],l.c=n[l.c];const u=[l.a,l.b,l.c];for(let h=0;h<3;h++)if(u[h]===u[(h+1)%3]){r.push(a);break}}for(let a=r.length-1;a>=0;a--){const c=r[a];this.faces.splice(c,1);for(let l=0,u=this.faceVertexUvs.length;l<u;l++)this.faceVertexUvs[l].splice(c,1)}const s=this.vertices.length-t.length;return this.vertices=t,s},setFromPoints:function(e){this.vertices=[];for(let t=0,n=e.length;t<n;t++){const i=e[t];this.vertices.push(new A(i.x,i.y,i.z||0))}return this},sortFacesByMaterialIndex:function(){const e=this.faces,t=e.length;for(let a=0;a<t;a++)e[a]._id=a;function n(a,c){return a.materialIndex-c.materialIndex}e.sort(n);const i=this.faceVertexUvs[0],o=this.faceVertexUvs[1];let r,s;i&&i.length===t&&(r=[]),o&&o.length===t&&(s=[]);for(let a=0;a<t;a++){const c=e[a]._id;r&&r.push(i[c]),s&&s.push(o[c])}r&&(this.faceVertexUvs[0]=r),s&&(this.faceVertexUvs[1]=s)},toJSON:function(){const e={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),this.parameters!==void 0){const d=this.parameters;for(const m in d)d[m]!==void 0&&(e[m]=d[m]);return e}const t=[];for(let d=0;d<this.vertices.length;d++){const m=this.vertices[d];t.push(m.x,m.y,m.z)}const n=[],i=[],o={},r=[],s={},a=[],c={};for(let d=0;d<this.faces.length;d++){const m=this.faces[d],y=!0,v=!1,g=this.faceVertexUvs[0][d]!==void 0,f=m.normal.length()>0,w=m.vertexNormals.length>0,_=m.color.r!==1||m.color.g!==1||m.color.b!==1,M=m.vertexColors.length>0;let b=0;if(b=l(b,0,0),b=l(b,1,y),b=l(b,2,v),b=l(b,3,g),b=l(b,4,f),b=l(b,5,w),b=l(b,6,_),b=l(b,7,M),n.push(b),n.push(m.a,m.b,m.c),n.push(m.materialIndex),g){const P=this.faceVertexUvs[0][d];n.push(p(P[0]),p(P[1]),p(P[2]))}if(f&&n.push(u(m.normal)),w){const P=m.vertexNormals;n.push(u(P[0]),u(P[1]),u(P[2]))}if(_&&n.push(h(m.color)),M){const P=m.vertexColors;n.push(h(P[0]),h(P[1]),h(P[2]))}}function l(d,m,y){return y?d|1<<m:d&~(1<<m)}function u(d){const m=d.x.toString()+d.y.toString()+d.z.toString();return o[m]!==void 0||(o[m]=i.length/3,i.push(d.x,d.y,d.z)),o[m]}function h(d){const m=d.r.toString()+d.g.toString()+d.b.toString();return s[m]!==void 0||(s[m]=r.length,r.push(d.getHex())),s[m]}function p(d){const m=d.x.toString()+d.y.toString();return c[m]!==void 0||(c[m]=a.length/2,a.push(d.x,d.y)),c[m]}return e.data={},e.data.vertices=t,e.data.normals=i,r.length>0&&(e.data.colors=r),a.length>0&&(e.data.uvs=[a]),e.data.faces=n,e},clone:function(){return new gt().copy(this)},copy:function(e){this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;const t=e.vertices;for(let h=0,p=t.length;h<p;h++)this.vertices.push(t[h].clone());const n=e.colors;for(let h=0,p=n.length;h<p;h++)this.colors.push(n[h].clone());const i=e.faces;for(let h=0,p=i.length;h<p;h++)this.faces.push(i[h].clone());for(let h=0,p=e.faceVertexUvs.length;h<p;h++){const d=e.faceVertexUvs[h];this.faceVertexUvs[h]===void 0&&(this.faceVertexUvs[h]=[]);for(let m=0,y=d.length;m<y;m++){const v=d[m],g=[];for(let f=0,w=v.length;f<w;f++){const _=v[f];g.push(_.clone())}this.faceVertexUvs[h].push(g)}}const o=e.morphTargets;for(let h=0,p=o.length;h<p;h++){const d={};if(d.name=o[h].name,o[h].vertices!==void 0){d.vertices=[];for(let m=0,y=o[h].vertices.length;m<y;m++)d.vertices.push(o[h].vertices[m].clone())}if(o[h].normals!==void 0){d.normals=[];for(let m=0,y=o[h].normals.length;m<y;m++)d.normals.push(o[h].normals[m].clone())}this.morphTargets.push(d)}const r=e.morphNormals;for(let h=0,p=r.length;h<p;h++){const d={};if(r[h].vertexNormals!==void 0){d.vertexNormals=[];for(let m=0,y=r[h].vertexNormals.length;m<y;m++){const v=r[h].vertexNormals[m],g={};g.a=v.a.clone(),g.b=v.b.clone(),g.c=v.c.clone(),d.vertexNormals.push(g)}}if(r[h].faceNormals!==void 0){d.faceNormals=[];for(let m=0,y=r[h].faceNormals.length;m<y;m++)d.faceNormals.push(r[h].faceNormals[m].clone())}this.morphNormals.push(d)}const s=e.skinWeights;for(let h=0,p=s.length;h<p;h++)this.skinWeights.push(s[h].clone());const a=e.skinIndices;for(let h=0,p=a.length;h<p;h++)this.skinIndices.push(a[h].clone());const c=e.lineDistances;for(let h=0,p=c.length;h<p;h++)this.lineDistances.push(c[h]);const l=e.boundingBox;l!==null&&(this.boundingBox=l.clone());const u=e.boundingSphere;return u!==null&&(this.boundingSphere=u.clone()),this.elementsNeedUpdate=e.elementsNeedUpdate,this.verticesNeedUpdate=e.verticesNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.lineDistancesNeedUpdate=e.lineDistancesNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});class lh extends gt{constructor(e,t,n,i,o,r){super();this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:o,depthSegments:r},this.fromBufferGeometry(new ia(e,t,n,i,o,r)),this.mergeVertices()}}class Sx extends De{constructor(e,t,n,i,o,r,s,a){super();this.type="CylinderBufferGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:i,heightSegments:o,openEnded:r,thetaStart:s,thetaLength:a};const c=this;e=e!==void 0?e:1,t=t!==void 0?t:1,n=n||1,i=Math.floor(i)||8,o=Math.floor(o)||1,r=r!==void 0?r:!1,s=s!==void 0?s:0,a=a!==void 0?a:Math.PI*2;const l=[],u=[],h=[],p=[];let d=0;const m=[],y=n/2;let v=0;g(),r===!1&&(e>0&&f(!0),t>0&&f(!1)),this.setIndex(l),this.setAttribute("position",new Pe(u,3)),this.setAttribute("normal",new Pe(h,3)),this.setAttribute("uv",new Pe(p,2));function g(){const w=new A,_=new A;let M=0;const b=(t-e)/n;for(let P=0;P<=o;P++){const D=[],B=P/o,V=B*(t-e)+e;for(let N=0;N<=i;N++){const I=N/i,L=I*a+s,C=Math.sin(L),S=Math.cos(L);_.x=V*C,_.y=-B*n+y,_.z=V*S,u.push(_.x,_.y,_.z),w.set(C,b,S).normalize(),h.push(w.x,w.y,w.z),p.push(I,1-B),D.push(d++)}m.push(D)}for(let P=0;P<i;P++)for(let D=0;D<o;D++){const B=m[D][P],V=m[D+1][P],N=m[D+1][P+1],I=m[D][P+1];l.push(B,V,I),l.push(V,N,I),M+=6}c.addGroup(v,M,0),v+=M}function f(w){const _=d,M=new X,b=new A;let P=0;const D=w===!0?e:t,B=w===!0?1:-1;for(let N=1;N<=i;N++)u.push(0,y*B,0),h.push(0,B,0),p.push(.5,.5),d++;const V=d;for(let N=0;N<=i;N++){const I=N/i,L=I*a+s,C=Math.cos(L),S=Math.sin(L);b.x=D*S,b.y=y*B,b.z=D*C,u.push(b.x,b.y,b.z),h.push(0,B,0),M.x=C*.5+.5,M.y=S*.5*B+.5,p.push(M.x,M.y),d++}for(let N=0;N<i;N++){const I=_+N,L=V+N;w===!0?l.push(L,L+1,I):l.push(L+1,L,I),P+=3}c.addGroup(v,P,w===!0?1:2),v+=P}}}class hh extends gt{constructor(e,t,n,i,o,r,s,a){super();this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:i,heightSegments:o,openEnded:r,thetaStart:s,thetaLength:a},this.fromBufferGeometry(new Sx(e,t,n,i,o,r,s,a)),this.mergeVertices()}}const Z0=new A,J0=new A,Q0=new A,K0=new mt;const Tx={triangulate:function(e,t,n){n=n||2;const i=t&&t.length,o=i?t[0]*n:e.length;let r=uh(e,0,o,n,!0);const s=[];if(!r||r.next===r.prev)return s;let a,c,l,u,h,p,d;if(i&&(r=Ex(e,t,r,n)),e.length>80*n){a=l=e[0],c=u=e[1];for(let m=n;m<o;m+=n)h=e[m],p=e[m+1],h<a&&(a=h),p<c&&(c=p),h>l&&(l=h),p>u&&(u=p);d=Math.max(l-a,u-c),d=d!==0?1/d:0}return Io(r,s,n,a,c,d),s}};function uh(e,t,n,i,o){let r,s;if(o===Ax(e,t,n,i)>0)for(r=t;r<n;r+=i)s=dh(r,e[r],e[r+1],s);else for(r=n-i;r>=t;r-=i)s=dh(r,e[r],e[r+1],s);return s&&kr(s,s.next)&&(No(s),s=s.next),s}function zn(e,t){if(!e)return e;t||(t=e);let n=e,i;do if(i=!1,!n.steiner&&(kr(n,n.next)||Qe(n.prev,n,n.next)===0)){if(No(n),n=t=n.prev,n===n.next)break;i=!0}else n=n.next;while(i||n!==t);return t}function Io(e,t,n,i,o,r,s){if(!e)return;!s&&r&&Bx(e,i,o,r);let a=e,c,l;for(;e.prev!==e.next;){if(c=e.prev,l=e.next,r?Rx(e,i,o,r):Cx(e)){t.push(c.i/n),t.push(e.i/n),t.push(l.i/n),No(e),e=l.next,a=l.next;continue}if(e=l,e===a){s?s===1?(e=Px(zn(e),t,n),Io(e,t,n,i,o,r,2)):s===2&&Lx(e,t,n,i,o,r):Io(zn(e),t,n,i,o,r,1);break}}}function Cx(e){const t=e.prev,n=e,i=e.next;if(Qe(t,n,i)>=0)return!1;let o=e.next.next;for(;o!==e.prev;){if(Ui(t.x,t.y,n.x,n.y,i.x,i.y,o.x,o.y)&&Qe(o.prev,o,o.next)>=0)return!1;o=o.next}return!0}function Rx(e,t,n,i){const o=e.prev,r=e,s=e.next;if(Qe(o,r,s)>=0)return!1;const a=o.x<r.x?o.x<s.x?o.x:s.x:r.x<s.x?r.x:s.x,c=o.y<r.y?o.y<s.y?o.y:s.y:r.y<s.y?r.y:s.y,l=o.x>r.x?o.x>s.x?o.x:s.x:r.x>s.x?r.x:s.x,u=o.y>r.y?o.y>s.y?o.y:s.y:r.y>s.y?r.y:s.y,h=ma(a,c,t,n,i),p=ma(l,u,t,n,i);let d=e.prevZ,m=e.nextZ;for(;d&&d.z>=h&&m&&m.z<=p;){if(d!==e.prev&&d!==e.next&&Ui(o.x,o.y,r.x,r.y,s.x,s.y,d.x,d.y)&&Qe(d.prev,d,d.next)>=0)return!1;if(d=d.prevZ,m!==e.prev&&m!==e.next&&Ui(o.x,o.y,r.x,r.y,s.x,s.y,m.x,m.y)&&Qe(m.prev,m,m.next)>=0)return!1;m=m.nextZ}for(;d&&d.z>=h;){if(d!==e.prev&&d!==e.next&&Ui(o.x,o.y,r.x,r.y,s.x,s.y,d.x,d.y)&&Qe(d.prev,d,d.next)>=0)return!1;d=d.prevZ}for(;m&&m.z<=p;){if(m!==e.prev&&m!==e.next&&Ui(o.x,o.y,r.x,r.y,s.x,s.y,m.x,m.y)&&Qe(m.prev,m,m.next)>=0)return!1;m=m.nextZ}return!0}function Px(e,t,n){let i=e;do{const o=i.prev,r=i.next.next;!kr(o,r)&&ph(o,i,i.next,r)&&zo(o,r)&&zo(r,o)&&(t.push(o.i/n),t.push(i.i/n),t.push(r.i/n),No(i),No(i.next),i=e=r),i=i.next}while(i!==e);return zn(i)}function Lx(e,t,n,i,o,r){let s=e;do{let a=s.next.next;for(;a!==s.prev;){if(s.i!==a.i&&Ix(s,a)){let c=fh(s,a);s=zn(s,s.next),c=zn(c,c.next),Io(s,t,n,i,o,r),Io(c,t,n,i,o,r);return}a=a.next}s=s.next}while(s!==e)}function Ex(e,t,n,i){const o=[];let r,s,a,c,l;for(r=0,s=t.length;r<s;r++)a=t[r]*i,c=r<s-1?t[r+1]*i:e.length,l=uh(e,a,c,i,!1),l===l.next&&(l.steiner=!0),o.push(Fx(l));for(o.sort(Nx),r=0;r<o.length;r++)zx(o[r],n),n=zn(n,n.next);return n}function Nx(e,t){return e.x-t.x}function zx(e,t){if(t=Dx(e,t),t){const n=fh(t,e);zn(t,t.next),zn(n,n.next)}}function Dx(e,t){let n=t;const i=e.x,o=e.y;let r=-Infinity,s;do{if(o<=n.y&&o>=n.next.y&&n.next.y!==n.y){const p=n.x+(o-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(p<=i&&p>r){if(r=p,p===i){if(o===n.y)return n;if(o===n.next.y)return n.next}s=n.x<n.next.x?n:n.next}}n=n.next}while(n!==t);if(!s)return null;if(i===r)return s;const a=s,c=s.x,l=s.y;let u=Infinity,h;n=s;do i>=n.x&&n.x>=c&&i!==n.x&&Ui(o<l?i:r,o,c,l,o<l?r:i,o,n.x,n.y)&&(h=Math.abs(o-n.y)/(i-n.x),zo(n,e)&&(h<u||h===u&&(n.x>s.x||n.x===s.x&&Ox(s,n)))&&(s=n,u=h)),n=n.next;while(n!==a);return s}function Ox(e,t){return Qe(e.prev,e,t.prev)<0&&Qe(t.next,e,e.next)<0}function Bx(e,t,n,i){let o=e;do o.z===null&&(o.z=ma(o.x,o.y,t,n,i)),o.prevZ=o.prev,o.nextZ=o.next,o=o.next;while(o!==e);o.prevZ.nextZ=null,o.prevZ=null,kx(o)}function kx(e){let t,n,i,o,r,s,a,c,l=1;do{for(n=e,e=null,r=null,s=0;n;){for(s++,i=n,a=0,t=0;t<l&&!(a++,i=i.nextZ,!i);t++);for(c=l;a>0||c>0&&i;)a!==0&&(c===0||!i||n.z<=i.z)?(o=n,n=n.nextZ,a--):(o=i,i=i.nextZ,c--),r?r.nextZ=o:e=o,o.prevZ=r,r=o;n=i}r.nextZ=null,l*=2}while(s>1);return e}function ma(e,t,n,i,o){return e=32767*(e-n)*o,t=32767*(t-i)*o,e=(e|e<<8)&16711935,e=(e|e<<4)&252645135,e=(e|e<<2)&858993459,e=(e|e<<1)&1431655765,t=(t|t<<8)&16711935,t=(t|t<<4)&252645135,t=(t|t<<2)&858993459,t=(t|t<<1)&1431655765,e|t<<1}function Fx(e){let t=e,n=e;do(t.x<n.x||t.x===n.x&&t.y<n.y)&&(n=t),t=t.next;while(t!==e);return n}function Ui(e,t,n,i,o,r,s,a){return(o-s)*(t-a)-(e-s)*(r-a)>=0&&(e-s)*(i-a)-(n-s)*(t-a)>=0&&(n-s)*(r-a)-(o-s)*(i-a)>=0}function Ix(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!Gx(e,t)&&(zo(e,t)&&zo(t,e)&&Vx(e,t)&&(Qe(e.prev,e,t.prev)||Qe(e,t.prev,t))||kr(e,t)&&Qe(e.prev,e,e.next)>0&&Qe(t.prev,t,t.next)>0)}function Qe(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function kr(e,t){return e.x===t.x&&e.y===t.y}function ph(e,t,n,i){const o=Vr(Qe(e,t,n)),r=Vr(Qe(e,t,i)),s=Vr(Qe(n,i,e)),a=Vr(Qe(n,i,t));return o!==r&&s!==a||(o===0&&Gr(e,n,t)||(r===0&&Gr(e,i,t)||s===0&&Gr(n,e,i)))?!0:!!(a===0&&Gr(n,t,i))}function Gr(e,t,n){return t.x<=Math.max(e.x,n.x)&&t.x>=Math.min(e.x,n.x)&&t.y<=Math.max(e.y,n.y)&&t.y>=Math.min(e.y,n.y)}function Vr(e){return e>0?1:e<0?-1:0}function Gx(e,t){let n=e;do{if(n.i!==e.i&&n.next.i!==e.i&&n.i!==t.i&&n.next.i!==t.i&&ph(n,n.next,e,t))return!0;n=n.next}while(n!==e);return!1}function zo(e,t){return Qe(e.prev,e,e.next)<0?Qe(e,t,e.next)>=0&&Qe(e,e.prev,t)>=0:Qe(e,t,e.prev)<0||Qe(e,e.next,t)<0}function Vx(e,t){let n=e,i=!1;const o=(e.x+t.x)/2,r=(e.y+t.y)/2;do n.y>r!==n.next.y>r&&n.next.y!==n.y&&o<(n.next.x-n.x)*(r-n.y)/(n.next.y-n.y)+n.x&&(i=!i),n=n.next;while(n!==e);return i}function fh(e,t){const n=new ga(e.i,e.x,e.y),i=new ga(t.i,t.x,t.y),o=e.next,r=t.prev;return e.next=t,t.prev=e,n.next=o,o.prev=n,i.next=n,n.prev=i,r.next=i,i.prev=r,i}function dh(e,t,n,i){const o=new ga(e,t,n);return i?(o.next=i.next,o.prev=i,i.next.prev=o,i.next=o):(o.prev=o,o.next=o),o}function No(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function ga(e,t,n){this.i=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function Ax(e,t,n,i){let o=0;for(let r=t,s=n-i;r<n;r+=i)o+=(e[s]-e[r])*(e[r+1]+e[s+1]),s=r;return o}const Fn={area:function(e){const t=e.length;let n=0;for(let i=t-1,o=0;o<t;i=o++)n+=e[i].x*e[o].y-e[o].x*e[i].y;return n*.5},isClockWise:function(e){return Fn.area(e)<0},triangulateShape:function(e,t){const n=[],i=[],o=[];mh(e),gh(n,e);let r=e.length;t.forEach(mh);for(let a=0;a<t.length;a++)i.push(r),r+=t[a].length,gh(n,t[a]);const s=Tx.triangulate(n,i);for(let a=0;a<s.length;a+=3)o.push(s.slice(a,a+3));return o}};function mh(e){const t=e.length;t>2&&e[t-1].equals(e[0])&&e.pop()}function gh(e,t){for(let n=0;n<t.length;n++)e.push(t[n].x),e.push(t[n].y)}class yh extends De{constructor(e,t){super();this.type="ExtrudeBufferGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];const n=this,i=[],o=[];for(let s=0,a=e.length;s<a;s++){const c=e[s];r(c)}this.setAttribute("position",new Pe(i,3)),this.setAttribute("uv",new Pe(o,2)),this.computeVertexNormals();function r(s){const a=[],c=t.curveSegments!==void 0?t.curveSegments:12,l=t.steps!==void 0?t.steps:1;let u=t.depth!==void 0?t.depth:100,h=t.bevelEnabled!==void 0?t.bevelEnabled:!0,p=t.bevelThickness!==void 0?t.bevelThickness:6,d=t.bevelSize!==void 0?t.bevelSize:p-2,m=t.bevelOffset!==void 0?t.bevelOffset:0,y=t.bevelSegments!==void 0?t.bevelSegments:3;const v=t.extrudePath,g=t.UVGenerator!==void 0?t.UVGenerator:Ux;t.amount!==void 0&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),u=t.amount);let f,w=!1,_,M,b,P;v&&(f=v.getSpacedPoints(l),w=!0,h=!1,_=v.computeFrenetFrames(l,!1),M=new A,b=new A,P=new A),h||(y=0,p=0,d=0,m=0);const D=s.extractPoints(c);let B=D.shape;const V=D.holes,N=!Fn.isClockWise(B);if(N){B=B.reverse();for(let q=0,Q=V.length;q<Q;q++){const ee=V[q];Fn.isClockWise(ee)&&(V[q]=ee.reverse())}}const I=Fn.triangulateShape(B,V),L=B;for(let q=0,Q=V.length;q<Q;q++){const ee=V[q];B=B.concat(ee)}function C(q,Q,ee){return Q||console.error("THREE.ExtrudeGeometry: vec does not exist"),Q.clone().multiplyScalar(ee).add(q)}const S=B.length,F=I.length;function k(q,Q,ee){let le,re,_e;const R=q.x-Q.x,T=q.y-Q.y,K=ee.x-q.x,Y=ee.y-q.y,z=R*R+T*T,J=R*Y-T*K;if(Math.abs(J)>Number.EPSILON){const $=Math.sqrt(z),me=Math.sqrt(K*K+Y*Y),te=Q.x-T/$,ae=Q.y+R/$,fe=ee.x-Y/me,Me=ee.y+K/me,se=((fe-te)*Y-(Me-ae)*K)/(R*Y-T*K);le=te+R*se-q.x,re=ae+T*se-q.y;const xe=le*le+re*re;if(xe<=2)return new X(le,re);_e=Math.sqrt(xe/2)}else{let $=!1;R>Number.EPSILON?K>Number.EPSILON&&($=!0):R<-Number.EPSILON?K<-Number.EPSILON&&($=!0):Math.sign(T)===Math.sign(Y)&&($=!0),$?(le=-T,re=R,_e=Math.sqrt(z)):(le=R,re=T,_e=Math.sqrt(z/2))}return new X(le/_e,re/_e)}const U=[];for(let q=0,Q=L.length,ee=Q-1,le=q+1;q<Q;q++,ee++,le++)ee===Q&&(ee=0),le===Q&&(le=0),U[q]=k(L[q],L[ee],L[le]);const Z=[];let ne,j=U.concat();for(let q=0,Q=V.length;q<Q;q++){const ee=V[q];ne=[];for(let le=0,re=ee.length,_e=re-1,R=le+1;le<re;le++,_e++,R++)_e===re&&(_e=0),R===re&&(R=0),ne[le]=k(ee[le],ee[_e],ee[R]);Z.push(ne),j=j.concat(ne)}for(let q=0;q<y;q++){const Q=q/y,ee=p*Math.cos(Q*Math.PI/2),le=d*Math.sin(Q*Math.PI/2)+m;for(let re=0,_e=L.length;re<_e;re++){const R=C(L[re],U[re],le);He(R.x,R.y,-ee)}for(let re=0,_e=V.length;re<_e;re++){const R=V[re];ne=Z[re];for(let T=0,K=R.length;T<K;T++){const Y=C(R[T],ne[T],le);He(Y.x,Y.y,-ee)}}}const ge=d+m;for(let q=0;q<S;q++){const Q=h?C(B[q],j[q],ge):B[q];w?(b.copy(_.normals[0]).multiplyScalar(Q.x),M.copy(_.binormals[0]).multiplyScalar(Q.y),P.copy(f[0]).add(b).add(M),He(P.x,P.y,P.z)):He(Q.x,Q.y,0)}for(let q=1;q<=l;q++)for(let Q=0;Q<S;Q++){const ee=h?C(B[Q],j[Q],ge):B[Q];w?(b.copy(_.normals[q]).multiplyScalar(ee.x),M.copy(_.binormals[q]).multiplyScalar(ee.y),P.copy(f[q]).add(b).add(M),He(P.x,P.y,P.z)):He(ee.x,ee.y,u/l*q)}for(let q=y-1;q>=0;q--){const Q=q/y,ee=p*Math.cos(Q*Math.PI/2),le=d*Math.sin(Q*Math.PI/2)+m;for(let re=0,_e=L.length;re<_e;re++){const R=C(L[re],U[re],le);He(R.x,R.y,u+ee)}for(let re=0,_e=V.length;re<_e;re++){const R=V[re];ne=Z[re];for(let T=0,K=R.length;T<K;T++){const Y=C(R[T],ne[T],le);w?He(Y.x,Y.y+f[l-1].y,f[l-1].x+ee):He(Y.x,Y.y,u+ee)}}}we(),ke();function we(){const q=i.length/3;if(h){let Q=0,ee=S*Q;for(let le=0;le<F;le++){const re=I[le];be(re[2]+ee,re[1]+ee,re[0]+ee)}Q=l+y*2,ee=S*Q;for(let le=0;le<F;le++){const re=I[le];be(re[0]+ee,re[1]+ee,re[2]+ee)}}else{for(let Q=0;Q<F;Q++){const ee=I[Q];be(ee[2],ee[1],ee[0])}for(let Q=0;Q<F;Q++){const ee=I[Q];be(ee[0]+S*l,ee[1]+S*l,ee[2]+S*l)}}n.addGroup(q,i.length/3-q,0)}function ke(){const q=i.length/3;let Q=0;W(L,Q),Q+=L.length;for(let ee=0,le=V.length;ee<le;ee++){const re=V[ee];W(re,Q),Q+=re.length}n.addGroup(q,i.length/3-q,1)}function W(q,Q){let ee=q.length;for(;--ee>=0;){const le=ee;let re=ee-1;re<0&&(re=q.length-1);for(let _e=0,R=l+y*2;_e<R;_e++){const T=S*_e,K=S*(_e+1),Y=Q+le+T,z=Q+re+T,J=Q+re+K,$=Q+le+K;Fe(Y,z,J,$)}}}function He(q,Q,ee){a.push(q),a.push(Q),a.push(ee)}function be(q,Q,ee){ye(q),ye(Q),ye(ee);const le=i.length/3,re=g.generateTopUV(n,i,le-3,le-2,le-1);Oe(re[0]),Oe(re[1]),Oe(re[2])}function Fe(q,Q,ee,le){ye(q),ye(Q),ye(le),ye(Q),ye(ee),ye(le);const re=i.length/3,_e=g.generateSideWallUV(n,i,re-6,re-3,re-2,re-1);Oe(_e[0]),Oe(_e[1]),Oe(_e[3]),Oe(_e[1]),Oe(_e[2]),Oe(_e[3])}function ye(q){i.push(a[q*3+0]),i.push(a[q*3+1]),i.push(a[q*3+2])}function Oe(q){o.push(q.x),o.push(q.y)}}}toJSON(){const e=De.prototype.toJSON.call(this),t=this.parameters.shapes,n=this.parameters.options;return Hx(t,n,e)}}const Ux={generateTopUV:function(e,t,n,i,o){const r=t[n*3],s=t[n*3+1],a=t[i*3],c=t[i*3+1],l=t[o*3],u=t[o*3+1];return[new X(r,s),new X(a,c),new X(l,u)]},generateSideWallUV:function(e,t,n,i,o,r){const s=t[n*3],a=t[n*3+1],c=t[n*3+2],l=t[i*3],u=t[i*3+1],h=t[i*3+2],p=t[o*3],d=t[o*3+1],m=t[o*3+2],y=t[r*3],v=t[r*3+1],g=t[r*3+2];return Math.abs(a-u)<.01?[new X(s,1-c),new X(l,1-h),new X(p,1-m),new X(y,1-g)]:[new X(a,1-c),new X(u,1-h),new X(d,1-m),new X(v,1-g)]}};function Hx(e,t,n){if(n.shapes=[],Array.isArray(e))for(let i=0,o=e.length;i<o;i++){const r=e[i];n.shapes.push(r.uuid)}else n.shapes.push(e.uuid);return t.extrudePath!==void 0&&(n.options.extrudePath=t.extrudePath.toJSON()),n}class jx extends gt{constructor(e,t){super();this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},this.fromBufferGeometry(new yh(e,t)),this.mergeVertices()}toJSON(){const e=super.toJSON(),t=this.parameters.shapes,n=this.parameters.options;return Wx(t,n,e)}}function Wx(e,t,n){if(n.shapes=[],Array.isArray(e))for(let i=0,o=e.length;i<o;i++){const r=e[i];n.shapes.push(r.uuid)}else n.shapes.push(e.uuid);return t.extrudePath!==void 0&&(n.options.extrudePath=t.extrudePath.toJSON()),n}function Ur(e,t,n){De.call(this),this.type="ParametricBufferGeometry",this.parameters={func:e,slices:t,stacks:n};const i=[],o=[],r=[],s=[],a=1e-5,c=new A,l=new A,u=new A,h=new A,p=new A;e.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");const d=t+1;for(let m=0;m<=n;m++){const y=m/n;for(let v=0;v<=t;v++){const g=v/t;e(g,y,l),o.push(l.x,l.y,l.z),g-a>=0?(e(g-a,y,u),h.subVectors(l,u)):(e(g+a,y,u),h.subVectors(u,l)),y-a>=0?(e(g,y-a,u),p.subVectors(l,u)):(e(g,y+a,u),p.subVectors(u,l)),c.crossVectors(h,p).normalize(),r.push(c.x,c.y,c.z),s.push(g,y)}}for(let m=0;m<n;m++)for(let y=0;y<t;y++){const v=m*d+y,g=m*d+y+1,f=(m+1)*d+y+1,w=(m+1)*d+y;i.push(v,g,w),i.push(g,f,w)}this.setIndex(i),this.setAttribute("position",new Pe(o,3)),this.setAttribute("normal",new Pe(r,3)),this.setAttribute("uv",new Pe(s,2))}Ur.prototype=Object.create(De.prototype);Ur.prototype.constructor=Ur;function ya(e,t,n){gt.call(this),this.type="ParametricGeometry",this.parameters={func:e,slices:t,stacks:n},this.fromBufferGeometry(new Ur(e,t,n)),this.mergeVertices()}ya.prototype=Object.create(gt.prototype);ya.prototype.constructor=ya;class vh extends gt{constructor(e,t,n,i){super();this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i},this.fromBufferGeometry(new wl(e,t,n,i)),this.mergeVertices()}}class Xx extends De{constructor(e,t){super();this.type="ShapeBufferGeometry",this.parameters={shapes:e,curveSegments:t},t=t||12;const n=[],i=[],o=[],r=[];let s=0,a=0;if(Array.isArray(e)===!1)c(e);else for(let l=0;l<e.length;l++)c(e[l]),this.addGroup(s,a,l),s+=a,a=0;this.setIndex(n),this.setAttribute("position",new Pe(i,3)),this.setAttribute("normal",new Pe(o,3)),this.setAttribute("uv",new Pe(r,2));function c(l){const u=i.length/3,h=l.extractPoints(t);let p=h.shape;const d=h.holes;Fn.isClockWise(p)===!1&&(p=p.reverse());for(let y=0,v=d.length;y<v;y++){const g=d[y];Fn.isClockWise(g)===!0&&(d[y]=g.reverse())}const m=Fn.triangulateShape(p,d);for(let y=0,v=d.length;y<v;y++){const g=d[y];p=p.concat(g)}for(let y=0,v=p.length;y<v;y++){const g=p[y];i.push(g.x,g.y,0),o.push(0,0,1),r.push(g.x,g.y)}for(let y=0,v=m.length;y<v;y++){const g=m[y],f=g[0]+u,w=g[1]+u,_=g[2]+u;n.push(f,w,_),a+=3}}}toJSON(){const e=De.prototype.toJSON.call(this),t=this.parameters.shapes;return qx(t,e)}}function qx(e,t){if(t.shapes=[],Array.isArray(e))for(let n=0,i=e.length;n<i;n++){const o=e[n];t.shapes.push(o.uuid)}else t.shapes.push(e.uuid);return t}class Zx extends gt{constructor(e,t){super();this.type="ShapeGeometry",typeof t=="object"&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),t=t.curveSegments),this.parameters={shapes:e,curveSegments:t},this.fromBufferGeometry(new Xx(e,t)),this.mergeVertices()}toJSON(){const e=gt.prototype.toJSON.call(this),t=this.parameters.shapes;return Yx(t,e)}}function Yx(e,t){if(t.shapes=[],Array.isArray(e))for(let n=0,i=e.length;n<i;n++){const o=e[n];t.shapes.push(o.uuid)}else t.shapes.push(e.uuid);return t}class Jx extends De{constructor(e,t,n,i,o,r,s){super();this.type="SphereBufferGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:i,phiLength:o,thetaStart:r,thetaLength:s},e=e||1,t=Math.max(3,Math.floor(t)||8),n=Math.max(2,Math.floor(n)||6),i=i!==void 0?i:0,o=o!==void 0?o:Math.PI*2,r=r!==void 0?r:0,s=s!==void 0?s:Math.PI;const a=Math.min(r+s,Math.PI);let c=0;const l=[],u=new A,h=new A,p=[],d=[],m=[],y=[];for(let v=0;v<=n;v++){const g=[],f=v/n;let w=0;v==0&&r==0?w=.5/t:v==n&&a==Math.PI&&(w=-.5/t);for(let _=0;_<=t;_++){const M=_/t;u.x=-e*Math.cos(i+M*o)*Math.sin(r+f*s),u.y=e*Math.cos(r+f*s),u.z=e*Math.sin(i+M*o)*Math.sin(r+f*s),d.push(u.x,u.y,u.z),h.copy(u).normalize(),m.push(h.x,h.y,h.z),y.push(M+w,1-f),g.push(c++)}l.push(g)}for(let v=0;v<n;v++)for(let g=0;g<t;g++){const f=l[v][g+1],w=l[v][g],_=l[v+1][g],M=l[v+1][g+1];(v!==0||r>0)&&p.push(f,w,M),(v!==n-1||a<Math.PI)&&p.push(w,_,M)}this.setIndex(p),this.setAttribute("position",new Pe(d,3)),this.setAttribute("normal",new Pe(m,3)),this.setAttribute("uv",new Pe(y,2))}}class xh extends gt{constructor(e,t,n,i,o,r,s){super();this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:i,phiLength:o,thetaStart:r,thetaLength:s},this.fromBufferGeometry(new Jx(e,t,n,i,o,r,s)),this.mergeVertices()}}function Hi(e){ve.call(this),this.type="ShadowMaterial",this.color=new ue(0),this.transparent=!0,this.setValues(e)}Hi.prototype=Object.create(ve.prototype);Hi.prototype.constructor=Hi;Hi.prototype.isShadowMaterial=!0;Hi.prototype.copy=function(e){return ve.prototype.copy.call(this,e),this.color.copy(e.color),this};function Fo(e){St.call(this,e),this.type="RawShaderMaterial"}Fo.prototype=Object.create(St.prototype);Fo.prototype.constructor=Fo;Fo.prototype.isRawShaderMaterial=!0;function fn(e){ve.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new ue(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ue(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=fi,this.normalScale=new X(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.vertexTangents=!1,this.setValues(e)}fn.prototype=Object.create(ve.prototype);fn.prototype.constructor=fn;fn.prototype.isMeshStandardMaterial=!0;fn.prototype.copy=function(e){return ve.prototype.copy.call(this,e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.vertexTangents=e.vertexTangents,this};function oi(e){fn.call(this),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoat=0,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new X(1,1),this.clearcoatNormalMap=null,this.reflectivity=.5,Object.defineProperty(this,"ior",{get:function(){return(1+.4*this.reflectivity)/(1-.4*this.reflectivity)},set:function(t){this.reflectivity=Ee.clamp(2.5*(t-1)/(t+1),0,1)}}),this.sheen=null,this.transmission=0,this.transmissionMap=null,this.setValues(e)}oi.prototype=Object.create(fn.prototype);oi.prototype.constructor=oi;oi.prototype.isMeshPhysicalMaterial=!0;oi.prototype.copy=function(e){return fn.prototype.copy.call(this,e),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.reflectivity=e.reflectivity,e.sheen?this.sheen=(this.sheen||new ue).copy(e.sheen):this.sheen=null,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this};function yt(e){ve.call(this),this.type="MeshPhongMaterial",this.color=new ue(16777215),this.specular=new ue(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ue(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=fi,this.normalScale=new X(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=er,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}yt.prototype=Object.create(ve.prototype);yt.prototype.constructor=yt;yt.prototype.isMeshPhongMaterial=!0;yt.prototype.copy=function(e){return ve.prototype.copy.call(this,e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this};function Wi(e){ve.call(this),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new ue(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ue(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=fi,this.normalScale=new X(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}Wi.prototype=Object.create(ve.prototype);Wi.prototype.constructor=Wi;Wi.prototype.isMeshToonMaterial=!0;Wi.prototype.copy=function(e){return ve.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.gradientMap=e.gradientMap,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this};function ji(e){ve.call(this),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=fi,this.normalScale=new X(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}ji.prototype=Object.create(ve.prototype);ji.prototype.constructor=ji;ji.prototype.isMeshNormalMaterial=!0;ji.prototype.copy=function(e){return ve.prototype.copy.call(this,e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this};function qi(e){ve.call(this),this.type="MeshLambertMaterial",this.color=new ue(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new ue(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=er,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}qi.prototype=Object.create(ve.prototype);qi.prototype.constructor=qi;qi.prototype.isMeshLambertMaterial=!0;qi.prototype.copy=function(e){return ve.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this};function Xi(e){ve.call(this),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new ue(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=fi,this.normalScale=new X(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}Xi.prototype=Object.create(ve.prototype);Xi.prototype.constructor=Xi;Xi.prototype.isMeshMatcapMaterial=!0;Xi.prototype.copy=function(e){return ve.prototype.copy.call(this,e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this};function Yi(e){Rt.call(this),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}Yi.prototype=Object.create(Rt.prototype);Yi.prototype.constructor=Yi;Yi.prototype.isLineDashedMaterial=!0;Yi.prototype.copy=function(e){return Rt.prototype.copy.call(this,e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this};var Qx=Object.freeze({__proto__:null,ShadowMaterial:Hi,SpriteMaterial:ni,RawShaderMaterial:Fo,ShaderMaterial:St,PointsMaterial:ii,MeshPhysicalMaterial:oi,MeshStandardMaterial:fn,MeshPhongMaterial:yt,MeshToonMaterial:Wi,MeshNormalMaterial:ji,MeshLambertMaterial:qi,MeshDepthMaterial:Kn,MeshDistanceMaterial:$n,MeshBasicMaterial:Jn,MeshMatcapMaterial:Xi,LineDashedMaterial:Yi,LineBasicMaterial:Rt,Material:ve});const Ze={arraySlice:function(e,t,n){return Ze.isTypedArray(e)?new e.constructor(e.subarray(t,n!==void 0?n:e.length)):e.slice(t,n)},convertArray:function(e,t,n){return!e||!n&&e.constructor===t?e:typeof t.BYTES_PER_ELEMENT=="number"?new t(e):Array.prototype.slice.call(e)},isTypedArray:function(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)},getKeyframeOrder:function(e){function t(o,r){return e[o]-e[r]}const n=e.length,i=new Array(n);for(let o=0;o!==n;++o)i[o]=o;return i.sort(t),i},sortedArray:function(e,t,n){const i=e.length,o=new e.constructor(i);for(let r=0,s=0;s!==i;++r){const a=n[r]*t;for(let c=0;c!==t;++c)o[s++]=e[a+c]}return o},flattenJSON:function(e,t,n,i){let o=1,r=e[0];for(;r!==void 0&&r[i]===void 0;)r=e[o++];if(r===void 0)return;let s=r[i];if(s===void 0)return;if(Array.isArray(s))do s=r[i],s!==void 0&&(t.push(r.time),n.push.apply(n,s)),r=e[o++];while(r!==void 0);else if(s.toArray!==void 0)do s=r[i],s!==void 0&&(t.push(r.time),s.toArray(n,n.length)),r=e[o++];while(r!==void 0);else do s=r[i],s!==void 0&&(t.push(r.time),n.push(s)),r=e[o++];while(r!==void 0)},subclip:function(e,t,n,i,o){o=o||30;const r=e.clone();r.name=t;const s=[];for(let c=0;c<r.tracks.length;++c){const l=r.tracks[c],u=l.getValueSize(),h=[],p=[];for(let d=0;d<l.times.length;++d){const m=l.times[d]*o;if(m<n||m>=i)continue;h.push(l.times[d]);for(let y=0;y<u;++y)p.push(l.values[d*u+y])}if(h.length===0)continue;l.times=Ze.convertArray(h,l.times.constructor),l.values=Ze.convertArray(p,l.values.constructor),s.push(l)}r.tracks=s;let a=Infinity;for(let c=0;c<r.tracks.length;++c)a>r.tracks[c].times[0]&&(a=r.tracks[c].times[0]);for(let c=0;c<r.tracks.length;++c)r.tracks[c].shift(-1*a);return r.resetDuration(),r},makeClipAdditive:function(e,t,n,i){t===void 0&&(t=0),n===void 0&&(n=e),(i===void 0||i<=0)&&(i=30);const o=n.tracks.length,r=t/i;for(let s=0;s<o;++s){const a=n.tracks[s],c=a.ValueTypeName;if(c==="bool"||c==="string")continue;const l=e.tracks.find(function(g){return g.name===a.name&&g.ValueTypeName===c});if(l===void 0)continue;let u=0;const h=a.getValueSize();a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(u=h/3);let p=0;const d=l.getValueSize();l.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(p=d/3);const m=a.times.length-1;let y;if(r<=a.times[0]){const g=u,f=h-u;y=Ze.arraySlice(a.values,g,f)}else if(r>=a.times[m]){const g=m*h+u,f=g+h-u;y=Ze.arraySlice(a.values,g,f)}else{const g=a.createInterpolant(),f=u,w=h-u;g.evaluate(r),y=Ze.arraySlice(g.resultBuffer,f,w)}if(c==="quaternion"){const g=new ht().fromArray(y).normalize().conjugate();g.toArray(y)}const v=l.times.length;for(let g=0;g<v;++g){const f=g*d+p;if(c==="quaternion")ht.multiplyQuaternionsFlat(l.values,f,y,0,l.values,f);else{const w=d-p*2;for(let _=0;_<w;++_)l.values[f+_]-=y[_]}}}return e.blendMode=$c,e}};function It(e,t,n,i){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=i!==void 0?i:new t.constructor(n),this.sampleValues=t,this.valueSize=n}Object.assign(It.prototype,{evaluate:function(e){const t=this.parameterPositions;let n=this._cachedIndex,i=t[n],o=t[n-1];e:{t:{let r;n:{i:if(!(e<i)){for(let s=n+2;;){if(i===void 0){if(e<o)break i;return n=t.length,this._cachedIndex=n,this.afterEnd_(n-1,e,o)}if(n===s)break;if(o=i,i=t[++n],e<i)break t}r=t.length;break n}if(!(e>=o)){const s=t[1];e<s&&(n=2,o=s);for(let a=n-2;;){if(o===void 0)return this._cachedIndex=0,this.beforeStart_(0,e,i);if(n===a)break;if(i=o,o=t[--n-1],e>=o)break t}r=n,n=0;break n}break e}for(;n<r;){const s=n+r>>>1;e<t[s]?r=s:n=s+1}if(i=t[n],o=t[n-1],o===void 0)return this._cachedIndex=0,this.beforeStart_(0,e,i);if(i===void 0)return n=t.length,this._cachedIndex=n,this.afterEnd_(n-1,o,e)}this._cachedIndex=n,this.intervalChanged_(n,o,i)}return this.interpolate_(n,o,e,i)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(e){const t=this.resultBuffer,n=this.sampleValues,i=this.valueSize,o=e*i;for(let r=0;r!==i;++r)t[r]=n[o+r];return t},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}});Object.assign(It.prototype,{beforeStart_:It.prototype.copySampleValue_,afterEnd_:It.prototype.copySampleValue_});function va(e,t,n,i){It.call(this,e,t,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}va.prototype=Object.assign(Object.create(It.prototype),{constructor:va,DefaultSettings_:{endingStart:ui,endingEnd:ui},intervalChanged_:function(e,t,n){const i=this.parameterPositions;let o=e-2,r=e+1,s=i[o],a=i[r];if(s===void 0)switch(this.getSettings_().endingStart){case di:o=e,s=2*t-n;break;case ar:o=i.length-2,s=t+i[o]-i[o+1];break;default:o=e,s=n}if(a===void 0)switch(this.getSettings_().endingEnd){case di:r=e,a=2*n-t;break;case ar:r=1,a=n+i[1]-i[0];break;default:r=e-1,a=t}const c=(n-t)*.5,l=this.valueSize;this._weightPrev=c/(t-s),this._weightNext=c/(a-n),this._offsetPrev=o*l,this._offsetNext=r*l},interpolate_:function(e,t,n,i){const o=this.resultBuffer,r=this.sampleValues,s=this.valueSize,a=e*s,c=a-s,l=this._offsetPrev,u=this._offsetNext,h=this._weightPrev,p=this._weightNext,d=(n-t)/(i-t),m=d*d,y=m*d,v=-h*y+2*h*m-h*d,g=(1+h)*y+(-1.5-2*h)*m+(-.5+h)*d+1,f=(-1-p)*y+(1.5+p)*m+.5*d,w=p*y-p*m;for(let _=0;_!==s;++_)o[_]=v*r[l+_]+g*r[c+_]+f*r[a+_]+w*r[u+_];return o}});function Hr(e,t,n,i){It.call(this,e,t,n,i)}Hr.prototype=Object.assign(Object.create(It.prototype),{constructor:Hr,interpolate_:function(e,t,n,i){const o=this.resultBuffer,r=this.sampleValues,s=this.valueSize,a=e*s,c=a-s,l=(n-t)/(i-t),u=1-l;for(let h=0;h!==s;++h)o[h]=r[c+h]*u+r[a+h]*l;return o}});function xa(e,t,n,i){It.call(this,e,t,n,i)}xa.prototype=Object.assign(Object.create(It.prototype),{constructor:xa,interpolate_:function(e){return this.copySampleValue_(e-1)}});function pt(e,t,n,i){if(e===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===void 0||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=Ze.convertArray(t,this.TimeBufferType),this.values=Ze.convertArray(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}Object.assign(pt,{toJSON:function(e){const t=e.constructor;let n;if(t.toJSON!==void 0)n=t.toJSON(e);else{n={name:e.name,times:Ze.convertArray(e.times,Array),values:Ze.convertArray(e.values,Array)};const i=e.getInterpolation();i!==e.DefaultInterpolation&&(n.interpolation=i)}return n.type=e.ValueTypeName,n}});Object.assign(pt.prototype,{constructor:pt,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:sr,InterpolantFactoryMethodDiscrete:function(e){return new xa(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodLinear:function(e){return new Hr(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:function(e){return new va(this.times,this.values,this.getValueSize(),e)},setInterpolation:function(e){let t;switch(e){case rr:t=this.InterpolantFactoryMethodDiscrete;break;case sr:t=this.InterpolantFactoryMethodLinear;break;case As:t=this.InterpolantFactoryMethodSmooth;break}if(t===void 0){const n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(n);return console.warn("THREE.KeyframeTrack:",n),this}return this.createInterpolant=t,this},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return rr;case this.InterpolantFactoryMethodLinear:return sr;case this.InterpolantFactoryMethodSmooth:return As}},getValueSize:function(){return this.values.length/this.times.length},shift:function(e){if(e!==0){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]+=e}return this},scale:function(e){if(e!==1){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]*=e}return this},trim:function(e,t){const n=this.times,i=n.length;let o=0,r=i-1;for(;o!==i&&n[o]<e;)++o;for(;r!==-1&&n[r]>t;)--r;if(++r,o!==0||r!==i){o>=r&&(r=Math.max(r,1),o=r-1);const s=this.getValueSize();this.times=Ze.arraySlice(n,o,r),this.values=Ze.arraySlice(this.values,o*s,r*s)}return this},validate:function(){let e=!0;const t=this.getValueSize();t-Math.floor(t)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const n=this.times,i=this.values,o=n.length;o===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let r=null;for(let s=0;s!==o;s++){const a=n[s];if(typeof a=="number"&&isNaN(a)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,s,a),e=!1;break}if(r!==null&&r>a){console.error("THREE.KeyframeTrack: Out of order keys.",this,s,a,r),e=!1;break}r=a}if(i!==void 0&&Ze.isTypedArray(i))for(let s=0,a=i.length;s!==a;++s){const c=i[s];if(isNaN(c)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,s,c),e=!1;break}}return e},optimize:function(){const e=Ze.arraySlice(this.times),t=Ze.arraySlice(this.values),n=this.getValueSize(),i=this.getInterpolation()===As,o=e.length-1;let r=1;for(let s=1;s<o;++s){let a=!1;const c=e[s],l=e[s+1];if(c!==l&&(s!==1||c!==c[0]))if(i)a=!0;else{const u=s*n,h=u-n,p=u+n;for(let d=0;d!==n;++d){const m=t[u+d];if(m!==t[h+d]||m!==t[p+d]){a=!0;break}}}if(a){if(s!==r){e[r]=e[s];const u=s*n,h=r*n;for(let p=0;p!==n;++p)t[h+p]=t[u+p]}++r}}if(o>0){e[r]=e[o];for(let s=o*n,a=r*n,c=0;c!==n;++c)t[a+c]=t[s+c];++r}return r!==e.length?(this.times=Ze.arraySlice(e,0,r),this.values=Ze.arraySlice(t,0,r*n)):(this.times=e,this.values=t),this},clone:function(){const e=Ze.arraySlice(this.times,0),t=Ze.arraySlice(this.values,0),n=this.constructor,i=new n(this.name,e,t);return i.createInterpolant=this.createInterpolant,i}});function ba(e,t,n){pt.call(this,e,t,n)}ba.prototype=Object.assign(Object.create(pt.prototype),{constructor:ba,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:rr,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0});function wa(e,t,n,i){pt.call(this,e,t,n,i)}wa.prototype=Object.assign(Object.create(pt.prototype),{constructor:wa,ValueTypeName:"color"});function Do(e,t,n,i){pt.call(this,e,t,n,i)}Do.prototype=Object.assign(Object.create(pt.prototype),{constructor:Do,ValueTypeName:"number"});function _a(e,t,n,i){It.call(this,e,t,n,i)}_a.prototype=Object.assign(Object.create(It.prototype),{constructor:_a,interpolate_:function(e,t,n,i){const o=this.resultBuffer,r=this.sampleValues,s=this.valueSize,a=(n-t)/(i-t);let c=e*s;for(let l=c+s;c!==l;c+=4)ht.slerpFlat(o,0,r,c-s,r,c,a);return o}});function Wr(e,t,n,i){pt.call(this,e,t,n,i)}Wr.prototype=Object.assign(Object.create(pt.prototype),{constructor:Wr,ValueTypeName:"quaternion",DefaultInterpolation:sr,InterpolantFactoryMethodLinear:function(e){return new _a(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:void 0});function Ma(e,t,n,i){pt.call(this,e,t,n,i)}Ma.prototype=Object.assign(Object.create(pt.prototype),{constructor:Ma,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:rr,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0});function Oo(e,t,n,i){pt.call(this,e,t,n,i)}Oo.prototype=Object.assign(Object.create(pt.prototype),{constructor:Oo,ValueTypeName:"vector"});function Yt(e,t,n,i){this.name=e,this.tracks=n,this.duration=t!==void 0?t:-1,this.blendMode=i!==void 0?i:Cs,this.uuid=Ee.generateUUID(),this.duration<0&&this.resetDuration()}function Kx(e){switch(e.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Do;case"vector":case"vector2":case"vector3":case"vector4":return Oo;case"color":return wa;case"quaternion":return Wr;case"bool":case"boolean":return ba;case"string":return Ma}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+e)}function $x(e){if(e.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const t=Kx(e.type);if(e.times===void 0){const n=[],i=[];Ze.flattenJSON(e.keys,n,i,"value"),e.times=n,e.values=i}return t.parse!==void 0?t.parse(e):new t(e.name,e.times,e.values,e.interpolation)}Object.assign(Yt,{parse:function(e){const t=[],n=e.tracks,i=1/(e.fps||1);for(let o=0,r=n.length;o!==r;++o)t.push($x(n[o]).scale(i));return new Yt(e.name,e.duration,t,e.blendMode)},toJSON:function(e){const t=[],n=e.tracks,i={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid,blendMode:e.blendMode};for(let o=0,r=n.length;o!==r;++o)t.push(pt.toJSON(n[o]));return i},CreateFromMorphTargetSequence:function(e,t,n,i){const o=t.length,r=[];for(let s=0;s<o;s++){let a=[],c=[];a.push((s+o-1)%o,s,(s+1)%o),c.push(0,1,0);const l=Ze.getKeyframeOrder(a);a=Ze.sortedArray(a,1,l),c=Ze.sortedArray(c,1,l),!i&&a[0]===0&&(a.push(o),c.push(c[0])),r.push(new Do(".morphTargetInfluences["+t[s].name+"]",a,c).scale(1/n))}return new Yt(e,-1,r)},findByName:function(e,t){let n=e;if(!Array.isArray(e)){const i=e;n=i.geometry&&i.geometry.animations||i.animations}for(let i=0;i<n.length;i++)if(n[i].name===t)return n[i];return null},CreateClipsFromMorphTargetSequences:function(e,t,n){const i={},o=/^([\w-]*?)([\d]+)$/;for(let s=0,a=e.length;s<a;s++){const c=e[s],l=c.name.match(o);if(l&&l.length>1){const u=l[1];let h=i[u];h||(i[u]=h=[]),h.push(c)}}const r=[];for(const s in i)r.push(Yt.CreateFromMorphTargetSequence(s,i[s],t,n));return r},parseAnimation:function(e,t){if(!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const n=function(u,h,p,d,m){if(p.length!==0){const y=[],v=[];Ze.flattenJSON(p,y,v,d),y.length!==0&&m.push(new u(h,y,v))}},i=[],o=e.name||"default",r=e.fps||30,s=e.blendMode;let a=e.length||-1;const c=e.hierarchy||[];for(let u=0;u<c.length;u++){const h=c[u].keys;if(!h||h.length===0)continue;if(h[0].morphTargets){const p={};let d;for(d=0;d<h.length;d++)if(h[d].morphTargets)for(let m=0;m<h[d].morphTargets.length;m++)p[h[d].morphTargets[m]]=-1;for(const m in p){const y=[],v=[];for(let g=0;g!==h[d].morphTargets.length;++g){const f=h[d];y.push(f.time),v.push(f.morphTarget===m?1:0)}i.push(new Do(".morphTargetInfluence["+m+"]",y,v))}a=p.length*(r||1)}else{const p=".bones["+t[u].name+"]";n(Oo,p+".position",h,"pos",i),n(Wr,p+".quaternion",h,"rot",i),n(Oo,p+".scale",h,"scl",i)}}if(i.length===0)return null;const l=new Yt(o,a,i,s);return l}});Object.assign(Yt.prototype,{resetDuration:function(){const e=this.tracks;let t=0;for(let n=0,i=e.length;n!==i;++n){const o=this.tracks[n];t=Math.max(t,o.times[o.times.length-1])}return this.duration=t,this},trim:function(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this},validate:function(){let e=!0;for(let t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e},optimize:function(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this},clone:function(){const e=[];for(let t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new Yt(this.name,this.duration,e,this.blendMode)}});const Zi={enabled:!1,files:{},add:function(e,t){if(this.enabled===!1)return;this.files[e]=t},get:function(e){return this.enabled===!1?void 0:this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}};function eb(e,t,n){const i=this;let o=!1,r=0,s=0,a;const c=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(l){s++,o===!1&&(i.onStart!==void 0&&i.onStart(l,r,s)),o=!0},this.itemEnd=function(l){r++,i.onProgress!==void 0&&i.onProgress(l,r,s),r===s&&(o=!1,i.onLoad!==void 0&&i.onLoad())},this.itemError=function(l){i.onError!==void 0&&i.onError(l)},this.resolveURL=function(l){return a?a(l):l},this.setURLModifier=function(l){return a=l,this},this.addHandler=function(l,u){return c.push(l,u),this},this.removeHandler=function(l){const u=c.indexOf(l);return u!==-1&&c.splice(u,2),this},this.getHandler=function(l){for(let u=0,h=c.length;u<h;u+=2){const p=c[u],d=c[u+1];if(p.global&&(p.lastIndex=0),p.test(l))return d}return null}}const tb=new eb;function Ue(e){this.manager=e!==void 0?e:tb,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}Object.assign(Ue.prototype,{load:function(){},loadAsync:function(e,t){const n=this;return new Promise(function(i,o){n.load(e,i,t,o)})},parse:function(){},setCrossOrigin:function(e){return this.crossOrigin=e,this},setWithCredentials:function(e){return this.withCredentials=e,this},setPath:function(e){return this.path=e,this},setResourcePath:function(e){return this.resourcePath=e,this},setRequestHeader:function(e){return this.requestHeader=e,this}});const Vt={};function mn(e){Ue.call(this,e)}mn.prototype=Object.assign(Object.create(Ue.prototype),{constructor:mn,load:function(e,t,n,i){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const o=this,r=Zi.get(e);if(r!==void 0)return o.manager.itemStart(e),setTimeout(function(){t&&t(r),o.manager.itemEnd(e)},0),r;if(Vt[e]!==void 0){Vt[e].push({onLoad:t,onProgress:n,onError:i});return}const s=/^data:(.*?)(;base64)?,(.*)$/,a=e.match(s);let c;if(a){const l=a[1],u=!!a[2];let h=a[3];h=decodeURIComponent(h),u&&(h=atob(h));try{let p;const d=(this.responseType||"").toLowerCase();switch(d){case"arraybuffer":case"blob":const m=new Uint8Array(h.length);for(let v=0;v<h.length;v++)m[v]=h.charCodeAt(v);d==="blob"?p=new Blob([m.buffer],{type:l}):p=m.buffer;break;case"document":const y=new DOMParser;p=y.parseFromString(h,l);break;case"json":p=JSON.parse(h);break;default:p=h;break}setTimeout(function(){t&&t(p),o.manager.itemEnd(e)},0)}catch(p){setTimeout(function(){i&&i(p),o.manager.itemError(e),o.manager.itemEnd(e)},0)}}else{Vt[e]=[],Vt[e].push({onLoad:t,onProgress:n,onError:i}),c=new XMLHttpRequest,c.open("GET",e,!0),c.addEventListener("load",function(l){const u=this.response,h=Vt[e];if(delete Vt[e],this.status===200||this.status===0){this.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),Zi.add(e,u);for(let p=0,d=h.length;p<d;p++){const m=h[p];m.onLoad&&m.onLoad(u)}o.manager.itemEnd(e)}else{for(let p=0,d=h.length;p<d;p++){const m=h[p];m.onError&&m.onError(l)}o.manager.itemError(e),o.manager.itemEnd(e)}},!1),c.addEventListener("progress",function(l){const u=Vt[e];for(let h=0,p=u.length;h<p;h++){const d=u[h];d.onProgress&&d.onProgress(l)}},!1),c.addEventListener("error",function(l){const u=Vt[e];delete Vt[e];for(let h=0,p=u.length;h<p;h++){const d=u[h];d.onError&&d.onError(l)}o.manager.itemError(e),o.manager.itemEnd(e)},!1),c.addEventListener("abort",function(l){const u=Vt[e];delete Vt[e];for(let h=0,p=u.length;h<p;h++){const d=u[h];d.onError&&d.onError(l)}o.manager.itemError(e),o.manager.itemEnd(e)},!1),this.responseType!==void 0&&(c.responseType=this.responseType),this.withCredentials!==void 0&&(c.withCredentials=this.withCredentials),c.overrideMimeType&&c.overrideMimeType(this.mimeType!==void 0?this.mimeType:"text/plain");for(const l in this.requestHeader)c.setRequestHeader(l,this.requestHeader[l]);c.send(null)}return o.manager.itemStart(e),c},setResponseType:function(e){return this.responseType=e,this},setMimeType:function(e){return this.mimeType=e,this}});function bh(e){Ue.call(this,e)}bh.prototype=Object.assign(Object.create(Ue.prototype),{constructor:bh,load:function(e,t,n,i){const o=this,r=new mn(o.manager);r.setPath(o.path),r.setRequestHeader(o.requestHeader),r.setWithCredentials(o.withCredentials),r.load(e,function(s){try{t(o.parse(JSON.parse(s)))}catch(a){i?i(a):console.error(a),o.manager.itemError(e)}},n,i)},parse:function(e){const t=[];for(let n=0;n<e.length;n++){const i=Yt.parse(e[n]);t.push(i)}return t}});function wh(e){Ue.call(this,e)}wh.prototype=Object.assign(Object.create(Ue.prototype),{constructor:wh,load:function(e,t,n,i){const o=this,r=[],s=new Bo;s.image=r;const a=new mn(this.manager);a.setPath(this.path),a.setResponseType("arraybuffer"),a.setRequestHeader(this.requestHeader),a.setWithCredentials(o.withCredentials);let c=0;function l(u){a.load(e[u],function(h){const p=o.parse(h,!0);r[u]={width:p.width,height:p.height,format:p.format,mipmaps:p.mipmaps},c+=1,c===6&&(p.mipmapCount===1&&(s.minFilter=ut),s.format=p.format,s.needsUpdate=!0,t&&t(s))},n,i)}if(Array.isArray(e))for(let u=0,h=e.length;u<h;++u)l(u);else a.load(e,function(u){const h=o.parse(u,!0);if(h.isCubemap){const p=h.mipmaps.length/h.mipmapCount;for(let d=0;d<p;d++){r[d]={mipmaps:[]};for(let m=0;m<h.mipmapCount;m++)r[d].mipmaps.push(h.mipmaps[d*h.mipmapCount+m]),r[d].format=h.format,r[d].width=h.width,r[d].height=h.height}}else s.image.width=h.width,s.image.height=h.height,s.mipmaps=h.mipmaps;h.mipmapCount===1&&(s.minFilter=ut),s.format=h.format,s.needsUpdate=!0,t&&t(s)},n,i);return s}});function jr(e){Ue.call(this,e)}jr.prototype=Object.assign(Object.create(Ue.prototype),{constructor:jr,load:function(e,t,n,i){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const o=this,r=Zi.get(e);if(r!==void 0)return o.manager.itemStart(e),setTimeout(function(){t&&t(r),o.manager.itemEnd(e)},0),r;const s=document.createElementNS("http://www.w3.org/1999/xhtml","img");function a(){s.removeEventListener("load",a,!1),s.removeEventListener("error",c,!1),Zi.add(e,this),t&&t(this),o.manager.itemEnd(e)}function c(l){s.removeEventListener("load",a,!1),s.removeEventListener("error",c,!1),i&&i(l),o.manager.itemError(e),o.manager.itemEnd(e)}return s.addEventListener("load",a,!1),s.addEventListener("error",c,!1),e.substr(0,5)!=="data:"&&(this.crossOrigin!==void 0&&(s.crossOrigin=this.crossOrigin)),o.manager.itemStart(e),s.src=e,s}});function Sa(e){Ue.call(this,e)}Sa.prototype=Object.assign(Object.create(Ue.prototype),{constructor:Sa,load:function(e,t,n,i){const o=new In,r=new jr(this.manager);r.setCrossOrigin(this.crossOrigin),r.setPath(this.path);let s=0;function a(c){r.load(e[c],function(l){o.images[c]=l,s++,s===6&&(o.needsUpdate=!0,t&&t(o))},void 0,i)}for(let c=0;c<e.length;++c)a(c);return o}});function _h(e){Ue.call(this,e)}_h.prototype=Object.assign(Object.create(Ue.prototype),{constructor:_h,load:function(e,t,n,i){const o=this,r=new Bi,s=new mn(this.manager);return s.setResponseType("arraybuffer"),s.setRequestHeader(this.requestHeader),s.setPath(this.path),s.setWithCredentials(o.withCredentials),s.load(e,function(a){const c=o.parse(a);if(!c)return;c.image!==void 0?r.image=c.image:c.data!==void 0&&(r.image.width=c.width,r.image.height=c.height,r.image.data=c.data),r.wrapS=c.wrapS!==void 0?c.wrapS:Et,r.wrapT=c.wrapT!==void 0?c.wrapT:Et,r.magFilter=c.magFilter!==void 0?c.magFilter:ut,r.minFilter=c.minFilter!==void 0?c.minFilter:ut,r.anisotropy=c.anisotropy!==void 0?c.anisotropy:1,c.format!==void 0&&(r.format=c.format),c.type!==void 0&&(r.type=c.type),c.mipmaps!==void 0&&(r.mipmaps=c.mipmaps,r.minFilter=tr),c.mipmapCount===1&&(r.minFilter=ut),r.needsUpdate=!0,t&&t(r,c)},n,i),r}});function Ea(e){Ue.call(this,e)}Ea.prototype=Object.assign(Object.create(Ue.prototype),{constructor:Ea,load:function(e,t,n,i){const o=new qe,r=new jr(this.manager);return r.setCrossOrigin(this.crossOrigin),r.setPath(this.path),r.load(e,function(s){o.image=s;const a=e.search(/\.jpe?g($|\?)/i)>0||e.search(/^data\:image\/jpeg/)===0;o.format=a?qn:Ft,o.needsUpdate=!0,t!==void 0&&t(o)},n,i),o}});function de(){this.type="Curve",this.arcLengthDivisions=200}Object.assign(de.prototype,{getPoint:function(){return console.warn("THREE.Curve: .getPoint() not implemented."),null},getPointAt:function(e,t){const n=this.getUtoTmapping(e);return this.getPoint(n,t)},getPoints:function(e){e===void 0&&(e=5);const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return t},getSpacedPoints:function(e){e===void 0&&(e=5);const t=[];for(let n=0;n<=e;n++)t.push(this.getPointAt(n/e));return t},getLength:function(){const e=this.getLengths();return e[e.length-1]},getLengths:function(e){if(e===void 0&&(e=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const t=[];let n,i=this.getPoint(0),o=0;t.push(0);for(let r=1;r<=e;r++)n=this.getPoint(r/e),o+=n.distanceTo(i),t.push(o),i=n;return this.cacheArcLengths=t,t},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(e,t){const n=this.getLengths();let i=0;const o=n.length;let r;t?r=t:r=e*n[o-1];let s=0,a=o-1,c;for(;s<=a;)if(i=Math.floor(s+(a-s)/2),c=n[i]-r,c<0)s=i+1;else if(c>0)a=i-1;else{a=i;break}if(i=a,n[i]===r)return i/(o-1);const l=n[i],u=n[i+1],h=u-l,p=(r-l)/h,d=(i+p)/(o-1);return d},getTangent:function(e,t){const n=1e-4;let i=e-n,o=e+n;i<0&&(i=0),o>1&&(o=1);const r=this.getPoint(i),s=this.getPoint(o),a=t||(r.isVector2?new X:new A);return a.copy(s).sub(r).normalize(),a},getTangentAt:function(e,t){const n=this.getUtoTmapping(e);return this.getTangent(n,t)},computeFrenetFrames:function(e,t){const n=new A,i=[],o=[],r=[],s=new A,a=new Re;for(let p=0;p<=e;p++){const d=p/e;i[p]=this.getTangentAt(d,new A),i[p].normalize()}o[0]=new A,r[0]=new A;let c=Number.MAX_VALUE;const l=Math.abs(i[0].x),u=Math.abs(i[0].y),h=Math.abs(i[0].z);l<=c&&(c=l,n.set(1,0,0)),u<=c&&(c=u,n.set(0,1,0)),h<=c&&n.set(0,0,1),s.crossVectors(i[0],n).normalize(),o[0].crossVectors(i[0],s),r[0].crossVectors(i[0],o[0]);for(let p=1;p<=e;p++){if(o[p]=o[p-1].clone(),r[p]=r[p-1].clone(),s.crossVectors(i[p-1],i[p]),s.length()>Number.EPSILON){s.normalize();const d=Math.acos(Ee.clamp(i[p-1].dot(i[p]),-1,1));o[p].applyMatrix4(a.makeRotationAxis(s,d))}r[p].crossVectors(i[p],o[p])}if(t===!0){let p=Math.acos(Ee.clamp(o[0].dot(o[e]),-1,1));p/=e,i[0].dot(s.crossVectors(o[0],o[e]))>0&&(p=-p);for(let d=1;d<=e;d++)o[d].applyMatrix4(a.makeRotationAxis(i[d],p*d)),r[d].crossVectors(i[d],o[d])}return{tangents:i,normals:o,binormals:r}},clone:function(){return new this.constructor().copy(this)},copy:function(e){return this.arcLengthDivisions=e.arcLengthDivisions,this},toJSON:function(){const e={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e},fromJSON:function(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}});function Nt(e,t,n,i,o,r,s,a){de.call(this),this.type="EllipseCurve",this.aX=e||0,this.aY=t||0,this.xRadius=n||1,this.yRadius=i||1,this.aStartAngle=o||0,this.aEndAngle=r||2*Math.PI,this.aClockwise=s||!1,this.aRotation=a||0}Nt.prototype=Object.create(de.prototype);Nt.prototype.constructor=Nt;Nt.prototype.isEllipseCurve=!0;Nt.prototype.getPoint=function(e,t){const n=t||new X,i=Math.PI*2;let o=this.aEndAngle-this.aStartAngle;const r=Math.abs(o)<Number.EPSILON;for(;o<0;)o+=i;for(;o>i;)o-=i;o<Number.EPSILON&&(r?o=0:o=i),this.aClockwise===!0&&!r&&(o===i?o=-i:o=o-i);const s=this.aStartAngle+e*o;let a=this.aX+this.xRadius*Math.cos(s),c=this.aY+this.yRadius*Math.sin(s);if(this.aRotation!==0){const l=Math.cos(this.aRotation),u=Math.sin(this.aRotation),h=a-this.aX,p=c-this.aY;a=h*l-p*u+this.aX,c=h*u+p*l+this.aY}return n.set(a,c)};Nt.prototype.copy=function(e){return de.prototype.copy.call(this,e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this};Nt.prototype.toJSON=function(){const e=de.prototype.toJSON.call(this);return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e};Nt.prototype.fromJSON=function(e){return de.prototype.fromJSON.call(this,e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this};function ko(e,t,n,i,o,r){Nt.call(this,e,t,n,n,i,o,r),this.type="ArcCurve"}ko.prototype=Object.create(Nt.prototype);ko.prototype.constructor=ko;ko.prototype.isArcCurve=!0;function Ta(){let e=0,t=0,n=0,i=0;function o(r,s,a,c){e=r,t=a,n=-3*r+3*s-2*a-c,i=2*r-2*s+a+c}return{initCatmullRom:function(r,s,a,c,l){o(s,a,l*(a-r),l*(c-s))},initNonuniformCatmullRom:function(r,s,a,c,l,u,h){let p=(s-r)/l-(a-r)/(l+u)+(a-s)/u,d=(a-s)/u-(c-s)/(u+h)+(c-a)/h;p*=u,d*=u,o(s,a,p,d)},calc:function(r){const s=r*r,a=s*r;return e+t*r+n*s+i*a}}}const qr=new A,Aa=new Ta,Ca=new Ta,Ra=new Ta;function vt(e,t,n,i){de.call(this),this.type="CatmullRomCurve3",this.points=e||[],this.closed=t||!1,this.curveType=n||"centripetal",this.tension=i!==void 0?i:.5}vt.prototype=Object.create(de.prototype);vt.prototype.constructor=vt;vt.prototype.isCatmullRomCurve3=!0;vt.prototype.getPoint=function(e,t){const n=t||new A,i=this.points,o=i.length,r=(o-(this.closed?0:1))*e;let s=Math.floor(r),a=r-s;this.closed?s+=s>0?0:(Math.floor(Math.abs(s)/o)+1)*o:a===0&&s===o-1&&(s=o-2,a=1);let c,l;this.closed||s>0?c=i[(s-1)%o]:(qr.subVectors(i[0],i[1]).add(i[0]),c=qr);const u=i[s%o],h=i[(s+1)%o];if(this.closed||s+2<o?l=i[(s+2)%o]:(qr.subVectors(i[o-1],i[o-2]).add(i[o-1]),l=qr),this.curveType==="centripetal"||this.curveType==="chordal"){const p=this.curveType==="chordal"?.5:.25;let d=Math.pow(c.distanceToSquared(u),p),m=Math.pow(u.distanceToSquared(h),p),y=Math.pow(h.distanceToSquared(l),p);m<1e-4&&(m=1),d<1e-4&&(d=m),y<1e-4&&(y=m),Aa.initNonuniformCatmullRom(c.x,u.x,h.x,l.x,d,m,y),Ca.initNonuniformCatmullRom(c.y,u.y,h.y,l.y,d,m,y),Ra.initNonuniformCatmullRom(c.z,u.z,h.z,l.z,d,m,y)}else this.curveType==="catmullrom"&&(Aa.initCatmullRom(c.x,u.x,h.x,l.x,this.tension),Ca.initCatmullRom(c.y,u.y,h.y,l.y,this.tension),Ra.initCatmullRom(c.z,u.z,h.z,l.z,this.tension));return n.set(Aa.calc(a),Ca.calc(a),Ra.calc(a)),n};vt.prototype.copy=function(e){de.prototype.copy.call(this,e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(i.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this};vt.prototype.toJSON=function(){const e=de.prototype.toJSON.call(this);e.points=[];for(let t=0,n=this.points.length;t<n;t++){const i=this.points[t];e.points.push(i.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e};vt.prototype.fromJSON=function(e){de.prototype.fromJSON.call(this,e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(new A().fromArray(i))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this};function Mh(e,t,n,i,o){const r=(i-t)*.5,s=(o-n)*.5,a=e*e,c=e*a;return(2*n-2*i+r+s)*c+(-3*n+3*i-2*r-s)*a+r*e+n}function nb(e,t){const n=1-e;return n*n*t}function ib(e,t){return 2*(1-e)*e*t}function ob(e,t){return e*e*t}function Go(e,t,n,i){return nb(e,t)+ib(e,n)+ob(e,i)}function rb(e,t){const n=1-e;return n*n*n*t}function sb(e,t){const n=1-e;return 3*n*n*e*t}function ab(e,t){return 3*(1-e)*e*e*t}function cb(e,t){return e*e*e*t}function Vo(e,t,n,i,o){return rb(e,t)+sb(e,n)+ab(e,i)+cb(e,o)}function Zt(e,t,n,i){de.call(this),this.type="CubicBezierCurve",this.v0=e||new X,this.v1=t||new X,this.v2=n||new X,this.v3=i||new X}Zt.prototype=Object.create(de.prototype);Zt.prototype.constructor=Zt;Zt.prototype.isCubicBezierCurve=!0;Zt.prototype.getPoint=function(e,t){const n=t||new X,i=this.v0,o=this.v1,r=this.v2,s=this.v3;return n.set(Vo(e,i.x,o.x,r.x,s.x),Vo(e,i.y,o.y,r.y,s.y)),n};Zt.prototype.copy=function(e){return de.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this};Zt.prototype.toJSON=function(){const e=de.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e};Zt.prototype.fromJSON=function(e){return de.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this};function gn(e,t,n,i){de.call(this),this.type="CubicBezierCurve3",this.v0=e||new A,this.v1=t||new A,this.v2=n||new A,this.v3=i||new A}gn.prototype=Object.create(de.prototype);gn.prototype.constructor=gn;gn.prototype.isCubicBezierCurve3=!0;gn.prototype.getPoint=function(e,t){const n=t||new A,i=this.v0,o=this.v1,r=this.v2,s=this.v3;return n.set(Vo(e,i.x,o.x,r.x,s.x),Vo(e,i.y,o.y,r.y,s.y),Vo(e,i.z,o.z,r.z,s.z)),n};gn.prototype.copy=function(e){return de.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this};gn.prototype.toJSON=function(){const e=de.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e};gn.prototype.fromJSON=function(e){return de.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this};function Pt(e,t){de.call(this),this.type="LineCurve",this.v1=e||new X,this.v2=t||new X}Pt.prototype=Object.create(de.prototype);Pt.prototype.constructor=Pt;Pt.prototype.isLineCurve=!0;Pt.prototype.getPoint=function(e,t){const n=t||new X;return e===1?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n};Pt.prototype.getPointAt=function(e,t){return this.getPoint(e,t)};Pt.prototype.getTangent=function(e,t){const n=t||new X;return n.copy(this.v2).sub(this.v1).normalize(),n};Pt.prototype.copy=function(e){return de.prototype.copy.call(this,e),this.v1.copy(e.v1),this.v2.copy(e.v2),this};Pt.prototype.toJSON=function(){const e=de.prototype.toJSON.call(this);return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e};Pt.prototype.fromJSON=function(e){return de.prototype.fromJSON.call(this,e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this};function Jt(e,t){de.call(this),this.type="LineCurve3",this.v1=e||new A,this.v2=t||new A}Jt.prototype=Object.create(de.prototype);Jt.prototype.constructor=Jt;Jt.prototype.isLineCurve3=!0;Jt.prototype.getPoint=function(e,t){const n=t||new A;return e===1?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n};Jt.prototype.getPointAt=function(e,t){return this.getPoint(e,t)};Jt.prototype.copy=function(e){return de.prototype.copy.call(this,e),this.v1.copy(e.v1),this.v2.copy(e.v2),this};Jt.prototype.toJSON=function(){const e=de.prototype.toJSON.call(this);return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e};Jt.prototype.fromJSON=function(e){return de.prototype.fromJSON.call(this,e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this};function Qt(e,t,n){de.call(this),this.type="QuadraticBezierCurve",this.v0=e||new X,this.v1=t||new X,this.v2=n||new X}Qt.prototype=Object.create(de.prototype);Qt.prototype.constructor=Qt;Qt.prototype.isQuadraticBezierCurve=!0;Qt.prototype.getPoint=function(e,t){const n=t||new X,i=this.v0,o=this.v1,r=this.v2;return n.set(Go(e,i.x,o.x,r.x),Go(e,i.y,o.y,r.y)),n};Qt.prototype.copy=function(e){return de.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this};Qt.prototype.toJSON=function(){const e=de.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e};Qt.prototype.fromJSON=function(e){return de.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this};function yn(e,t,n){de.call(this),this.type="QuadraticBezierCurve3",this.v0=e||new A,this.v1=t||new A,this.v2=n||new A}yn.prototype=Object.create(de.prototype);yn.prototype.constructor=yn;yn.prototype.isQuadraticBezierCurve3=!0;yn.prototype.getPoint=function(e,t){const n=t||new A,i=this.v0,o=this.v1,r=this.v2;return n.set(Go(e,i.x,o.x,r.x),Go(e,i.y,o.y,r.y),Go(e,i.z,o.z,r.z)),n};yn.prototype.copy=function(e){return de.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this};yn.prototype.toJSON=function(){const e=de.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e};yn.prototype.fromJSON=function(e){return de.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this};function Kt(e){de.call(this),this.type="SplineCurve",this.points=e||[]}Kt.prototype=Object.create(de.prototype);Kt.prototype.constructor=Kt;Kt.prototype.isSplineCurve=!0;Kt.prototype.getPoint=function(e,t){const n=t||new X,i=this.points,o=(i.length-1)*e,r=Math.floor(o),s=o-r,a=i[r===0?r:r-1],c=i[r],l=i[r>i.length-2?i.length-1:r+1],u=i[r>i.length-3?i.length-1:r+2];return n.set(Mh(s,a.x,c.x,l.x,u.x),Mh(s,a.y,c.y,l.y,u.y)),n};Kt.prototype.copy=function(e){de.prototype.copy.call(this,e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(i.clone())}return this};Kt.prototype.toJSON=function(){const e=de.prototype.toJSON.call(this);e.points=[];for(let t=0,n=this.points.length;t<n;t++){const i=this.points[t];e.points.push(i.toArray())}return e};Kt.prototype.fromJSON=function(e){de.prototype.fromJSON.call(this,e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(new X().fromArray(i))}return this};var lb=Object.freeze({__proto__:null,ArcCurve:ko,CatmullRomCurve3:vt,CubicBezierCurve:Zt,CubicBezierCurve3:gn,EllipseCurve:Nt,LineCurve:Pt,LineCurve3:Jt,QuadraticBezierCurve:Qt,QuadraticBezierCurve3:yn,SplineCurve:Kt});function Dn(){de.call(this),this.type="CurvePath",this.curves=[],this.autoClose=!1}Dn.prototype=Object.assign(Object.create(de.prototype),{constructor:Dn,add:function(e){this.curves.push(e)},closePath:function(){const e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new Pt(t,e))},getPoint:function(e){const t=e*this.getLength(),n=this.getCurveLengths();let i=0;for(;i<n.length;){if(n[i]>=t){const o=n[i]-t,r=this.curves[i],s=r.getLength(),a=s===0?0:1-o/s;return r.getPointAt(a)}i++}return null},getLength:function(){const e=this.getCurveLengths();return e[e.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const e=[];let t=0;for(let n=0,i=this.curves.length;n<i;n++)t+=this.curves[n].getLength(),e.push(t);return this.cacheLengths=e,e},getSpacedPoints:function(e){e===void 0&&(e=40);const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return this.autoClose&&t.push(t[0]),t},getPoints:function(e){e=e||12;const t=[];let n;for(let i=0,o=this.curves;i<o.length;i++){const r=o[i],s=r&&r.isEllipseCurve?e*2:r&&(r.isLineCurve||r.isLineCurve3)?1:r&&r.isSplineCurve?e*r.points.length:e,a=r.getPoints(s);for(let c=0;c<a.length;c++){const l=a[c];if(n&&n.equals(l))continue;t.push(l),n=l}}return this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])&&t.push(t[0]),t},copy:function(e){de.prototype.copy.call(this,e),this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const i=e.curves[t];this.curves.push(i.clone())}return this.autoClose=e.autoClose,this},toJSON:function(){const e=de.prototype.toJSON.call(this);e.autoClose=this.autoClose,e.curves=[];for(let t=0,n=this.curves.length;t<n;t++){const i=this.curves[t];e.curves.push(i.toJSON())}return e},fromJSON:function(e){de.prototype.fromJSON.call(this,e),this.autoClose=e.autoClose,this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const i=e.curves[t];this.curves.push(new lb[i.type]().fromJSON(i))}return this}});function $t(e){Dn.call(this),this.type="Path",this.currentPoint=new X,e&&this.setFromPoints(e)}$t.prototype=Object.assign(Object.create(Dn.prototype),{constructor:$t,setFromPoints:function(e){this.moveTo(e[0].x,e[0].y);for(let t=1,n=e.length;t<n;t++)this.lineTo(e[t].x,e[t].y);return this},moveTo:function(e,t){return this.currentPoint.set(e,t),this},lineTo:function(e,t){const n=new Pt(this.currentPoint.clone(),new X(e,t));return this.curves.push(n),this.currentPoint.set(e,t),this},quadraticCurveTo:function(e,t,n,i){const o=new Qt(this.currentPoint.clone(),new X(e,t),new X(n,i));return this.curves.push(o),this.currentPoint.set(n,i),this},bezierCurveTo:function(e,t,n,i,o,r){const s=new Zt(this.currentPoint.clone(),new X(e,t),new X(n,i),new X(o,r));return this.curves.push(s),this.currentPoint.set(o,r),this},splineThru:function(e){const t=[this.currentPoint.clone()].concat(e),n=new Kt(t);return this.curves.push(n),this.currentPoint.copy(e[e.length-1]),this},arc:function(e,t,n,i,o,r){const s=this.currentPoint.x,a=this.currentPoint.y;return this.absarc(e+s,t+a,n,i,o,r),this},absarc:function(e,t,n,i,o,r){return this.absellipse(e,t,n,n,i,o,r),this},ellipse:function(e,t,n,i,o,r,s,a){const c=this.currentPoint.x,l=this.currentPoint.y;return this.absellipse(e+c,t+l,n,i,o,r,s,a),this},absellipse:function(e,t,n,i,o,r,s,a){const c=new Nt(e,t,n,i,o,r,s,a);if(this.curves.length>0){const u=c.getPoint(0);u.equals(this.currentPoint)||this.lineTo(u.x,u.y)}this.curves.push(c);const l=c.getPoint(1);return this.currentPoint.copy(l),this},copy:function(e){return Dn.prototype.copy.call(this,e),this.currentPoint.copy(e.currentPoint),this},toJSON:function(){const e=Dn.prototype.toJSON.call(this);return e.currentPoint=this.currentPoint.toArray(),e},fromJSON:function(e){return Dn.prototype.fromJSON.call(this,e),this.currentPoint.fromArray(e.currentPoint),this}});function Ji(e){$t.call(this,e),this.uuid=Ee.generateUUID(),this.type="Shape",this.holes=[]}Ji.prototype=Object.assign(Object.create($t.prototype),{constructor:Ji,getPointsHoles:function(e){const t=[];for(let n=0,i=this.holes.length;n<i;n++)t[n]=this.holes[n].getPoints(e);return t},extractPoints:function(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}},copy:function(e){$t.prototype.copy.call(this,e),this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const i=e.holes[t];this.holes.push(i.clone())}return this},toJSON:function(){const e=$t.prototype.toJSON.call(this);e.uuid=this.uuid,e.holes=[];for(let t=0,n=this.holes.length;t<n;t++){const i=this.holes[t];e.holes.push(i.toJSON())}return e},fromJSON:function(e){$t.prototype.fromJSON.call(this,e),this.uuid=e.uuid,this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const i=e.holes[t];this.holes.push(new $t().fromJSON(i))}return this}});function Ye(e,t){he.call(this),this.type="Light",this.color=new ue(e),this.intensity=t!==void 0?t:1}Ye.prototype=Object.assign(Object.create(he.prototype),{constructor:Ye,isLight:!0,copy:function(e){return he.prototype.copy.call(this,e),this.color.copy(e.color),this.intensity=e.intensity,this},toJSON:function(e){const t=he.prototype.toJSON.call(this,e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==void 0&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(t.object.distance=this.distance),this.angle!==void 0&&(t.object.angle=this.angle),this.decay!==void 0&&(t.object.decay=this.decay),this.penumbra!==void 0&&(t.object.penumbra=this.penumbra),this.shadow!==void 0&&(t.object.shadow=this.shadow.toJSON()),t}});function Sh(e,t,n){Ye.call(this,e,n),this.type="HemisphereLight",this.position.copy(he.DefaultUp),this.updateMatrix(),this.groundColor=new ue(t)}Sh.prototype=Object.assign(Object.create(Ye.prototype),{constructor:Sh,isHemisphereLight:!0,copy:function(e){return Ye.prototype.copy.call(this,e),this.groundColor.copy(e.groundColor),this}});function vn(e){this.camera=e,this.bias=0,this.normalBias=0,this.radius=1,this.mapSize=new X(512,512),this.map=null,this.mapPass=null,this.matrix=new Re,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Sr,this._frameExtents=new X(1,1),this._viewportCount=1,this._viewports=[new Ve(0,0,1,1)]}Object.assign(vn.prototype,{_projScreenMatrix:new Re,_lightPositionWorld:new A,_lookTarget:new A,getViewportCount:function(){return this._viewportCount},getFrustum:function(){return this._frustum},updateMatrices:function(e){const t=this.camera,n=this.matrix,i=this._projScreenMatrix,o=this._lookTarget,r=this._lightPositionWorld;r.setFromMatrixPosition(e.matrixWorld),t.position.copy(r),o.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(o),t.updateMatrixWorld(),i.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(i),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(t.projectionMatrix),n.multiply(t.matrixWorldInverse)},getViewport:function(e){return this._viewports[e]},getFrameExtents:function(){return this._frameExtents},copy:function(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this},clone:function(){return new this.constructor().copy(this)},toJSON:function(){const e={};return this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}});function Pa(){vn.call(this,new tt(50,1,.5,500)),this.focus=1}Pa.prototype=Object.assign(Object.create(vn.prototype),{constructor:Pa,isSpotLightShadow:!0,updateMatrices:function(e){const t=this.camera,n=Ee.RAD2DEG*2*e.angle*this.focus,i=this.mapSize.width/this.mapSize.height,o=e.distance||t.far;(n!==t.fov||i!==t.aspect||o!==t.far)&&(t.fov=n,t.aspect=i,t.far=o,t.updateProjectionMatrix()),vn.prototype.updateMatrices.call(this,e)}});function Eh(e,t,n,i,o,r){Ye.call(this,e,t),this.type="SpotLight",this.position.copy(he.DefaultUp),this.updateMatrix(),this.target=new he,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(s){this.intensity=s/Math.PI}}),this.distance=n!==void 0?n:0,this.angle=i!==void 0?i:Math.PI/3,this.penumbra=o!==void 0?o:0,this.decay=r!==void 0?r:1,this.shadow=new Pa}Eh.prototype=Object.assign(Object.create(Ye.prototype),{constructor:Eh,isSpotLight:!0,copy:function(e){return Ye.prototype.copy.call(this,e),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}});function La(){vn.call(this,new tt(90,1,.5,500)),this._frameExtents=new X(4,2),this._viewportCount=6,this._viewports=[new Ve(2,1,1,1),new Ve(0,1,1,1),new Ve(3,1,1,1),new Ve(1,1,1,1),new Ve(3,0,1,1),new Ve(1,0,1,1)],this._cubeDirections=[new A(1,0,0),new A(-1,0,0),new A(0,0,1),new A(0,0,-1),new A(0,1,0),new A(0,-1,0)],this._cubeUps=[new A(0,1,0),new A(0,1,0),new A(0,1,0),new A(0,1,0),new A(0,0,1),new A(0,0,-1)]}La.prototype=Object.assign(Object.create(vn.prototype),{constructor:La,isPointLightShadow:!0,updateMatrices:function(e,t){t===void 0&&(t=0);const n=this.camera,i=this.matrix,o=this._lightPositionWorld,r=this._lookTarget,s=this._projScreenMatrix;o.setFromMatrixPosition(e.matrixWorld),n.position.copy(o),r.copy(n.position),r.add(this._cubeDirections[t]),n.up.copy(this._cubeUps[t]),n.lookAt(r),n.updateMatrixWorld(),i.makeTranslation(-o.x,-o.y,-o.z),s.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(s)}});function Th(e,t,n,i){Ye.call(this,e,t),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return this.intensity*4*Math.PI},set:function(o){this.intensity=o/(4*Math.PI)}}),this.distance=n!==void 0?n:0,this.decay=i!==void 0?i:1,this.shadow=new La}Th.prototype=Object.assign(Object.create(Ye.prototype),{constructor:Th,isPointLight:!0,copy:function(e){return Ye.prototype.copy.call(this,e),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}});function Ba(e,t,n,i,o,r){Bn.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e!==void 0?e:-1,this.right=t!==void 0?t:1,this.top=n!==void 0?n:1,this.bottom=i!==void 0?i:-1,this.near=o!==void 0?o:.1,this.far=r!==void 0?r:2e3,this.updateProjectionMatrix()}Ba.prototype=Object.assign(Object.create(Bn.prototype),{constructor:Ba,isOrthographicCamera:!0,copy:function(e,t){return Bn.prototype.copy.call(this,e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this},setViewOffset:function(e,t,n,i,o,r){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=o,this.view.height=r,this.updateProjectionMatrix()},clearViewOffset:function(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let o=n-e,r=n+e,s=i+t,a=i-t;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom,l=(this.top-this.bottom)/this.view.fullHeight/this.zoom;o+=c*this.view.offsetX,r=o+c*this.view.width,s-=l*this.view.offsetY,a=s-l*this.view.height}this.projectionMatrix.makeOrthographic(o,r,s,a,this.near,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(e){const t=he.prototype.toJSON.call(this,e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}});function Ia(){vn.call(this,new Ba(-5,5,5,-5,.5,500))}Ia.prototype=Object.assign(Object.create(vn.prototype),{constructor:Ia,isDirectionalLightShadow:!0,updateMatrices:function(e){vn.prototype.updateMatrices.call(this,e)}});function Xr(e,t){Ye.call(this,e,t),this.type="DirectionalLight",this.position.copy(he.DefaultUp),this.updateMatrix(),this.target=new he,this.shadow=new Ia}Xr.prototype=Object.assign(Object.create(Ye.prototype),{constructor:Xr,isDirectionalLight:!0,copy:function(e){return Ye.prototype.copy.call(this,e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}});function Yr(e,t){Ye.call(this,e,t),this.type="AmbientLight"}Yr.prototype=Object.assign(Object.create(Ye.prototype),{constructor:Yr,isAmbientLight:!0});function Ah(e,t,n,i){Ye.call(this,e,t),this.type="RectAreaLight",this.width=n!==void 0?n:10,this.height=i!==void 0?i:10}Ah.prototype=Object.assign(Object.create(Ye.prototype),{constructor:Ah,isRectAreaLight:!0,copy:function(e){return Ye.prototype.copy.call(this,e),this.width=e.width,this.height=e.height,this},toJSON:function(e){const t=Ye.prototype.toJSON.call(this,e);return t.object.width=this.width,t.object.height=this.height,t}});class hb{constructor(){Object.defineProperty(this,"isSphericalHarmonics3",{value:!0}),this.coefficients=[];for(let e=0;e<9;e++)this.coefficients.push(new A)}set(e){for(let t=0;t<9;t++)this.coefficients[t].copy(e[t]);return this}zero(){for(let e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this}getAt(e,t){const n=e.x,i=e.y,o=e.z,r=this.coefficients;return t.copy(r[0]).multiplyScalar(.282095),t.addScaledVector(r[1],.488603*i),t.addScaledVector(r[2],.488603*o),t.addScaledVector(r[3],.488603*n),t.addScaledVector(r[4],1.092548*(n*i)),t.addScaledVector(r[5],1.092548*(i*o)),t.addScaledVector(r[6],.315392*(3*o*o-1)),t.addScaledVector(r[7],1.092548*(n*o)),t.addScaledVector(r[8],.546274*(n*n-i*i)),t}getIrradianceAt(e,t){const n=e.x,i=e.y,o=e.z,r=this.coefficients;return t.copy(r[0]).multiplyScalar(.886227),t.addScaledVector(r[1],2*.511664*i),t.addScaledVector(r[2],2*.511664*o),t.addScaledVector(r[3],2*.511664*n),t.addScaledVector(r[4],2*.429043*n*i),t.addScaledVector(r[5],2*.429043*i*o),t.addScaledVector(r[6],.743125*o*o-.247708),t.addScaledVector(r[7],2*.429043*n*o),t.addScaledVector(r[8],.429043*(n*n-i*i)),t}add(e){for(let t=0;t<9;t++)this.coefficients[t].add(e.coefficients[t]);return this}addScaledSH(e,t){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(e.coefficients[n],t);return this}scale(e){for(let t=0;t<9;t++)this.coefficients[t].multiplyScalar(e);return this}lerp(e,t){for(let n=0;n<9;n++)this.coefficients[n].lerp(e.coefficients[n],t);return this}equals(e){for(let t=0;t<9;t++)if(!this.coefficients[t].equals(e.coefficients[t]))return!1;return!0}copy(e){return this.set(e.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(e,t){t===void 0&&(t=0);const n=this.coefficients;for(let i=0;i<9;i++)n[i].fromArray(e,t+i*3);return this}toArray(e,t){e===void 0&&(e=[]),t===void 0&&(t=0);const n=this.coefficients;for(let i=0;i<9;i++)n[i].toArray(e,t+i*3);return e}static getBasisAt(e,t){const n=e.x,i=e.y,o=e.z;t[0]=.282095,t[1]=.488603*i,t[2]=.488603*o,t[3]=.488603*n,t[4]=1.092548*n*i,t[5]=1.092548*i*o,t[6]=.315392*(3*o*o-1),t[7]=1.092548*n*o,t[8]=.546274*(n*n-i*i)}}function en(e,t){Ye.call(this,void 0,t),this.type="LightProbe",this.sh=e!==void 0?e:new hb}en.prototype=Object.assign(Object.create(Ye.prototype),{constructor:en,isLightProbe:!0,copy:function(e){return Ye.prototype.copy.call(this,e),this.sh.copy(e.sh),this},fromJSON:function(e){return this.intensity=e.intensity,this.sh.fromArray(e.sh),this},toJSON:function(e){const t=Ye.prototype.toJSON.call(this,e);return t.object.sh=this.sh.toArray(),t}});function Ch(e){Ue.call(this,e),this.textures={}}Ch.prototype=Object.assign(Object.create(Ue.prototype),{constructor:Ch,load:function(e,t,n,i){const o=this,r=new mn(o.manager);r.setPath(o.path),r.setRequestHeader(o.requestHeader),r.setWithCredentials(o.withCredentials),r.load(e,function(s){try{t(o.parse(JSON.parse(s)))}catch(a){i?i(a):console.error(a),o.manager.itemError(e)}},n,i)},parse:function(e){const t=this.textures;function n(o){return t[o]===void 0&&console.warn("THREE.MaterialLoader: Undefined texture",o),t[o]}const i=new Qx[e.type];if(e.uuid!==void 0&&(i.uuid=e.uuid),e.name!==void 0&&(i.name=e.name),e.color!==void 0&&i.color.setHex(e.color),e.roughness!==void 0&&(i.roughness=e.roughness),e.metalness!==void 0&&(i.metalness=e.metalness),e.sheen!==void 0&&(i.sheen=new ue().setHex(e.sheen)),e.emissive!==void 0&&i.emissive.setHex(e.emissive),e.specular!==void 0&&i.specular.setHex(e.specular),e.shininess!==void 0&&(i.shininess=e.shininess),e.clearcoat!==void 0&&(i.clearcoat=e.clearcoat),e.clearcoatRoughness!==void 0&&(i.clearcoatRoughness=e.clearcoatRoughness),e.fog!==void 0&&(i.fog=e.fog),e.flatShading!==void 0&&(i.flatShading=e.flatShading),e.blending!==void 0&&(i.blending=e.blending),e.combine!==void 0&&(i.combine=e.combine),e.side!==void 0&&(i.side=e.side),e.opacity!==void 0&&(i.opacity=e.opacity),e.transparent!==void 0&&(i.transparent=e.transparent),e.alphaTest!==void 0&&(i.alphaTest=e.alphaTest),e.depthTest!==void 0&&(i.depthTest=e.depthTest),e.depthWrite!==void 0&&(i.depthWrite=e.depthWrite),e.colorWrite!==void 0&&(i.colorWrite=e.colorWrite),e.stencilWrite!==void 0&&(i.stencilWrite=e.stencilWrite),e.stencilWriteMask!==void 0&&(i.stencilWriteMask=e.stencilWriteMask),e.stencilFunc!==void 0&&(i.stencilFunc=e.stencilFunc),e.stencilRef!==void 0&&(i.stencilRef=e.stencilRef),e.stencilFuncMask!==void 0&&(i.stencilFuncMask=e.stencilFuncMask),e.stencilFail!==void 0&&(i.stencilFail=e.stencilFail),e.stencilZFail!==void 0&&(i.stencilZFail=e.stencilZFail),e.stencilZPass!==void 0&&(i.stencilZPass=e.stencilZPass),e.wireframe!==void 0&&(i.wireframe=e.wireframe),e.wireframeLinewidth!==void 0&&(i.wireframeLinewidth=e.wireframeLinewidth),e.wireframeLinecap!==void 0&&(i.wireframeLinecap=e.wireframeLinecap),e.wireframeLinejoin!==void 0&&(i.wireframeLinejoin=e.wireframeLinejoin),e.rotation!==void 0&&(i.rotation=e.rotation),e.linewidth!==1&&(i.linewidth=e.linewidth),e.dashSize!==void 0&&(i.dashSize=e.dashSize),e.gapSize!==void 0&&(i.gapSize=e.gapSize),e.scale!==void 0&&(i.scale=e.scale),e.polygonOffset!==void 0&&(i.polygonOffset=e.polygonOffset),e.polygonOffsetFactor!==void 0&&(i.polygonOffsetFactor=e.polygonOffsetFactor),e.polygonOffsetUnits!==void 0&&(i.polygonOffsetUnits=e.polygonOffsetUnits),e.skinning!==void 0&&(i.skinning=e.skinning),e.morphTargets!==void 0&&(i.morphTargets=e.morphTargets),e.morphNormals!==void 0&&(i.morphNormals=e.morphNormals),e.dithering!==void 0&&(i.dithering=e.dithering),e.vertexTangents!==void 0&&(i.vertexTangents=e.vertexTangents),e.visible!==void 0&&(i.visible=e.visible),e.toneMapped!==void 0&&(i.toneMapped=e.toneMapped),e.userData!==void 0&&(i.userData=e.userData),e.vertexColors!==void 0&&(typeof e.vertexColors=="number"?i.vertexColors=e.vertexColors>0:i.vertexColors=e.vertexColors),e.uniforms!==void 0)for(const o in e.uniforms){const r=e.uniforms[o];i.uniforms[o]={};switch(r.type){case"t":i.uniforms[o].value=n(r.value);break;case"c":i.uniforms[o].value=new ue().setHex(r.value);break;case"v2":i.uniforms[o].value=new X().fromArray(r.value);break;case"v3":i.uniforms[o].value=new A().fromArray(r.value);break;case"v4":i.uniforms[o].value=new Ve().fromArray(r.value);break;case"m3":i.uniforms[o].value=new Mt().fromArray(r.value);break;case"m4":i.uniforms[o].value=new Re().fromArray(r.value);break;default:i.uniforms[o].value=r.value}}if(e.defines!==void 0&&(i.defines=e.defines),e.vertexShader!==void 0&&(i.vertexShader=e.vertexShader),e.fragmentShader!==void 0&&(i.fragmentShader=e.fragmentShader),e.extensions!==void 0)for(const o in e.extensions)i.extensions[o]=e.extensions[o];if(e.shading!==void 0&&(i.flatShading=e.shading===1),e.size!==void 0&&(i.size=e.size),e.sizeAttenuation!==void 0&&(i.sizeAttenuation=e.sizeAttenuation),e.map!==void 0&&(i.map=n(e.map)),e.matcap!==void 0&&(i.matcap=n(e.matcap)),e.alphaMap!==void 0&&(i.alphaMap=n(e.alphaMap)),e.bumpMap!==void 0&&(i.bumpMap=n(e.bumpMap)),e.bumpScale!==void 0&&(i.bumpScale=e.bumpScale),e.normalMap!==void 0&&(i.normalMap=n(e.normalMap)),e.normalMapType!==void 0&&(i.normalMapType=e.normalMapType),e.normalScale!==void 0){let o=e.normalScale;Array.isArray(o)===!1&&(o=[o,o]),i.normalScale=new X().fromArray(o)}return e.displacementMap!==void 0&&(i.displacementMap=n(e.displacementMap)),e.displacementScale!==void 0&&(i.displacementScale=e.displacementScale),e.displacementBias!==void 0&&(i.displacementBias=e.displacementBias),e.roughnessMap!==void 0&&(i.roughnessMap=n(e.roughnessMap)),e.metalnessMap!==void 0&&(i.metalnessMap=n(e.metalnessMap)),e.emissiveMap!==void 0&&(i.emissiveMap=n(e.emissiveMap)),e.emissiveIntensity!==void 0&&(i.emissiveIntensity=e.emissiveIntensity),e.specularMap!==void 0&&(i.specularMap=n(e.specularMap)),e.envMap!==void 0&&(i.envMap=n(e.envMap)),e.envMapIntensity!==void 0&&(i.envMapIntensity=e.envMapIntensity),e.reflectivity!==void 0&&(i.reflectivity=e.reflectivity),e.refractionRatio!==void 0&&(i.refractionRatio=e.refractionRatio),e.lightMap!==void 0&&(i.lightMap=n(e.lightMap)),e.lightMapIntensity!==void 0&&(i.lightMapIntensity=e.lightMapIntensity),e.aoMap!==void 0&&(i.aoMap=n(e.aoMap)),e.aoMapIntensity!==void 0&&(i.aoMapIntensity=e.aoMapIntensity),e.gradientMap!==void 0&&(i.gradientMap=n(e.gradientMap)),e.clearcoatMap!==void 0&&(i.clearcoatMap=n(e.clearcoatMap)),e.clearcoatRoughnessMap!==void 0&&(i.clearcoatRoughnessMap=n(e.clearcoatRoughnessMap)),e.clearcoatNormalMap!==void 0&&(i.clearcoatNormalMap=n(e.clearcoatNormalMap)),e.clearcoatNormalScale!==void 0&&(i.clearcoatNormalScale=new X().fromArray(e.clearcoatNormalScale)),e.transmission!==void 0&&(i.transmission=e.transmission),e.transmissionMap!==void 0&&(i.transmissionMap=n(e.transmissionMap)),i},setTextures:function(e){return this.textures=e,this}});const ub={decodeText:function(e){if(typeof TextDecoder!="undefined")return new TextDecoder().decode(e);let t="";for(let n=0,i=e.length;n<i;n++)t+=String.fromCharCode(e[n]);try{return decodeURIComponent(escape(t))}catch(n){return t}},extractUrlBase:function(e){const t=e.lastIndexOf("/");return t===-1?"./":e.substr(0,t+1)}};function Zr(){De.call(this),this.type="InstancedBufferGeometry",this.instanceCount=Infinity}Zr.prototype=Object.assign(Object.create(De.prototype),{constructor:Zr,isInstancedBufferGeometry:!0,copy:function(e){return De.prototype.copy.call(this,e),this.instanceCount=e.instanceCount,this},clone:function(){return new this.constructor().copy(this)},toJSON:function(){const e=De.prototype.toJSON.call(this);return e.instanceCount=this.instanceCount,e.isInstancedBufferGeometry=!0,e}});function Na(e,t,n,i){typeof n=="number"&&(i=n,n=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),Te.call(this,e,t,n),this.meshPerAttribute=i||1}Na.prototype=Object.assign(Object.create(Te.prototype),{constructor:Na,isInstancedBufferAttribute:!0,copy:function(e){return Te.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this},toJSON:function(){const e=Te.prototype.toJSON.call(this);return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}});function Rh(e){Ue.call(this,e)}Rh.prototype=Object.assign(Object.create(Ue.prototype),{constructor:Rh,load:function(e,t,n,i){const o=this,r=new mn(o.manager);r.setPath(o.path),r.setRequestHeader(o.requestHeader),r.setWithCredentials(o.withCredentials),r.load(e,function(s){try{t(o.parse(JSON.parse(s)))}catch(a){i?i(a):console.error(a),o.manager.itemError(e)}},n,i)},parse:function(e){const t={},n={};function i(p,d){if(t[d]!==void 0)return t[d];const m=p.interleavedBuffers,y=m[d],v=o(p,y.buffer),g=new Jr[y.type](v),f=new Bt(g,y.stride);return f.uuid=y.uuid,t[d]=f,f}function o(p,d){if(n[d]!==void 0)return n[d];const m=p.arrayBuffers,y=m[d],v=new Uint32Array(y).buffer;return n[d]=v,v}const r=e.isInstancedBufferGeometry?new Zr:new De,s=e.data.index;if(s!==void 0){const p=new Jr[s.type](s.array);r.setIndex(new Te(p,1))}const a=e.data.attributes;for(const p in a){const d=a[p];let m;if(d.isInterleavedBufferAttribute){const y=i(e.data,d.data);m=new ti(y,d.itemSize,d.offset,d.normalized)}else{const y=new Jr[d.type](d.array),v=d.isInstancedBufferAttribute?Na:Te;m=new v(y,d.itemSize,d.normalized)}d.name!==void 0&&(m.name=d.name),r.setAttribute(p,m)}const c=e.data.morphAttributes;if(c)for(const p in c){const d=c[p],m=[];for(let y=0,v=d.length;y<v;y++){const g=d[y];let f;if(g.isInterleavedBufferAttribute){const w=i(e.data,g.data);f=new ti(w,g.itemSize,g.offset,g.normalized)}else{const w=new Jr[g.type](g.array);f=new Te(w,g.itemSize,g.normalized)}g.name!==void 0&&(f.name=g.name),m.push(f)}r.morphAttributes[p]=m}const l=e.data.morphTargetsRelative;l&&(r.morphTargetsRelative=!0);const u=e.data.groups||e.data.drawcalls||e.data.offsets;if(u!==void 0)for(let p=0,d=u.length;p!==d;++p){const m=u[p];r.addGroup(m.start,m.count,m.materialIndex)}const h=e.data.boundingSphere;if(h!==void 0){const p=new A;h.center!==void 0&&p.fromArray(h.center),r.boundingSphere=new Tn(p,h.radius)}return e.name&&(r.name=e.name),e.userData&&(r.userData=e.userData),r}});const Jr={Int8Array,Uint8Array,Uint8ClampedArray:typeof Uint8ClampedArray!="undefined"?Uint8ClampedArray:Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function Ph(e){typeof createImageBitmap=="undefined"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch=="undefined"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),Ue.call(this,e),this.options={premultiplyAlpha:"none"}}Ph.prototype=Object.assign(Object.create(Ue.prototype),{constructor:Ph,isImageBitmapLoader:!0,setOptions:function(t){return this.options=t,this},load:function(e,t,n,i){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const o=this,r=Zi.get(e);if(r!==void 0)return o.manager.itemStart(e),setTimeout(function(){t&&t(r),o.manager.itemEnd(e)},0),r;const s={};s.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",fetch(e,s).then(function(a){return a.blob()}).then(function(a){return createImageBitmap(a,o.options)}).then(function(a){Zi.add(e,a),t&&t(a),o.manager.itemEnd(e)}).catch(function(a){i&&i(a),o.manager.itemError(e),o.manager.itemEnd(e)}),o.manager.itemStart(e)}});function Lh(){this.type="ShapePath",this.color=new ue,this.subPaths=[],this.currentPath=null}Object.assign(Lh.prototype,{moveTo:function(e,t){return this.currentPath=new $t,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t),this},lineTo:function(e,t){return this.currentPath.lineTo(e,t),this},quadraticCurveTo:function(e,t,n,i){return this.currentPath.quadraticCurveTo(e,t,n,i),this},bezierCurveTo:function(e,t,n,i,o,r){return this.currentPath.bezierCurveTo(e,t,n,i,o,r),this},splineThru:function(e){return this.currentPath.splineThru(e),this},toShapes:function(e,t){function n(g){const f=[];for(let w=0,_=g.length;w<_;w++){const M=g[w],b=new Ji;b.curves=M.curves,f.push(b)}return f}function i(g,f){const w=f.length;let _=!1;for(let M=w-1,b=0;b<w;M=b++){let P=f[M],D=f[b],B=D.x-P.x,V=D.y-P.y;if(Math.abs(V)>Number.EPSILON){if(V<0&&(P=f[b],B=-B,D=f[M],V=-V),g.y<P.y||g.y>D.y)continue;if(g.y===P.y){if(g.x===P.x)return!0}else{const N=V*(g.x-P.x)-B*(g.y-P.y);if(N===0)return!0;if(N<0)continue;_=!_}}else{if(g.y!==P.y)continue;if(D.x<=g.x&&g.x<=P.x||P.x<=g.x&&g.x<=D.x)return!0}}return _}const o=Fn.isClockWise,r=this.subPaths;if(r.length===0)return[];if(t===!0)return n(r);let s,a,c;const l=[];if(r.length===1)return a=r[0],c=new Ji,c.curves=a.curves,l.push(c),l;let u=!o(r[0].getPoints());u=e?!u:u;const h=[],p=[];let d=[],m=0,y;p[m]=void 0,d[m]=[];for(let g=0,f=r.length;g<f;g++)a=r[g],y=a.getPoints(),s=o(y),s=e?!s:s,s?(!u&&p[m]&&m++,p[m]={s:new Ji,p:y},p[m].s.curves=a.curves,u&&m++,d[m]=[]):d[m].push({h:a,p:y[0]});if(!p[0])return n(r);if(p.length>1){let g=!1;const f=[];for(let w=0,_=p.length;w<_;w++)h[w]=[];for(let w=0,_=p.length;w<_;w++){const M=d[w];for(let b=0;b<M.length;b++){const P=M[b];let D=!0;for(let B=0;B<p.length;B++)i(P.p,p[B].p)&&(w!==B&&f.push({froms:w,tos:B,hole:b}),D?(D=!1,h[B].push(P)):g=!0);D&&h[w].push(P)}}f.length>0&&(g||(d=h))}let v;for(let g=0,f=p.length;g<f;g++){c=p[g].s,l.push(c),v=d[g];for(let w=0,_=v.length;w<_;w++)c.holes.push(v[w].h)}return l}});function Bh(e){this.type="Font",this.data=e}Object.assign(Bh.prototype,{isFont:!0,generateShapes:function(e,t){t===void 0&&(t=100);const n=[],i=db(e,t,this.data);for(let o=0,r=i.length;o<r;o++)Array.prototype.push.apply(n,i[o].toShapes());return n}});function db(e,t,n){const i=Array.from?Array.from(e):String(e).split(""),o=t/n.resolution,r=(n.boundingBox.yMax-n.boundingBox.yMin+n.underlineThickness)*o,s=[];let a=0,c=0;for(let l=0;l<i.length;l++){const u=i[l];if(u===`
`)a=0,c-=r;else{const h=pb(u,o,a,c,n);a+=h.offsetX,s.push(h.path)}}return s}function pb(e,t,n,i,o){const r=o.glyphs[e]||o.glyphs["?"];if(!r){console.error('THREE.Font: character "'+e+'" does not exists in font family '+o.familyName+".");return}const s=new Lh;let a,c,l,u,h,p,d,m;if(r.o){const y=r._cachedOutline||(r._cachedOutline=r.o.split(" "));for(let v=0,g=y.length;v<g;){const f=y[v++];switch(f){case"m":a=y[v++]*t+n,c=y[v++]*t+i,s.moveTo(a,c);break;case"l":a=y[v++]*t+n,c=y[v++]*t+i,s.lineTo(a,c);break;case"q":l=y[v++]*t+n,u=y[v++]*t+i,h=y[v++]*t+n,p=y[v++]*t+i,s.quadraticCurveTo(h,p,l,u);break;case"b":l=y[v++]*t+n,u=y[v++]*t+i,h=y[v++]*t+n,p=y[v++]*t+i,d=y[v++]*t+n,m=y[v++]*t+i,s.bezierCurveTo(h,p,d,m,l,u);break}}}return{offsetX:r.ha*t,path:s}}function Ih(e){Ue.call(this,e)}Ih.prototype=Object.assign(Object.create(Ue.prototype),{constructor:Ih,load:function(e,t,n,i){const o=this,r=new mn(this.manager);r.setPath(this.path),r.setRequestHeader(this.requestHeader),r.setWithCredentials(o.withCredentials),r.load(e,function(s){let a;try{a=JSON.parse(s)}catch(l){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),a=JSON.parse(s.substring(65,s.length-2))}const c=o.parse(a);t&&t(c)},n,i)},parse:function(e){return new Bh(e)}});let Qr;const fb={getContext:function(){return Qr===void 0&&(Qr=new(window.AudioContext||window.webkitAudioContext)),Qr},setContext:function(e){Qr=e}};function za(e){Ue.call(this,e)}za.prototype=Object.assign(Object.create(Ue.prototype),{constructor:za,load:function(e,t,n,i){const o=this,r=new mn(o.manager);r.setResponseType("arraybuffer"),r.setPath(o.path),r.setRequestHeader(o.requestHeader),r.setWithCredentials(o.withCredentials),r.load(e,function(s){try{const a=s.slice(0),c=fb.getContext();c.decodeAudioData(a,function(l){t(l)})}catch(a){i?i(a):console.error(a),o.manager.itemError(e)}},n,i)}});function Nh(e,t,n){en.call(this,void 0,n);const i=new ue().set(e),o=new ue().set(t),r=new A(i.r,i.g,i.b),s=new A(o.r,o.g,o.b),a=Math.sqrt(Math.PI),c=a*Math.sqrt(.75);this.sh.coefficients[0].copy(r).add(s).multiplyScalar(a),this.sh.coefficients[1].copy(r).sub(s).multiplyScalar(c)}Nh.prototype=Object.assign(Object.create(en.prototype),{constructor:Nh,isHemisphereLightProbe:!0,copy:function(e){return en.prototype.copy.call(this,e),this},toJSON:function(e){const t=en.prototype.toJSON.call(this,e);return t}});function zh(e,t){en.call(this,void 0,t);const n=new ue().set(e);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}zh.prototype=Object.assign(Object.create(en.prototype),{constructor:zh,isAmbientLightProbe:!0,copy:function(e){return en.prototype.copy.call(this,e),this},toJSON:function(e){const t=en.prototype.toJSON.call(this,e);return t}});const Fh=new Re,Dh=new Re;function mb(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new tt,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new tt,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}Object.assign(mb.prototype,{update:function(e){const t=this._cache,n=t.focus!==e.focus||t.fov!==e.fov||t.aspect!==e.aspect*this.aspect||t.near!==e.near||t.far!==e.far||t.zoom!==e.zoom||t.eyeSep!==this.eyeSep;if(n){t.focus=e.focus,t.fov=e.fov,t.aspect=e.aspect*this.aspect,t.near=e.near,t.far=e.far,t.zoom=e.zoom,t.eyeSep=this.eyeSep;const i=e.projectionMatrix.clone(),o=t.eyeSep/2,r=o*t.near/t.focus,s=t.near*Math.tan(Ee.DEG2RAD*t.fov*.5)/t.zoom;let a,c;Dh.elements[12]=-o,Fh.elements[12]=o,a=-s*t.aspect+r,c=s*t.aspect+r,i.elements[0]=2*t.near/(c-a),i.elements[8]=(c+a)/(c-a),this.cameraL.projectionMatrix.copy(i),a=-s*t.aspect-r,c=s*t.aspect-r,i.elements[0]=2*t.near/(c-a),i.elements[8]=(c+a)/(c-a),this.cameraR.projectionMatrix.copy(i)}this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(Dh),this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(Fh)}});class gb extends he{constructor(e){super();this.type="Audio",this.listener=e,this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this}setMediaElementSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(e),this.connect(),this}setMediaStreamSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(e),this.connect(),this}setBuffer(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this}play(e){if(e===void 0&&(e=0),this.isPlaying===!0){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+e;const t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.loopStart=this.loopStart,t.loopEnd=this.loopEnd,t.onended=this.onEnded.bind(this),t.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=t,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(e){return e||(e=[]),this._connected===!0?(this.disconnect(),this.filters=e,this.connect()):this.filters=e,this}setDetune(e){return this.detune=e,this.source.detune===void 0?void 0:(this.isPlaying===!0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this)}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(e){return this.setFilters(e?[e]:[])}setPlaybackRate(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=e,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=e,this.isPlaying===!0&&(this.source.loop=this.loop),this}setLoopStart(e){return this.loopStart=e,this}setLoopEnd(e){return this.loopEnd=e,this}getVolume(){return this.gain.gain.value}setVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}}class yb{constructor(e,t){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=t!==void 0?t:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let e=0;const t=this.getFrequencyData();for(let n=0;n<t.length;n++)e+=t[n];return e/t.length}}function Oh(e,t,n){this.binding=e,this.valueSize=n;let i,o,r;switch(t){case"quaternion":i=this._slerp,o=this._slerpAdditive,r=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(n*6),this._workIndex=5;break;case"string":case"bool":i=this._select,o=this._select,r=this._setAdditiveIdentityOther,this.buffer=new Array(n*5);break;default:i=this._lerp,o=this._lerpAdditive,r=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(n*5)}this._mixBufferRegion=i,this._mixBufferRegionAdditive=o,this._setIdentity=r,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}Object.assign(Oh.prototype,{accumulate:function(e,t){const n=this.buffer,i=this.valueSize,o=e*i+i;let r=this.cumulativeWeight;if(r===0){for(let s=0;s!==i;++s)n[o+s]=n[s];r=t}else{r+=t;const s=t/r;this._mixBufferRegion(n,o,0,s,i)}this.cumulativeWeight=r},accumulateAdditive:function(e){const t=this.buffer,n=this.valueSize,i=n*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(t,i,0,e,n),this.cumulativeWeightAdditive+=e},apply:function(e){const t=this.valueSize,n=this.buffer,i=e*t+t,o=this.cumulativeWeight,r=this.cumulativeWeightAdditive,s=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,o<1){const a=t*this._origIndex;this._mixBufferRegion(n,i,a,1-o,t)}r>0&&this._mixBufferRegionAdditive(n,i,this._addIndex*t,1,t);for(let a=t,c=t+t;a!==c;++a)if(n[a]!==n[a+t]){s.setValue(n,i);break}},saveOriginalState:function(){const e=this.binding,t=this.buffer,n=this.valueSize,i=n*this._origIndex;e.getValue(t,i);for(let o=n,r=i;o!==r;++o)t[o]=t[i+o%n];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0},restoreOriginalState:function(){const e=this.valueSize*3;this.binding.setValue(this.buffer,e)},_setAdditiveIdentityNumeric:function(){const e=this._addIndex*this.valueSize,t=e+this.valueSize;for(let n=e;n<t;n++)this.buffer[n]=0},_setAdditiveIdentityQuaternion:function(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1},_setAdditiveIdentityOther:function(){const e=this._origIndex*this.valueSize,t=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++)this.buffer[t+n]=this.buffer[e+n]},_select:function(e,t,n,i,o){if(i>=.5)for(let r=0;r!==o;++r)e[t+r]=e[n+r]},_slerp:function(e,t,n,i){ht.slerpFlat(e,t,e,t,e,n,i)},_slerpAdditive:function(e,t,n,i,o){const r=this._workIndex*o;ht.multiplyQuaternionsFlat(e,r,e,t,e,n),ht.slerpFlat(e,t,e,t,e,r,i)},_lerp:function(e,t,n,i,o){const r=1-i;for(let s=0;s!==o;++s){const a=t+s;e[a]=e[a]*r+e[n+s]*i}},_lerpAdditive:function(e,t,n,i,o){for(let r=0;r!==o;++r){const s=t+r;e[s]=e[s]+e[n+r]*i}}});const Fa="\\[\\]\\.:\\/",vb=new RegExp("["+Fa+"]","g"),Da="[^"+Fa+"]",xb="[^"+Fa.replace("\\.","")+"]",bb=/((?:WC+[\/:])*)/.source.replace("WC",Da),wb=/(WCOD+)?/.source.replace("WCOD",xb),_b=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",Da),Mb=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",Da),Sb=new RegExp("^"+bb+wb+_b+Mb+"$"),Eb=["material","materials","bones"];function kh(e,t,n){const i=n||xt.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,i)}Object.assign(kh.prototype,{getValue:function(e,t){this.bind();const n=this._targetGroup.nCachedObjects_,i=this._bindings[n];i!==void 0&&i.getValue(e,t)},setValue:function(e,t){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,o=n.length;i!==o;++i)n[i].setValue(e,t)},bind:function(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].bind()},unbind:function(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].unbind()}});function xt(e,t,n){this.path=t,this.parsedPath=n||xt.parseTrackName(t),this.node=xt.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e}Object.assign(xt,{Composite:kh,create:function(e,t,n){return e&&e.isAnimationObjectGroup?new xt.Composite(e,t,n):new xt(e,t,n)},sanitizeNodeName:function(e){return e.replace(/\s/g,"_").replace(vb,"")},parseTrackName:function(e){const t=Sb.exec(e);if(!t)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(i!==void 0&&i!==-1){const o=n.nodeName.substring(i+1);Eb.indexOf(o)!==-1&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=o)}if(n.propertyName===null||n.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return n},findNode:function(e,t){if(!t||t===""||t==="."||t===-1||t===e.name||t===e.uuid)return e;if(e.skeleton){const n=e.skeleton.getBoneByName(t);if(n!==void 0)return n}if(e.children){const n=function(o){for(let r=0;r<o.length;r++){const s=o[r];if(s.name===t||s.uuid===t)return s;const a=n(s.children);if(a)return a}return null},i=n(e.children);if(i)return i}return null}});Object.assign(xt.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(t,n){t[n]=this.node[this.propertyName]},function(t,n){const i=this.resolvedProperty;for(let o=0,r=i.length;o!==r;++o)t[n++]=i[o]},function(t,n){t[n]=this.resolvedProperty[this.propertyIndex]},function(t,n){this.resolvedProperty.toArray(t,n)}],SetterByBindingTypeAndVersioning:[[function(t,n){this.targetObject[this.propertyName]=t[n]},function(t,n){this.targetObject[this.propertyName]=t[n],this.targetObject.needsUpdate=!0},function(t,n){this.targetObject[this.propertyName]=t[n],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,n){const i=this.resolvedProperty;for(let o=0,r=i.length;o!==r;++o)i[o]=t[n++]},function(t,n){const i=this.resolvedProperty;for(let o=0,r=i.length;o!==r;++o)i[o]=t[n++];this.targetObject.needsUpdate=!0},function(t,n){const i=this.resolvedProperty;for(let o=0,r=i.length;o!==r;++o)i[o]=t[n++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,n){this.resolvedProperty[this.propertyIndex]=t[n]},function(t,n){this.resolvedProperty[this.propertyIndex]=t[n],this.targetObject.needsUpdate=!0},function(t,n){this.resolvedProperty[this.propertyIndex]=t[n],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,n){this.resolvedProperty.fromArray(t,n)},function(t,n){this.resolvedProperty.fromArray(t,n),this.targetObject.needsUpdate=!0},function(t,n){this.resolvedProperty.fromArray(t,n),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(t,n){this.bind(),this.getValue(t,n)},setValue:function(t,n){this.bind(),this.setValue(t,n)},bind:function(){let e=this.node;const t=this.parsedPath,n=t.objectName,i=t.propertyName;let o=t.propertyIndex;if(e||(e=xt.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");return}if(n){let c=t.objectIndex;switch(n){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let l=0;l<e.length;l++)if(e[l].name===c){c=l;break}break;default:if(e[n]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[n]}if(c!==void 0){if(e[c]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[c]}}const r=e[i];if(r===void 0){const c=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+c+"."+i+" but it wasn't found.",e);return}let s=this.Versioning.None;this.targetObject=e,e.needsUpdate!==void 0?s=this.Versioning.NeedsUpdate:e.matrixWorldNeedsUpdate!==void 0&&(s=this.Versioning.MatrixWorldNeedsUpdate);let a=this.BindingType.Direct;if(o!==void 0){if(i==="morphTargetInfluences"){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(e.geometry.isBufferGeometry){if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}e.morphTargetDictionary[o]!==void 0&&(o=e.morphTargetDictionary[o])}else{console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);return}}a=this.BindingType.ArrayElement,this.resolvedProperty=r,this.propertyIndex=o}else r.fromArray!==void 0&&r.toArray!==void 0?(a=this.BindingType.HasFromToArray,this.resolvedProperty=r):Array.isArray(r)?(a=this.BindingType.EntireArray,this.resolvedProperty=r):this.propertyName=i;this.getValue=this.GetterByBindingType[a],this.setValue=this.SetterByBindingTypeAndVersioning[a][s]},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}});Object.assign(xt.prototype,{_getValue_unbound:xt.prototype.getValue,_setValue_unbound:xt.prototype.setValue});function Tb(){this.uuid=Ee.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const e={};this._indicesByUUID=e;for(let n=0,i=arguments.length;n!==i;++n)e[arguments[n].uuid]=n;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const t=this;this.stats={objects:{get total(){return t._objects.length},get inUse(){return this.total-t.nCachedObjects_}},get bindingsPerObject(){return t._bindings.length}}}Object.assign(Tb.prototype,{isAnimationObjectGroup:!0,add:function(){const e=this._objects,t=this._indicesByUUID,n=this._paths,i=this._parsedPaths,o=this._bindings,r=o.length;let s,a=e.length,c=this.nCachedObjects_;for(let l=0,u=arguments.length;l!==u;++l){const h=arguments[l],p=h.uuid;let d=t[p];if(d===void 0){d=a++,t[p]=d,e.push(h);for(let m=0,y=r;m!==y;++m)o[m].push(new xt(h,n[m],i[m]))}else if(d<c){s=e[d];const m=--c,y=e[m];t[y.uuid]=d,e[d]=y,t[p]=m,e[m]=h;for(let v=0,g=r;v!==g;++v){const f=o[v],w=f[m];let _=f[d];f[d]=w,_===void 0&&(_=new xt(h,n[v],i[v])),f[m]=_}}else e[d]!==s&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=c},remove:function(){const e=this._objects,t=this._indicesByUUID,n=this._bindings,i=n.length;let o=this.nCachedObjects_;for(let r=0,s=arguments.length;r!==s;++r){const a=arguments[r],c=a.uuid,l=t[c];if(l!==void 0&&l>=o){const u=o++,h=e[u];t[h.uuid]=l,e[l]=h,t[c]=u,e[u]=a;for(let p=0,d=i;p!==d;++p){const m=n[p],y=m[u],v=m[l];m[l]=y,m[u]=v}}}this.nCachedObjects_=o},uncache:function(){const e=this._objects,t=this._indicesByUUID,n=this._bindings,i=n.length;let o=this.nCachedObjects_,r=e.length;for(let s=0,a=arguments.length;s!==a;++s){const c=arguments[s],l=c.uuid,u=t[l];if(u!==void 0)if(delete t[l],u<o){const h=--o,p=e[h],d=--r,m=e[d];t[p.uuid]=u,e[u]=p,t[m.uuid]=h,e[h]=m,e.pop();for(let y=0,v=i;y!==v;++y){const g=n[y],f=g[h],w=g[d];g[u]=f,g[h]=w,g.pop()}}else{const h=--r,p=e[h];t[p.uuid]=u,e[u]=p,e.pop();for(let d=0,m=i;d!==m;++d){const y=n[d];y[u]=y[h],y.pop()}}}this.nCachedObjects_=o},subscribe_:function(e,t){const n=this._bindingsIndicesByPath;let i=n[e];const o=this._bindings;if(i!==void 0)return o[i];const r=this._paths,s=this._parsedPaths,a=this._objects,c=a.length,l=this.nCachedObjects_,u=new Array(c);i=o.length,n[e]=i,r.push(e),s.push(t),o.push(u);for(let h=l,p=a.length;h!==p;++h){const d=a[h];u[h]=new xt(d,e,t)}return u},unsubscribe_:function(e){const t=this._bindingsIndicesByPath,n=t[e];if(n!==void 0){const i=this._paths,o=this._parsedPaths,r=this._bindings,s=r.length-1,a=r[s],c=e[s];t[c]=n,r[n]=a,r.pop(),o[n]=o[s],o.pop(),i[n]=i[s],i.pop()}}});class Ab{constructor(e,t,n,i){this._mixer=e,this._clip=t,this._localRoot=n||null,this.blendMode=i||t.blendMode;const o=t.tracks,r=o.length,s=new Array(r),a={endingStart:ui,endingEnd:ui};for(let c=0;c!==r;++c){const l=o[c].createInterpolant(null);s[c]=l,l.settings=a}this._interpolantSettings=a,this._interpolants=s,this._propertyBindings=new Array(r),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=em,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=Infinity,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(e){return this._startTime=e,this}setLoop(e,t){return this.loop=e,this.repetitions=t,this}setEffectiveWeight(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(e){return this._scheduleFading(e,0,1)}fadeOut(e){return this._scheduleFading(e,1,0)}crossFadeFrom(e,t,n){if(e.fadeOut(t),this.fadeIn(t),n){const i=this._clip.duration,o=e._clip.duration,r=o/i,s=i/o;e.warp(1,r,t),this.warp(s,1,t)}return this}crossFadeTo(e,t,n){return e.crossFadeFrom(this,t,n)}stopFading(){const e=this._weightInterpolant;return e!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}setEffectiveTimeScale(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(e){return this.timeScale=this._clip.duration/e,this.stopWarping()}syncWith(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()}halt(e){return this.warp(this._effectiveTimeScale,0,e)}warp(e,t,n){const i=this._mixer,o=i.time,r=this.timeScale;let s=this._timeScaleInterpolant;s===null&&(s=i._lendControlInterpolant(),this._timeScaleInterpolant=s);const a=s.parameterPositions,c=s.sampleValues;return a[0]=o,a[1]=o+n,c[0]=e/r,c[1]=t/r,this}stopWarping(){const e=this._timeScaleInterpolant;return e!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(e,t,n,i){if(!this.enabled){this._updateWeight(e);return}const o=this._startTime;if(o!==null){const a=(e-o)*n;if(a<0||n===0)return;this._startTime=null,t=n*a}t*=this._updateTimeScale(e);const r=this._updateTime(t),s=this._updateWeight(e);if(s>0){const a=this._interpolants,c=this._propertyBindings;switch(this.blendMode){case $c:for(let l=0,u=a.length;l!==u;++l)a[l].evaluate(r),c[l].accumulateAdditive(s);break;case Cs:default:for(let l=0,u=a.length;l!==u;++l)a[l].evaluate(r),c[l].accumulate(i,s)}}}_updateWeight(e){let t=0;if(this.enabled){t=this.weight;const n=this._weightInterpolant;if(n!==null){const i=n.evaluate(e)[0];t*=i,e>n.parameterPositions[1]&&(this.stopFading(),i===0&&(this.enabled=!1))}}return this._effectiveWeight=t,t}_updateTimeScale(e){let t=0;if(!this.paused){t=this.timeScale;const n=this._timeScaleInterpolant;if(n!==null){const i=n.evaluate(e)[0];t*=i,e>n.parameterPositions[1]&&(this.stopWarping(),t===0?this.paused=!0:this.timeScale=t)}}return this._effectiveTimeScale=t,t}_updateTime(e){const t=this._clip.duration,n=this.loop;let i=this.time+e,o=this._loopCount;const r=n===tm;if(e===0)return o===-1?i:r&&(o&1)===1?t-i:i;if(n===$f){o===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(i>=t)i=t;else if(i<0)i=0;else{this.time=i;break e}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(o===-1&&(e>=0?(o=0,this._setEndings(!0,this.repetitions===0,r)):this._setEndings(this.repetitions===0,!0,r)),i>=t||i<0){const s=Math.floor(i/t);i-=t*s,o+=Math.abs(s);const a=this.repetitions-o;if(a<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,i=e>0?t:0,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(a===1){const c=e<0;this._setEndings(c,!c,r)}else this._setEndings(!1,!1,r);this._loopCount=o,this.time=i,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:s})}}else this.time=i;if(r&&(o&1)===1)return t-i}return i}_setEndings(e,t,n){const i=this._interpolantSettings;n?(i.endingStart=di,i.endingEnd=di):(e?i.endingStart=this.zeroSlopeAtStart?di:ui:i.endingStart=ar,t?i.endingEnd=this.zeroSlopeAtEnd?di:ui:i.endingEnd=ar)}_scheduleFading(e,t,n){const i=this._mixer,o=i.time;let r=this._weightInterpolant;r===null&&(r=i._lendControlInterpolant(),this._weightInterpolant=r);const s=r.parameterPositions,a=r.sampleValues;return s[0]=o,a[0]=t,s[1]=o+e,a[1]=n,this}}function Gh(e){this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}Gh.prototype=Object.assign(Object.create(an.prototype),{constructor:Gh,_bindAction:function(e,t){const n=e._localRoot||this._root,i=e._clip.tracks,o=i.length,r=e._propertyBindings,s=e._interpolants,a=n.uuid,c=this._bindingsByRootAndName;let l=c[a];l===void 0&&(l={},c[a]=l);for(let u=0;u!==o;++u){const h=i[u],p=h.name;let d=l[p];if(d!==void 0)r[u]=d;else{if(d=r[u],d!==void 0){d._cacheIndex===null&&(++d.referenceCount,this._addInactiveBinding(d,a,p));continue}const m=t&&t._propertyBindings[u].binding.parsedPath;d=new Oh(xt.create(n,p,m),h.ValueTypeName,h.getValueSize()),++d.referenceCount,this._addInactiveBinding(d,a,p),r[u]=d}s[u].resultBuffer=d.buffer}},_activateAction:function(e){if(!this._isActiveAction(e)){if(e._cacheIndex===null){const n=(e._localRoot||this._root).uuid,i=e._clip.uuid,o=this._actionsByClip[i];this._bindAction(e,o&&o.knownActions[0]),this._addInactiveAction(e,i,n)}const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const o=t[n];o.useCount++===0&&(this._lendBinding(o),o.saveOriginalState())}this._lendAction(e)}},_deactivateAction:function(e){if(this._isActiveAction(e)){const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const o=t[n];--o.useCount===0&&(o.restoreOriginalState(),this._takeBackBinding(o))}this._takeBackAction(e)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}},_isActiveAction:function(e){const t=e._cacheIndex;return t!==null&&t<this._nActiveActions},_addInactiveAction:function(e,t,n){const i=this._actions,o=this._actionsByClip;let r=o[t];if(r===void 0)r={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,o[t]=r;else{const s=r.knownActions;e._byClipCacheIndex=s.length,s.push(e)}e._cacheIndex=i.length,i.push(e),r.actionByRoot[n]=e},_removeInactiveAction:function(e){const t=this._actions,n=t[t.length-1],i=e._cacheIndex;n._cacheIndex=i,t[i]=n,t.pop(),e._cacheIndex=null;const o=e._clip.uuid,r=this._actionsByClip,s=r[o],a=s.knownActions,c=a[a.length-1],l=e._byClipCacheIndex;c._byClipCacheIndex=l,a[l]=c,a.pop(),e._byClipCacheIndex=null;const u=s.actionByRoot,h=(e._localRoot||this._root).uuid;delete u[h],a.length===0&&delete r[o],this._removeInactiveBindingsForAction(e)},_removeInactiveBindingsForAction:function(e){const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const o=t[n];--o.referenceCount===0&&this._removeInactiveBinding(o)}},_lendAction:function(e){const t=this._actions,n=e._cacheIndex,i=this._nActiveActions++,o=t[i];e._cacheIndex=i,t[i]=e,o._cacheIndex=n,t[n]=o},_takeBackAction:function(e){const t=this._actions,n=e._cacheIndex,i=--this._nActiveActions,o=t[i];e._cacheIndex=i,t[i]=e,o._cacheIndex=n,t[n]=o},_addInactiveBinding:function(e,t,n){const i=this._bindingsByRootAndName,o=this._bindings;let r=i[t];r===void 0&&(r={},i[t]=r),r[n]=e,e._cacheIndex=o.length,o.push(e)},_removeInactiveBinding:function(e){const t=this._bindings,n=e.binding,i=n.rootNode.uuid,o=n.path,r=this._bindingsByRootAndName,s=r[i],a=t[t.length-1],c=e._cacheIndex;a._cacheIndex=c,t[c]=a,t.pop(),delete s[o],Object.keys(s).length===0&&delete r[i]},_lendBinding:function(e){const t=this._bindings,n=e._cacheIndex,i=this._nActiveBindings++,o=t[i];e._cacheIndex=i,t[i]=e,o._cacheIndex=n,t[n]=o},_takeBackBinding:function(e){const t=this._bindings,n=e._cacheIndex,i=--this._nActiveBindings,o=t[i];e._cacheIndex=i,t[i]=e,o._cacheIndex=n,t[n]=o},_lendControlInterpolant:function(){const e=this._controlInterpolants,t=this._nActiveControlInterpolants++;let n=e[t];return n===void 0&&(n=new Hr(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),n.__cacheIndex=t,e[t]=n),n},_takeBackControlInterpolant:function(e){const t=this._controlInterpolants,n=e.__cacheIndex,i=--this._nActiveControlInterpolants,o=t[i];e.__cacheIndex=i,t[i]=e,o.__cacheIndex=n,t[n]=o},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(e,t,n){const i=t||this._root,o=i.uuid;let r=typeof e=="string"?Yt.findByName(i,e):e;const s=r!==null?r.uuid:e,a=this._actionsByClip[s];let c=null;if(n===void 0&&(r!==null?n=r.blendMode:n=Cs),a!==void 0){const u=a.actionByRoot[o];if(u!==void 0&&u.blendMode===n)return u;c=a.knownActions[0],r===null&&(r=c._clip)}if(r===null)return null;const l=new Ab(this,r,t,n);return this._bindAction(l,c),this._addInactiveAction(l,s,o),l},existingAction:function(e,t){const n=t||this._root,i=n.uuid,o=typeof e=="string"?Yt.findByName(n,e):e,r=o?o.uuid:e,s=this._actionsByClip[r];return s!==void 0&&s.actionByRoot[i]||null},stopAllAction:function(){const e=this._actions,t=this._nActiveActions;for(let n=t-1;n>=0;--n)e[n].stop();return this},update:function(e){e*=this.timeScale;const t=this._actions,n=this._nActiveActions,i=this.time+=e,o=Math.sign(e),r=this._accuIndex^=1;for(let c=0;c!==n;++c){const l=t[c];l._update(i,e,o,r)}const s=this._bindings,a=this._nActiveBindings;for(let c=0;c!==a;++c)s[c].apply(r);return this},setTime:function(e){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(e)},getRoot:function(){return this._root},uncacheClip:function(e){const t=this._actions,n=e.uuid,i=this._actionsByClip,o=i[n];if(o!==void 0){const r=o.knownActions;for(let s=0,a=r.length;s!==a;++s){const c=r[s];this._deactivateAction(c);const l=c._cacheIndex,u=t[t.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,u._cacheIndex=l,t[l]=u,t.pop(),this._removeInactiveBindingsForAction(c)}delete i[n]}},uncacheRoot:function(e){const t=e.uuid,n=this._actionsByClip;for(const r in n){const s=n[r].actionByRoot,a=s[t];a!==void 0&&(this._deactivateAction(a),this._removeInactiveAction(a))}const i=this._bindingsByRootAndName,o=i[t];if(o!==void 0)for(const r in o){const s=o[r];s.restoreOriginalState(),this._removeInactiveBinding(s)}},uncacheAction:function(e,t){const n=this.existingAction(e,t);n!==null&&(this._deactivateAction(n),this._removeInactiveAction(n))}});class Vh{constructor(e){typeof e=="string"&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),e=arguments[1]),this.value=e}clone(){return new Vh(this.value.clone===void 0?this.value:this.value.clone())}}function Uh(e,t,n){Bt.call(this,e,t),this.meshPerAttribute=n||1}Uh.prototype=Object.assign(Object.create(Bt.prototype),{constructor:Uh,isInstancedInterleavedBuffer:!0,copy:function(e){return Bt.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this},clone:function(e){const t=Bt.prototype.clone.call(this,e);return t.meshPerAttribute=this.meshPerAttribute,t},toJSON:function(e){const t=Bt.prototype.toJSON.call(this,e);return t.isInstancedInterleavedBuffer=!0,t.meshPerAttribute=this.meshPerAttribute,t}});function Hh(e,t,n,i,o){this.buffer=e,this.type=t,this.itemSize=n,this.elementSize=i,this.count=o,this.version=0}Object.defineProperty(Hh.prototype,"needsUpdate",{set:function(e){e===!0&&this.version++}});Object.assign(Hh.prototype,{isGLBufferAttribute:!0,setBuffer:function(e){return this.buffer=e,this},setType:function(e,t){return this.type=e,this.elementSize=t,this},setItemSize:function(e){return this.itemSize=e,this},setCount:function(e){return this.count=e,this}});function Wh(e,t,n,i){this.ray=new mo(e,t),this.near=n||0,this.far=i||Infinity,this.camera=null,this.layers=new hl,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})}function jh(e,t){return e.distance-t.distance}function Oa(e,t,n,i){if(e.layers.test(t.layers)&&e.raycast(t,n),i===!0){const o=e.children;for(let r=0,s=o.length;r<s;r++)Oa(o[r],t,n,!0)}}Object.assign(Wh.prototype,{set:function(e,t){this.ray.set(e,t)},setFromCamera:function(e,t){t&&t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t&&t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(e,t,n){const i=n||[];return Oa(e,this,i,t),i.sort(jh),i},intersectObjects:function(e,t,n){const i=n||[];if(Array.isArray(e)===!1)return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),i;for(let o=0,r=e.length;o<r;o++)Oa(e[o],this,i,t);return i.sort(jh),i}});const qh=new X;class Cb{constructor(e,t){Object.defineProperty(this,"isBox2",{value:!0}),this.min=e!==void 0?e:new X(Infinity,Infinity),this.max=t!==void 0?t:new X(-Infinity,-Infinity)}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=qh.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=Infinity,this.max.x=this.max.y=-Infinity,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(e){return e===void 0&&(console.warn("THREE.Box2: .getCenter() target is now required"),e=new X),this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return e===void 0&&(console.warn("THREE.Box2: .getSize() target is now required"),e=new X),this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y}getParameter(e,t){return t===void 0&&(console.warn("THREE.Box2: .getParameter() target is now required"),t=new X),t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y)}clampPoint(e,t){return t===void 0&&(console.warn("THREE.Box2: .clampPoint() target is now required"),t=new X),t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){const t=qh.copy(e).clamp(this.min,this.max);return t.sub(e).length()}intersect(e){return this.min.max(e.min),this.max.min(e.max),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const Xh=new A,Kr=new A;class Rb{constructor(e,t){this.start=e!==void 0?e:new A,this.end=t!==void 0?t:new A}set(e,t){return this.start.copy(e),this.end.copy(t),this}clone(){return new this.constructor().copy(this)}copy(e){return this.start.copy(e.start),this.end.copy(e.end),this}getCenter(e){return e===void 0&&(console.warn("THREE.Line3: .getCenter() target is now required"),e=new A),e.addVectors(this.start,this.end).multiplyScalar(.5)}delta(e){return e===void 0&&(console.warn("THREE.Line3: .delta() target is now required"),e=new A),e.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(e,t){return t===void 0&&(console.warn("THREE.Line3: .at() target is now required"),t=new A),this.delta(t).multiplyScalar(e).add(this.start)}closestPointToPointParameter(e,t){Xh.subVectors(e,this.start),Kr.subVectors(this.end,this.start);const n=Kr.dot(Kr),i=Kr.dot(Xh);let o=i/n;return t&&(o=Ee.clamp(o,0,1)),o}closestPointToPoint(e,t,n){const i=this.closestPointToPointParameter(e,t);return n===void 0&&(console.warn("THREE.Line3: .closestPointToPoint() target is now required"),n=new A),this.delta(n).multiplyScalar(i).add(this.start)}applyMatrix4(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this}equals(e){return e.start.equals(this.start)&&e.end.equals(this.end)}}function $r(e){he.call(this),this.material=e,this.render=function(){},this.hasPositions=!1,this.hasNormals=!1,this.hasColors=!1,this.hasUvs=!1,this.positionArray=null,this.normalArray=null,this.colorArray=null,this.uvArray=null,this.count=0}$r.prototype=Object.create(he.prototype);$r.prototype.constructor=$r;$r.prototype.isImmediateRenderObject=!0;const On=new A,es=new Re,ka=new Re;class Pb extends Lo{constructor(e){const t=Yh(e),n=new De,i=[],o=[],r=new ue(0,0,1),s=new ue(0,1,0);for(let c=0;c<t.length;c++){const l=t[c];l.parent&&l.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),o.push(r.r,r.g,r.b),o.push(s.r,s.g,s.b))}n.setAttribute("position",new Pe(i,3)),n.setAttribute("color",new Pe(o,3));const a=new Rt({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(n,a);this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(e){const t=this.bones,n=this.geometry,i=n.getAttribute("position");ka.getInverse(this.root.matrixWorld);for(let o=0,r=0;o<t.length;o++){const s=t[o];s.parent&&s.parent.isBone&&(es.multiplyMatrices(ka,s.matrixWorld),On.setFromMatrixPosition(es),i.setXYZ(r,On.x,On.y,On.z),es.multiplyMatrices(ka,s.parent.matrixWorld),On.setFromMatrixPosition(es),i.setXYZ(r+1,On.x,On.y,On.z),r+=2)}n.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(e)}}function Yh(e){const t=[];e&&e.isBone&&t.push(e);for(let n=0;n<e.children.length;n++)t.push.apply(t,Yh(e.children[n]));return t}class Lb extends Lo{constructor(e,t,n,i){e=e||10,t=t||10,n=new ue(n!==void 0?n:4473924),i=new ue(i!==void 0?i:8947848);const o=t/2,r=e/t,s=e/2,a=[],c=[];for(let h=0,p=0,d=-s;h<=t;h++,d+=r){a.push(-s,0,d,s,0,d),a.push(d,0,-s,d,0,s);const m=h===o?n:i;m.toArray(c,p),p+=3,m.toArray(c,p),p+=3,m.toArray(c,p),p+=3,m.toArray(c,p),p+=3}const l=new De;l.setAttribute("position",new Pe(a,3)),l.setAttribute("color",new Pe(c,3));const u=new Rt({vertexColors:!0,toneMapped:!1});super(l,u);this.type="GridHelper"}}class Zh extends Lo{constructor(e=1){const t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e],n=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],i=new De;i.setAttribute("position",new Pe(t,3)),i.setAttribute("color",new Pe(n,3));const o=new Rt({vertexColors:!0,toneMapped:!1});super(i,o);this.type="AxesHelper"}}const Bb=4,Jh=8,$0=Math.pow(2,Jh),Ib=[.125,.215,.35,.446,.526,.582],ew=Jh-Bb+1+Ib.length;const tw={[pi]:0,[Rs]:1,[tl]:2,[nl]:3,[il]:4,[ol]:5,[el]:6};const ri=(1+Math.sqrt(5))/2,Qi=1/ri,nw=[new A(1,1,1),new A(-1,1,1),new A(1,1,-1),new A(-1,1,-1),new A(0,ri,Qi),new A(0,ri,-Qi),new A(Qi,0,ri),new A(-Qi,0,ri),new A(ri,Qi,0),new A(-ri,Qi,0)];de.create=function(e,t){return console.log("THREE.Curve.create() has been deprecated"),e.prototype=Object.create(de.prototype),e.prototype.constructor=e,e.prototype.getPoint=t,e};Object.assign(Dn.prototype,{createPointsGeometry:function(e){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");const t=this.getPoints(e);return this.createGeometry(t)},createSpacedPointsGeometry:function(e){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");const t=this.getSpacedPoints(e);return this.createGeometry(t)},createGeometry:function(e){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");const t=new gt;for(let n=0,i=e.length;n<i;n++){const o=e[n];t.vertices.push(new A(o.x,o.y,o.z||0))}return t}});Object.assign($t.prototype,{fromPoints:function(e){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(e)}});function Nb(e){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),vt.call(this,e),this.type="catmullrom",this.closed=!0}Nb.prototype=Object.create(vt.prototype);function zb(e){console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),vt.call(this,e),this.type="catmullrom"}zb.prototype=Object.create(vt.prototype);function Qh(e){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),vt.call(this,e),this.type="catmullrom"}Qh.prototype=Object.create(vt.prototype);Object.assign(Qh.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}});Lb.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")};Pb.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")};Object.assign(Ue.prototype,{extractUrlBase:function(e){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),ub.extractUrlBase(e)}});Ue.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}};Object.assign(Cb.prototype,{center:function(e){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(e)},empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},size:function(e){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(e)}});Object.assign(En.prototype,{center:function(e){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(e)},empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionSphere:function(e){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)},size:function(e){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(e)}});Object.assign(Tn.prototype,{empty:function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()}});Sr.prototype.setFromMatrix=function(e){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(e)};Rb.prototype.center=function(e){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(e)};Object.assign(Ee,{random16:function(){return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),Math.random()},nearestPowerOfTwo:function(e){return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),Ee.floorPowerOfTwo(e)},nextPowerOfTwo:function(e){return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),Ee.ceilPowerOfTwo(e)}});Object.assign(Mt.prototype,{flattenToArrayOffset:function(e,t){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(e,t)},multiplyVector3:function(e){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),e.applyMatrix3(this)},multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBufferAttribute:function(e){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),e.applyMatrix3(this)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}});Object.assign(Re.prototype,{extractPosition:function(e){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(e)},flattenToArrayOffset:function(e,t){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(e,t)},getPosition:function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),new A().setFromMatrixColumn(this,3)},setRotationFromQuaternion:function(e){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(e)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(e){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},multiplyVector4:function(e){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},rotateAxis:function(e){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),e.transformDirection(this)},crossVector:function(e){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBufferAttribute:function(e){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(e,t,n,i,o,r){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(e,t,i,n,o,r)}});un.prototype.isIntersectionLine=function(e){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(e)};ht.prototype.multiplyVector3=function(e){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),e.applyQuaternion(this)};Object.assign(mo.prototype,{isIntersectionBox:function(e){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionPlane:function(e){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(e)},isIntersectionSphere:function(e){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)}});Object.assign(mt.prototype,{area:function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},barycoordFromPoint:function(e,t){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(e,t)},midpoint:function(e){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(e)},normal:function(e){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(e)},plane:function(e){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(e)}});Object.assign(mt,{barycoordFromPoint:function(e,t,n,i,o){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),mt.getBarycoord(e,t,n,i,o)},normal:function(e,t,n,i){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),mt.getNormal(e,t,n,i)}});Object.assign(Ji.prototype,{extractAllPoints:function(e){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(e)},extrude:function(e){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new jx(this,e)},makeGeometry:function(e){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new Zx(this,e)}});Object.assign(X.prototype,{fromAttribute:function(e,t,n){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,n)},distanceToManhattan:function(e){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(e)},lengthManhattan:function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}});Object.assign(A.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(e){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(e)},getScaleFromMatrix:function(e){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(e)},getColumnFromMatrix:function(e,t){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(t,e)},applyProjection:function(e){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(e)},fromAttribute:function(e,t,n){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,n)},distanceToManhattan:function(e){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(e)},lengthManhattan:function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}});Object.assign(Ve.prototype,{fromAttribute:function(e,t,n){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,n)},lengthManhattan:function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}});Object.assign(gt.prototype,{computeTangents:function(){console.error("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")},applyMatrix:function(e){return console.warn("THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(e)}});Object.assign(he.prototype,{getChildByName:function(e){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(e)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(e,t){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(t,e)},getWorldRotation:function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},applyMatrix:function(e){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(e)}});Object.defineProperties(he.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(e){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=e}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}});Object.assign(at.prototype,{setDrawMode:function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}});Object.defineProperties(at.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),nm},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}});Object.defineProperties(la.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}});Object.defineProperty(ua.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}});ha.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")};Object.defineProperty(de.prototype,"__arcLengthDivisions",{get:function(){return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions},set:function(e){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions=e}});tt.prototype.setLens=function(e,t){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),t!==void 0&&(this.filmGauge=t),this.setFocalLength(e)};Object.defineProperties(Ye.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(e){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=e}},shadowCameraLeft:{set:function(e){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=e}},shadowCameraRight:{set:function(e){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=e}},shadowCameraTop:{set:function(e){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=e}},shadowCameraBottom:{set:function(e){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=e}},shadowCameraNear:{set:function(e){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=e}},shadowCameraFar:{set:function(e){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=e}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(e){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=e}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(e){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=e}},shadowMapHeight:{set:function(e){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=e}}});Object.defineProperties(Te.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===uo},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(uo)}}});Object.assign(Te.prototype,{setDynamic:function(e){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(e===!0?uo:cr),this},copyIndicesArray:function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},setArray:function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")}});Object.assign(De.prototype,{addIndex:function(e){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(e)},addAttribute:function(e,t){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),!(t&&t.isBufferAttribute)&&!(t&&t.isInterleavedBufferAttribute)?(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(e,new Te(arguments[1],arguments[2]))):e==="index"?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(t),this):this.setAttribute(e,t)},addDrawCall:function(e,t,n){n!==void 0&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(e,t)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},removeAttribute:function(e){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(e)},applyMatrix:function(e){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(e)}});Object.defineProperties(De.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}});Object.defineProperties(Zr.prototype,{maxInstancedCount:{get:function(){return console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount."),this.instanceCount},set:function(e){console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount."),this.instanceCount=e}}});Object.defineProperties(Wh.prototype,{linePrecision:{get:function(){return console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead."),this.params.Line.threshold},set:function(e){console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead."),this.params.Line.threshold=e}}});Object.defineProperties(Bt.prototype,{dynamic:{get:function(){return console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."),this.usage===uo},set:function(e){console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."),this.setUsage(e)}}});Object.assign(Bt.prototype,{setDynamic:function(e){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(e===!0?uo:cr),this},setArray:function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")}});Object.assign(yh.prototype,{getArrays:function(){console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")},addShapeList:function(){console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")},addShape:function(){console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")}});Object.assign(aa.prototype,{dispose:function(){console.error("THREE.Scene: .dispose() has been removed.")}});Object.defineProperties(Vh.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this}}});Object.defineProperties(ve.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new ue}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(e){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=e===Pc}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(e){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=e}}});Object.defineProperties(yt.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}});Object.defineProperties(oi.prototype,{transparency:{get:function(){return console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission."),this.transmission},set:function(e){console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission."),this.transmission=e}}});Object.defineProperties(St.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(e){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=e}}});Object.assign(Fi.prototype,{clearTarget:function(e,t,n,i){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(e),this.clear(t,n,i)},animate:function(e){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(e)},getCurrentRenderTarget:function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},resetGLState:function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(e){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(e)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},setFaceCulling:function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},allocTextureUnit:function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},setTexture:function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},setTexture2D:function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},setTextureCube:function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},getActiveMipMapLevel:function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()}});Object.defineProperties(Fi.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=e}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=e}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");return},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(e){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=e===!0?Rs:pi}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}}});Object.defineProperties(Hl.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");return},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");return},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");return},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}});Object.defineProperties(Dt.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=e}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=e}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=e}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=e}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(e){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=e}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(e){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=e}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(e){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=e}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(e){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=e}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(e){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=e}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(e){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=e}}});Object.defineProperties(gb.prototype,{load:{value:function(e){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const t=this,n=new za;return n.load(e,function(i){t.setBuffer(i)}),this}},startTime:{set:function(){console.warn("THREE.Audio: .startTime is now .play( delay ).")}}});yb.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()};wo.prototype.updateCubeMap=function(e,t){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(e,t)};Xn.crossOrigin=void 0;Xn.loadTexture=function(e,t,n,i){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const o=new Ea;o.setCrossOrigin(this.crossOrigin);const r=o.load(e,n,void 0,i);return t&&(r.mapping=t),r};Xn.loadTextureCube=function(e,t,n,i){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const o=new Sa;o.setCrossOrigin(this.crossOrigin);const r=o.load(e,n,void 0,i);return t&&(r.mapping=t),r};Xn.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")};Xn.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:Lp}}));class xn{constructor(e,t,n,i,o,r){this.mesh=new at;this.body=new ce;e&&this.setGeometry(e),t&&this.setMaterial(t),i!=null&&o!=null&&r!=null&&this.setPosition(i,o,r),n&&this.addShape(n),this.mesh.castShadow=!0,this.mesh.receiveShadow=!0}setGeometry(e){this.mesh.geometry=e}setMaterial(e){this.mesh.material=e}setPosition(e,t,n){this.mesh.position.set(e,t,n),this.body.position.set(e,t,n)}setMass(e){this.body.mass=e,e>0&&(this.body.type=oc.DYNAMIC),this.body.updateMassProperties()}addShape(e){this.body.addShape(e)}update(e){}}const Fb=15,Db=1.5,Ob=15;class Ga{constructor(e){this.pressedKeys=[];this.canJump=!1;this.enabled=!0;this.player=e,this.setListeners()}setListeners(){document.addEventListener("click",e=>{document.getElementsByTagName("canvas")[0].requestPointerLock()}),document.addEventListener("mousemove",e=>this.onMouseMove(e)),document.addEventListener("keydown",e=>{const t=e.key.toLowerCase();this.pressedKeys.includes(t)||this.pressedKeys.push(t)}),document.addEventListener("keyup",e=>{const t=e.key.toLowerCase();this.pressedKeys=this.pressedKeys.filter(n=>n!=t)}),this.player.body.addEventListener("collide",e=>this.onCollide(e))}onMouseMove(e){if(!this.enabled)return;const t=e.movementX||0,n=e.movementY||0;this.player.mesh.rotation.y-=t*.002,this.player.body.quaternion.setFromAxisAngle(new x(0,1,0),this.player.mesh.rotation.y),this.player.camera.rotation.x-=n*.002,this.player.camera.rotation.x=Math.max(-Math.PI/2,Math.min(Math.PI/2,this.player.camera.rotation.x))}onCollide(e){const t=new x,n=new x(0,1,0),i=e.contact;i.bi.id==this.player.body.id?i.ni.negate(t):t.copy(i.ni),t.dot(n)>.5&&(this.canJump=!0)}update(e){if(!this.enabled)return;var t=new A,n=new bi;this.pressedKeys.includes("w")&&(t.z=-1),this.pressedKeys.includes("s")&&(t.z=1),this.pressedKeys.includes("a")&&(t.x=-1),this.pressedKeys.includes("d")&&(t.x=1);let i=-9.81*e;this.canJump&&this.pressedKeys.includes(" ")&&(i+=Ob,this.canJump=!1);let o=1;this.pressedKeys.includes("shift")&&(o*=Db),n.x=this.player.camera.rotation.x,n.y=this.player.mesh.rotation.y,n.order="XYZ";const r=new ht;r.setFromEuler(n),t=t.applyQuaternion(r).normalize().multiplyScalar(Fb*o*e),this.player.body.velocity.x+=t.x,this.player.body.velocity.z+=t.z,this.player.body.velocity.y+=i}}class Uo extends xn{constructor(){super();this.setGeometry(new xh(.15)),this.setMaterial(new yt({color:16777215})),this.addShape(new mc(.15)),this.setMass(.5)}}const kb=10,Va=20,Gb=10;class ts{constructor(e){this.mouseDown=!1;this.charge=0;this.player=e,this.setListeners(),this.throwPos=this.createThrowPositionObject(),this.chargeBar=ts.createUI()}setListeners(){document.addEventListener("mousedown",()=>this.mouseDown=!0),document.addEventListener("mouseup",()=>this.onMouseUp())}createThrowPositionObject(){const e=new he;return this.player.camera.add(e),e.position.set(0,0,-1),e}static createUI(){return document.body.innerHTML+=` <div class="snowball-charge-container">
            <div class="snowball-charge"></div>
        </div>`,document.body.querySelector(".snowball-charge")}updateUI(e){this.chargeBar.style.width=`${e/Va*100}%`}onMouseUp(){this.mouseDown=!1,this.charge>kb&&this.throwSnowball(Math.min(this.charge,Va)),this.charge=0,this.updateUI(this.charge)}update(e){this.mouseDown&&this.charge<Va&&(this.charge+=Gb*e,this.updateUI(this.charge))}throwSnowball(e){const t=new Uo,n=this.throwPos.getWorldPosition(new A);t.setPosition(n.x,n.y,n.z);const i=this.throwPos.getWorldQuaternion(new ht);t.body.quaternion.copy(i);const o=new x(0,0,-e),r=t.body.quaternion.vmult(o);t.body.velocity.copy(r),this.player.scene.create(t)}}class ns extends xn{constructor(e){super(new hh(.5,.5,2,16),new yt({color:16776960}),new gc(.5,.5,2,16));this.scene=e,this.body.material=new Un({friction:0}),this.setPosition(0,2,0),this.setMass(100),this.body.fixedRotation=!0,this.body.updateMassProperties(),this.camera=this.createCamera(),this.controls=this.createControls(),this.snowball=new ts(this)}createControls(){return this.body.linearDamping=.99,new Ga(this)}update(e){this.controls.update(e),this.snowball.update(e)}createCamera(){const e=new tt(75,window.innerWidth/window.innerHeight,.1,1e3);return e.position.set(0,.8,0),this.mesh.add(e),e}}class Ua extends xn{constructor(){super(new lh,new yt({color:16711935}),new to(new x(.5,.5,.5)),0,10,-3);this.setMass(10),this.setPosition(0,10,-3)}}class Ha extends xn{constructor(){super(new vh(300,300,50,50),new yt({color:4543850}),new yc);this.body.quaternion.setFromAxisAngle(new x(1,0,0),-Math.PI/2),this.mesh.quaternion.setFromAxisAngle(new A(1,0,0),-Math.PI/2),this.body.material=new Un({friction:0})}}class Wa extends aa{constructor(){super();this.gameObjects=[];this.world=this.createPhysicsWorld(),this.create(new Ua),this.create(new Ha);let e=new Uo;e.setPosition(0,2,-2),this.create(e),this.initLights();const t=new Zh(2);t.position.set(-5,1,-5),this.add(t),this.player=new ns(this),this.create(this.player),this.camera=this.player.camera}create(e){super.add(e.mesh),this.world.addBody(e.body),this.gameObjects.push(e)}createPhysicsWorld(){const e=new ys;return e.gravity.set(0,-10,0),e.broadphase=new hs,e}initLights(){const e=16777215,t=.7,n=new Yr(e,t);n.position.set(0,5,0),this.add(n);const i=new Xr(e,t);i.position.set(3,5,5),i.castShadow=!0,this.add(i)}update(e){this.world.step(1/144),this.gameObjects.forEach(t=>{t.mesh.position.copy(t.body.position),t instanceof ns||t.mesh.quaternion.copy(t.body.quaternion)}),this.cdr&&this.cdr.update(),this.gameObjects.forEach(t=>t.update(e))}}class ja extends Fi{constructor(){super({antialias:!0});this.setSize(window.innerWidth,window.innerHeight),this.setClearColor(15790320),this.shadowMap.enabled=!0,this.shadowMap.type=vs,document.body.appendChild(this.domElement)}}let is,Kh;async function Vb(){is=new Wa,Kh=new ja,$h()}let eu=performance.now();function $h(){const e=performance.now();is.update((e-eu)/1e3),Kh.render(is,is.camera),requestAnimationFrame($h),eu=e}Vb();})();
